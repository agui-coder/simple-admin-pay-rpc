syntax = "proto3";

package pay;
option go_package="./pay";

//  base message
enum PayStatus {
  PAY_STATUS_UNKNOWN = 0;
  PAY_WAITING = 1;
  PAY_SUCCESS = 2;
  PAY_REFUND = 3;
  PAY_CLOSED = 4;
  PAY_FAILURE = 5;
}

enum PayType {
  PAY_TYPE_UNKNOWN = 0;
  PAY_ORDER = 1;
  PAY_RETURN = 2;
}

enum PayChannel {
  ChannelUnknown = 0;
  WxPub = 1;
  WxLite = 2;
  WxApp = 3;
  WxNative = 4;
  AlipayPc = 5;
  AlipayWap = 6;
  AlipayQr = 7;
  AlipayBar = 8;
}

//  TODO 给返回消息加上状态码？ 暂时没想好怎么用。
enum RetCode {
  SUCCESS = 0;
  ERROR = 500;
  TRADE_UUID_EMPTY = 7000003;
}

message RefundPageResp {
  uint64 total = 1;
  repeated RefundInfo data = 2;
}

message RefundDemoOrderReq {
  uint64 Id = 2;
  string userIp = 3;
}

message OrderSubmitReq {
  uint64 Id = 1;
  string ChannelCode = 2;
  map<string,string> ChannelExtras = 3;
  string DisplayMode = 4;
  string ReturnUrl = 5;
  string UserIP = 6;
}

message RefundCreateReq {
  string user_ip = 2;
  string merchant_order_id = 3;
  string merchant_refund_id = 4;
  string reason = 5;
  int32 price = 6;
}

message RefundPageReq {
  uint64 page = 1;
  uint64 page_size = 2;
  optional string channelCode = 4;
  optional string merchantOrderId = 5;
  optional string merchantRefundId = 6;
  optional string channelOrderNo = 7;
  optional string channelRefundNo = 8;
  optional uint32 status = 9;
  repeated int64 createTime = 10;
}

message NotifyRefundReq {
  uint32 Status = 1;
  string OutRefundNo = 2;
  string ChannelRefundNo = 3;
  int64 SuccessTime = 4;
  string ChannelNotifyData = 5;
  string ChannelErrorCode = 6;
  string ChannelErrorMsg = 7;
  string channelCode = 8;
}

//  base message
message Empty {}

message DemoOrderInfo {
  optional uint64 id = 1;
  optional int64 created_at = 2;
  optional int64 updated_at = 3;
  optional string userId = 4;
  optional uint64 spuId = 5;
  optional string spuName = 6;
  optional int32 price = 7;
  optional bool pay_status = 8;
  optional uint64 pay_orderId = 9;
  optional int64 pay_time = 10;
  optional string pay_channel_code = 11;
  optional uint64 pay_refund_id = 12;
  optional int32 refund_price = 13;
  optional int64 refund_time = 14;
}

message PayDemoOrderCreateReq {
  string userId = 1;
  uint64 spuId = 2;
  string userIp = 3;
}

//  refund message
message RefundInfo {
  optional uint64 id = 1;
  optional int64 created_at = 2;
  optional int64 updated_at = 3;
  optional uint32 status = 4;
  optional string no = 5;
  optional string channel_code = 6;
  optional uint64 order_id = 7;
  optional string order_no = 8;
  optional string merchant_order_id = 9;
  optional string merchant_refund_id = 10;
  optional int32 pay_price = 11;
  optional int32 refund_price = 12;
  optional string reason = 13;
  optional string user_ip = 14;
  optional string channel_order_no = 15;
  optional string channel_refund_no = 16;
  optional int64 success_time = 17;
  optional string channel_error_code = 18;
  optional string channel_error_msg = 19;
  optional string channel_notify_data = 20;
}

message UUIDReq {
  string id = 1;
}

message BaseUUIDResp {
  string id = 1;
  string msg = 2;
}

message DemoOrderPageReq {
  uint64 page = 1;
  uint64 page_size = 2;
}

message updateDemoRefundPaidReq {
  uint64 id = 1;
  uint64 payRefundId = 2;
}

message OrderExtensionInfo {
  optional uint64 id = 1;
  optional int64 created_at = 2;
  optional int64 updated_at = 3;
  optional uint32 status = 4;
  optional string no = 5;
  optional uint64 order_id = 6;
  optional string channel_code = 8;
  optional string user_ip = 9;
  map<string,string> channel_extras = 10;
  optional string channel_error_code = 11;
  optional string channel_error_msg = 12;
  optional string channel_notify_data = 13;
}

message OrderPageReq {
  uint64 page = 1;
  uint64 page_size = 2;
  optional string channelCode = 4;
  optional string merchantOrderId = 5;
  optional string channelOrderNo = 6;
  optional string no = 7;
  optional uint32 status = 8;
  repeated int64 createTime = 9;
}

message StringList {
  repeated string items = 1;
}

message OrderCreateExtensionReq {
  uint64 orderID = 1;
  string channelCode = 2;
  map<string,string> channelExtras = 3;
  string no = 4;
  uint32 status = 6;
  string userIP = 7;
}

message BaseResp {
  string msg = 2;
}

message PageInfoReq {
  uint64 page = 1;
  uint64 page_size = 2;
}

message DemoOrderListResp {
  uint64 total = 1;
  repeated DemoOrderInfo demoOrderList = 2;
}

message BaseMsg {
  string msg = 1;
}

message OrderListResp {
  uint64 total = 1;
  repeated OrderInfo data = 2;
}

message OrderSubmitResp {
  uint32 Status = 1;
  optional string DisplayMode = 2;
  optional string DisplayContent = 3;
}

message RefundCountResp {
  uint64 count = 1;
}

message OrderInfo {
  optional uint64 id = 1;
  optional int64 created_at = 2;
  optional int64 updated_at = 3;
  optional uint32 status = 4;
  optional string channel_code = 5;
  optional string merchant_order_id = 6;
  optional string subject = 7;
  optional string body = 8;
  optional int32 price = 9;
  optional double channel_fee_rate = 10;
  optional int32 channel_fee_price = 11;
  optional string user_ip = 12;
  optional int64 expire_time = 13;
  optional int64 success_time = 14;
  optional int64 notify_time = 15;
  optional uint64 extension_id = 16;
  optional string no = 17;
  optional int32 refund_price = 18;
  optional string channel_user_id = 19;
  optional string channel_order_no = 20;
}

message OrderCreateReq {
  string userIp = 2;
  string merchantOrderId = 3;
  string subject = 4;
  string body = 5;
  int32 price = 6;
  int64 expireTime = 7;
  string notifyBusinessUrl = 8;
}

message NoReq {
  string no = 1;
}

message NotifyOrderReq {
  bytes r = 1;
  string code = 2;
}

message IDReq {
  uint64 id = 1;
}

message IDsReq {
  repeated uint64 ids = 1;
}

message BaseIDResp {
  uint64 id = 1;
  string msg = 2;
}

message UUIDsReq {
  repeated string ids = 1;
}

message updateDemoOrderPaidReq {
  uint64 id = 1;
  uint64 payOrderId = 2;
}

service Pay {
  //  group: base
  rpc initDatabase(Empty) returns (BaseResp);
  //  Demo management
  //  group: demo
  rpc createDemoOrder(PayDemoOrderCreateReq) returns (BaseIDResp);
  //  group: demo
  rpc getDemoOrder(IDReq) returns (DemoOrderInfo);
  //  group: demo
  rpc getListDemoOrder(DemoOrderPageReq) returns (DemoOrderListResp);
  //  group: demo
  rpc updateDemoOrderPaid(updateDemoOrderPaidReq) returns (BaseResp);
  //  group: demo
  rpc refundDemoOrder(RefundDemoOrderReq) returns (BaseResp);
  //  group: demo
  rpc updateDemoRefundPaid(updateDemoRefundPaidReq) returns (BaseResp);
  //  Order management
  //  group: order
  rpc createOrder(OrderCreateReq) returns (BaseIDResp);
  //  group: order
  rpc getOrder(IDReq) returns (OrderInfo);
  //  group: order
  rpc getOrderPage(OrderPageReq) returns (OrderListResp);
  //  group: order
  rpc createOrderExtension(OrderCreateExtensionReq) returns (BaseIDResp);
  //  group: order
  rpc getOrderExtension(IDReq) returns (OrderExtensionInfo);
  //  group: order
  rpc notifyOrder(NotifyOrderReq) returns (BaseResp);
  //  group: order
  rpc submitPayOrder(OrderSubmitReq) returns (OrderSubmitResp);
  //  refund management
  //  group: refund
  rpc createRefund(RefundCreateReq) returns (BaseIDResp);
  //  group: refund
  rpc getRefundPage(RefundPageReq) returns (RefundPageResp);
  //  group: refund
  rpc getRefundById(IDReq) returns (RefundInfo);
  //  group: refund
  rpc notifyRefund(NotifyRefundReq) returns (BaseResp);
}


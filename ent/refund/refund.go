// Code generated by ent, DO NOT EDIT.

package refund

import (
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the refund type in the database.
	Label = "refund"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldNo holds the string denoting the no field in the database.
	FieldNo = "no"
	// FieldChannelCode holds the string denoting the channel_code field in the database.
	FieldChannelCode = "channel_code"
	// FieldOrderID holds the string denoting the order_id field in the database.
	FieldOrderID = "order_id"
	// FieldOrderNo holds the string denoting the order_no field in the database.
	FieldOrderNo = "order_no"
	// FieldMerchantOrderID holds the string denoting the merchant_order_id field in the database.
	FieldMerchantOrderID = "merchant_order_id"
	// FieldMerchantRefundID holds the string denoting the merchant_refund_id field in the database.
	FieldMerchantRefundID = "merchant_refund_id"
	// FieldPayPrice holds the string denoting the pay_price field in the database.
	FieldPayPrice = "pay_price"
	// FieldRefundPrice holds the string denoting the refund_price field in the database.
	FieldRefundPrice = "refund_price"
	// FieldReason holds the string denoting the reason field in the database.
	FieldReason = "reason"
	// FieldUserIP holds the string denoting the user_ip field in the database.
	FieldUserIP = "user_ip"
	// FieldChannelOrderNo holds the string denoting the channel_order_no field in the database.
	FieldChannelOrderNo = "channel_order_no"
	// FieldChannelRefundNo holds the string denoting the channel_refund_no field in the database.
	FieldChannelRefundNo = "channel_refund_no"
	// FieldSuccessTime holds the string denoting the success_time field in the database.
	FieldSuccessTime = "success_time"
	// FieldChannelErrorCode holds the string denoting the channel_error_code field in the database.
	FieldChannelErrorCode = "channel_error_code"
	// FieldChannelErrorMsg holds the string denoting the channel_error_msg field in the database.
	FieldChannelErrorMsg = "channel_error_msg"
	// FieldChannelNotifyData holds the string denoting the channel_notify_data field in the database.
	FieldChannelNotifyData = "channel_notify_data"
	// Table holds the table name of the refund in the database.
	Table = "pay_refund"
)

// Columns holds all SQL columns for refund fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldStatus,
	FieldDeletedAt,
	FieldNo,
	FieldChannelCode,
	FieldOrderID,
	FieldOrderNo,
	FieldMerchantOrderID,
	FieldMerchantRefundID,
	FieldPayPrice,
	FieldRefundPrice,
	FieldReason,
	FieldUserIP,
	FieldChannelOrderNo,
	FieldChannelRefundNo,
	FieldSuccessTime,
	FieldChannelErrorCode,
	FieldChannelErrorMsg,
	FieldChannelNotifyData,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "github.com/agui-coder/simple-admin-pay-rpc/ent/runtime"
var (
	Hooks        [1]ent.Hook
	Interceptors [1]ent.Interceptor
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultStatus holds the default value on creation for the "status" field.
	DefaultStatus uint8
)

// OrderOption defines the ordering options for the Refund queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByNo orders the results by the no field.
func ByNo(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNo, opts...).ToFunc()
}

// ByChannelCode orders the results by the channel_code field.
func ByChannelCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldChannelCode, opts...).ToFunc()
}

// ByOrderID orders the results by the order_id field.
func ByOrderID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOrderID, opts...).ToFunc()
}

// ByOrderNo orders the results by the order_no field.
func ByOrderNo(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOrderNo, opts...).ToFunc()
}

// ByMerchantOrderID orders the results by the merchant_order_id field.
func ByMerchantOrderID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMerchantOrderID, opts...).ToFunc()
}

// ByMerchantRefundID orders the results by the merchant_refund_id field.
func ByMerchantRefundID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMerchantRefundID, opts...).ToFunc()
}

// ByPayPrice orders the results by the pay_price field.
func ByPayPrice(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPayPrice, opts...).ToFunc()
}

// ByRefundPrice orders the results by the refund_price field.
func ByRefundPrice(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRefundPrice, opts...).ToFunc()
}

// ByReason orders the results by the reason field.
func ByReason(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldReason, opts...).ToFunc()
}

// ByUserIP orders the results by the user_ip field.
func ByUserIP(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserIP, opts...).ToFunc()
}

// ByChannelOrderNo orders the results by the channel_order_no field.
func ByChannelOrderNo(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldChannelOrderNo, opts...).ToFunc()
}

// ByChannelRefundNo orders the results by the channel_refund_no field.
func ByChannelRefundNo(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldChannelRefundNo, opts...).ToFunc()
}

// BySuccessTime orders the results by the success_time field.
func BySuccessTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSuccessTime, opts...).ToFunc()
}

// ByChannelErrorCode orders the results by the channel_error_code field.
func ByChannelErrorCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldChannelErrorCode, opts...).ToFunc()
}

// ByChannelErrorMsg orders the results by the channel_error_msg field.
func ByChannelErrorMsg(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldChannelErrorMsg, opts...).ToFunc()
}

// ByChannelNotifyData orders the results by the channel_notify_data field.
func ByChannelNotifyData(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldChannelNotifyData, opts...).ToFunc()
}

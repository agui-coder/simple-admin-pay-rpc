// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/agui-coder/simple-admin-pay-rpc/ent/demoorder"
	"github.com/agui-coder/simple-admin-pay-rpc/ent/predicate"
)

// DemoOrderUpdate is the builder for updating DemoOrder entities.
type DemoOrderUpdate struct {
	config
	hooks    []Hook
	mutation *DemoOrderMutation
}

// Where appends a list predicates to the DemoOrderUpdate builder.
func (dou *DemoOrderUpdate) Where(ps ...predicate.DemoOrder) *DemoOrderUpdate {
	dou.mutation.Where(ps...)
	return dou
}

// SetUpdatedAt sets the "updated_at" field.
func (dou *DemoOrderUpdate) SetUpdatedAt(t time.Time) *DemoOrderUpdate {
	dou.mutation.SetUpdatedAt(t)
	return dou
}

// SetDeletedAt sets the "deleted_at" field.
func (dou *DemoOrderUpdate) SetDeletedAt(t time.Time) *DemoOrderUpdate {
	dou.mutation.SetDeletedAt(t)
	return dou
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (dou *DemoOrderUpdate) SetNillableDeletedAt(t *time.Time) *DemoOrderUpdate {
	if t != nil {
		dou.SetDeletedAt(*t)
	}
	return dou
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (dou *DemoOrderUpdate) ClearDeletedAt() *DemoOrderUpdate {
	dou.mutation.ClearDeletedAt()
	return dou
}

// SetUserID sets the "user_id" field.
func (dou *DemoOrderUpdate) SetUserID(s string) *DemoOrderUpdate {
	dou.mutation.SetUserID(s)
	return dou
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (dou *DemoOrderUpdate) SetNillableUserID(s *string) *DemoOrderUpdate {
	if s != nil {
		dou.SetUserID(*s)
	}
	return dou
}

// SetSpuID sets the "spu_id" field.
func (dou *DemoOrderUpdate) SetSpuID(u uint64) *DemoOrderUpdate {
	dou.mutation.ResetSpuID()
	dou.mutation.SetSpuID(u)
	return dou
}

// SetNillableSpuID sets the "spu_id" field if the given value is not nil.
func (dou *DemoOrderUpdate) SetNillableSpuID(u *uint64) *DemoOrderUpdate {
	if u != nil {
		dou.SetSpuID(*u)
	}
	return dou
}

// AddSpuID adds u to the "spu_id" field.
func (dou *DemoOrderUpdate) AddSpuID(u int64) *DemoOrderUpdate {
	dou.mutation.AddSpuID(u)
	return dou
}

// SetSpuName sets the "spu_name" field.
func (dou *DemoOrderUpdate) SetSpuName(s string) *DemoOrderUpdate {
	dou.mutation.SetSpuName(s)
	return dou
}

// SetNillableSpuName sets the "spu_name" field if the given value is not nil.
func (dou *DemoOrderUpdate) SetNillableSpuName(s *string) *DemoOrderUpdate {
	if s != nil {
		dou.SetSpuName(*s)
	}
	return dou
}

// SetPrice sets the "price" field.
func (dou *DemoOrderUpdate) SetPrice(i int32) *DemoOrderUpdate {
	dou.mutation.ResetPrice()
	dou.mutation.SetPrice(i)
	return dou
}

// SetNillablePrice sets the "price" field if the given value is not nil.
func (dou *DemoOrderUpdate) SetNillablePrice(i *int32) *DemoOrderUpdate {
	if i != nil {
		dou.SetPrice(*i)
	}
	return dou
}

// AddPrice adds i to the "price" field.
func (dou *DemoOrderUpdate) AddPrice(i int32) *DemoOrderUpdate {
	dou.mutation.AddPrice(i)
	return dou
}

// SetPayStatus sets the "pay_status" field.
func (dou *DemoOrderUpdate) SetPayStatus(b bool) *DemoOrderUpdate {
	dou.mutation.SetPayStatus(b)
	return dou
}

// SetNillablePayStatus sets the "pay_status" field if the given value is not nil.
func (dou *DemoOrderUpdate) SetNillablePayStatus(b *bool) *DemoOrderUpdate {
	if b != nil {
		dou.SetPayStatus(*b)
	}
	return dou
}

// SetPayOrderId sets the "pay_orderId" field.
func (dou *DemoOrderUpdate) SetPayOrderId(u uint64) *DemoOrderUpdate {
	dou.mutation.ResetPayOrderId()
	dou.mutation.SetPayOrderId(u)
	return dou
}

// SetNillablePayOrderId sets the "pay_orderId" field if the given value is not nil.
func (dou *DemoOrderUpdate) SetNillablePayOrderId(u *uint64) *DemoOrderUpdate {
	if u != nil {
		dou.SetPayOrderId(*u)
	}
	return dou
}

// AddPayOrderId adds u to the "pay_orderId" field.
func (dou *DemoOrderUpdate) AddPayOrderId(u int64) *DemoOrderUpdate {
	dou.mutation.AddPayOrderId(u)
	return dou
}

// ClearPayOrderId clears the value of the "pay_orderId" field.
func (dou *DemoOrderUpdate) ClearPayOrderId() *DemoOrderUpdate {
	dou.mutation.ClearPayOrderId()
	return dou
}

// SetPayTime sets the "pay_time" field.
func (dou *DemoOrderUpdate) SetPayTime(t time.Time) *DemoOrderUpdate {
	dou.mutation.SetPayTime(t)
	return dou
}

// SetNillablePayTime sets the "pay_time" field if the given value is not nil.
func (dou *DemoOrderUpdate) SetNillablePayTime(t *time.Time) *DemoOrderUpdate {
	if t != nil {
		dou.SetPayTime(*t)
	}
	return dou
}

// ClearPayTime clears the value of the "pay_time" field.
func (dou *DemoOrderUpdate) ClearPayTime() *DemoOrderUpdate {
	dou.mutation.ClearPayTime()
	return dou
}

// SetPayChannelCode sets the "pay_channel_code" field.
func (dou *DemoOrderUpdate) SetPayChannelCode(s string) *DemoOrderUpdate {
	dou.mutation.SetPayChannelCode(s)
	return dou
}

// SetNillablePayChannelCode sets the "pay_channel_code" field if the given value is not nil.
func (dou *DemoOrderUpdate) SetNillablePayChannelCode(s *string) *DemoOrderUpdate {
	if s != nil {
		dou.SetPayChannelCode(*s)
	}
	return dou
}

// ClearPayChannelCode clears the value of the "pay_channel_code" field.
func (dou *DemoOrderUpdate) ClearPayChannelCode() *DemoOrderUpdate {
	dou.mutation.ClearPayChannelCode()
	return dou
}

// SetPayRefundID sets the "pay_refund_id" field.
func (dou *DemoOrderUpdate) SetPayRefundID(u uint64) *DemoOrderUpdate {
	dou.mutation.ResetPayRefundID()
	dou.mutation.SetPayRefundID(u)
	return dou
}

// SetNillablePayRefundID sets the "pay_refund_id" field if the given value is not nil.
func (dou *DemoOrderUpdate) SetNillablePayRefundID(u *uint64) *DemoOrderUpdate {
	if u != nil {
		dou.SetPayRefundID(*u)
	}
	return dou
}

// AddPayRefundID adds u to the "pay_refund_id" field.
func (dou *DemoOrderUpdate) AddPayRefundID(u int64) *DemoOrderUpdate {
	dou.mutation.AddPayRefundID(u)
	return dou
}

// ClearPayRefundID clears the value of the "pay_refund_id" field.
func (dou *DemoOrderUpdate) ClearPayRefundID() *DemoOrderUpdate {
	dou.mutation.ClearPayRefundID()
	return dou
}

// SetRefundPrice sets the "refund_price" field.
func (dou *DemoOrderUpdate) SetRefundPrice(i int32) *DemoOrderUpdate {
	dou.mutation.ResetRefundPrice()
	dou.mutation.SetRefundPrice(i)
	return dou
}

// SetNillableRefundPrice sets the "refund_price" field if the given value is not nil.
func (dou *DemoOrderUpdate) SetNillableRefundPrice(i *int32) *DemoOrderUpdate {
	if i != nil {
		dou.SetRefundPrice(*i)
	}
	return dou
}

// AddRefundPrice adds i to the "refund_price" field.
func (dou *DemoOrderUpdate) AddRefundPrice(i int32) *DemoOrderUpdate {
	dou.mutation.AddRefundPrice(i)
	return dou
}

// ClearRefundPrice clears the value of the "refund_price" field.
func (dou *DemoOrderUpdate) ClearRefundPrice() *DemoOrderUpdate {
	dou.mutation.ClearRefundPrice()
	return dou
}

// SetRefundTime sets the "refund_time" field.
func (dou *DemoOrderUpdate) SetRefundTime(t time.Time) *DemoOrderUpdate {
	dou.mutation.SetRefundTime(t)
	return dou
}

// SetNillableRefundTime sets the "refund_time" field if the given value is not nil.
func (dou *DemoOrderUpdate) SetNillableRefundTime(t *time.Time) *DemoOrderUpdate {
	if t != nil {
		dou.SetRefundTime(*t)
	}
	return dou
}

// ClearRefundTime clears the value of the "refund_time" field.
func (dou *DemoOrderUpdate) ClearRefundTime() *DemoOrderUpdate {
	dou.mutation.ClearRefundTime()
	return dou
}

// Mutation returns the DemoOrderMutation object of the builder.
func (dou *DemoOrderUpdate) Mutation() *DemoOrderMutation {
	return dou.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (dou *DemoOrderUpdate) Save(ctx context.Context) (int, error) {
	if err := dou.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, dou.sqlSave, dou.mutation, dou.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (dou *DemoOrderUpdate) SaveX(ctx context.Context) int {
	affected, err := dou.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (dou *DemoOrderUpdate) Exec(ctx context.Context) error {
	_, err := dou.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dou *DemoOrderUpdate) ExecX(ctx context.Context) {
	if err := dou.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (dou *DemoOrderUpdate) defaults() error {
	if _, ok := dou.mutation.UpdatedAt(); !ok {
		if demoorder.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized demoorder.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := demoorder.UpdateDefaultUpdatedAt()
		dou.mutation.SetUpdatedAt(v)
	}
	return nil
}

func (dou *DemoOrderUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(demoorder.Table, demoorder.Columns, sqlgraph.NewFieldSpec(demoorder.FieldID, field.TypeUint64))
	if ps := dou.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := dou.mutation.UpdatedAt(); ok {
		_spec.SetField(demoorder.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := dou.mutation.DeletedAt(); ok {
		_spec.SetField(demoorder.FieldDeletedAt, field.TypeTime, value)
	}
	if dou.mutation.DeletedAtCleared() {
		_spec.ClearField(demoorder.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := dou.mutation.UserID(); ok {
		_spec.SetField(demoorder.FieldUserID, field.TypeString, value)
	}
	if value, ok := dou.mutation.SpuID(); ok {
		_spec.SetField(demoorder.FieldSpuID, field.TypeUint64, value)
	}
	if value, ok := dou.mutation.AddedSpuID(); ok {
		_spec.AddField(demoorder.FieldSpuID, field.TypeUint64, value)
	}
	if value, ok := dou.mutation.SpuName(); ok {
		_spec.SetField(demoorder.FieldSpuName, field.TypeString, value)
	}
	if value, ok := dou.mutation.Price(); ok {
		_spec.SetField(demoorder.FieldPrice, field.TypeInt32, value)
	}
	if value, ok := dou.mutation.AddedPrice(); ok {
		_spec.AddField(demoorder.FieldPrice, field.TypeInt32, value)
	}
	if value, ok := dou.mutation.PayStatus(); ok {
		_spec.SetField(demoorder.FieldPayStatus, field.TypeBool, value)
	}
	if value, ok := dou.mutation.PayOrderId(); ok {
		_spec.SetField(demoorder.FieldPayOrderId, field.TypeUint64, value)
	}
	if value, ok := dou.mutation.AddedPayOrderId(); ok {
		_spec.AddField(demoorder.FieldPayOrderId, field.TypeUint64, value)
	}
	if dou.mutation.PayOrderIdCleared() {
		_spec.ClearField(demoorder.FieldPayOrderId, field.TypeUint64)
	}
	if value, ok := dou.mutation.PayTime(); ok {
		_spec.SetField(demoorder.FieldPayTime, field.TypeTime, value)
	}
	if dou.mutation.PayTimeCleared() {
		_spec.ClearField(demoorder.FieldPayTime, field.TypeTime)
	}
	if value, ok := dou.mutation.PayChannelCode(); ok {
		_spec.SetField(demoorder.FieldPayChannelCode, field.TypeString, value)
	}
	if dou.mutation.PayChannelCodeCleared() {
		_spec.ClearField(demoorder.FieldPayChannelCode, field.TypeString)
	}
	if value, ok := dou.mutation.PayRefundID(); ok {
		_spec.SetField(demoorder.FieldPayRefundID, field.TypeUint64, value)
	}
	if value, ok := dou.mutation.AddedPayRefundID(); ok {
		_spec.AddField(demoorder.FieldPayRefundID, field.TypeUint64, value)
	}
	if dou.mutation.PayRefundIDCleared() {
		_spec.ClearField(demoorder.FieldPayRefundID, field.TypeUint64)
	}
	if value, ok := dou.mutation.RefundPrice(); ok {
		_spec.SetField(demoorder.FieldRefundPrice, field.TypeInt32, value)
	}
	if value, ok := dou.mutation.AddedRefundPrice(); ok {
		_spec.AddField(demoorder.FieldRefundPrice, field.TypeInt32, value)
	}
	if dou.mutation.RefundPriceCleared() {
		_spec.ClearField(demoorder.FieldRefundPrice, field.TypeInt32)
	}
	if value, ok := dou.mutation.RefundTime(); ok {
		_spec.SetField(demoorder.FieldRefundTime, field.TypeTime, value)
	}
	if dou.mutation.RefundTimeCleared() {
		_spec.ClearField(demoorder.FieldRefundTime, field.TypeTime)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, dou.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{demoorder.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	dou.mutation.done = true
	return n, nil
}

// DemoOrderUpdateOne is the builder for updating a single DemoOrder entity.
type DemoOrderUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *DemoOrderMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (douo *DemoOrderUpdateOne) SetUpdatedAt(t time.Time) *DemoOrderUpdateOne {
	douo.mutation.SetUpdatedAt(t)
	return douo
}

// SetDeletedAt sets the "deleted_at" field.
func (douo *DemoOrderUpdateOne) SetDeletedAt(t time.Time) *DemoOrderUpdateOne {
	douo.mutation.SetDeletedAt(t)
	return douo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (douo *DemoOrderUpdateOne) SetNillableDeletedAt(t *time.Time) *DemoOrderUpdateOne {
	if t != nil {
		douo.SetDeletedAt(*t)
	}
	return douo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (douo *DemoOrderUpdateOne) ClearDeletedAt() *DemoOrderUpdateOne {
	douo.mutation.ClearDeletedAt()
	return douo
}

// SetUserID sets the "user_id" field.
func (douo *DemoOrderUpdateOne) SetUserID(s string) *DemoOrderUpdateOne {
	douo.mutation.SetUserID(s)
	return douo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (douo *DemoOrderUpdateOne) SetNillableUserID(s *string) *DemoOrderUpdateOne {
	if s != nil {
		douo.SetUserID(*s)
	}
	return douo
}

// SetSpuID sets the "spu_id" field.
func (douo *DemoOrderUpdateOne) SetSpuID(u uint64) *DemoOrderUpdateOne {
	douo.mutation.ResetSpuID()
	douo.mutation.SetSpuID(u)
	return douo
}

// SetNillableSpuID sets the "spu_id" field if the given value is not nil.
func (douo *DemoOrderUpdateOne) SetNillableSpuID(u *uint64) *DemoOrderUpdateOne {
	if u != nil {
		douo.SetSpuID(*u)
	}
	return douo
}

// AddSpuID adds u to the "spu_id" field.
func (douo *DemoOrderUpdateOne) AddSpuID(u int64) *DemoOrderUpdateOne {
	douo.mutation.AddSpuID(u)
	return douo
}

// SetSpuName sets the "spu_name" field.
func (douo *DemoOrderUpdateOne) SetSpuName(s string) *DemoOrderUpdateOne {
	douo.mutation.SetSpuName(s)
	return douo
}

// SetNillableSpuName sets the "spu_name" field if the given value is not nil.
func (douo *DemoOrderUpdateOne) SetNillableSpuName(s *string) *DemoOrderUpdateOne {
	if s != nil {
		douo.SetSpuName(*s)
	}
	return douo
}

// SetPrice sets the "price" field.
func (douo *DemoOrderUpdateOne) SetPrice(i int32) *DemoOrderUpdateOne {
	douo.mutation.ResetPrice()
	douo.mutation.SetPrice(i)
	return douo
}

// SetNillablePrice sets the "price" field if the given value is not nil.
func (douo *DemoOrderUpdateOne) SetNillablePrice(i *int32) *DemoOrderUpdateOne {
	if i != nil {
		douo.SetPrice(*i)
	}
	return douo
}

// AddPrice adds i to the "price" field.
func (douo *DemoOrderUpdateOne) AddPrice(i int32) *DemoOrderUpdateOne {
	douo.mutation.AddPrice(i)
	return douo
}

// SetPayStatus sets the "pay_status" field.
func (douo *DemoOrderUpdateOne) SetPayStatus(b bool) *DemoOrderUpdateOne {
	douo.mutation.SetPayStatus(b)
	return douo
}

// SetNillablePayStatus sets the "pay_status" field if the given value is not nil.
func (douo *DemoOrderUpdateOne) SetNillablePayStatus(b *bool) *DemoOrderUpdateOne {
	if b != nil {
		douo.SetPayStatus(*b)
	}
	return douo
}

// SetPayOrderId sets the "pay_orderId" field.
func (douo *DemoOrderUpdateOne) SetPayOrderId(u uint64) *DemoOrderUpdateOne {
	douo.mutation.ResetPayOrderId()
	douo.mutation.SetPayOrderId(u)
	return douo
}

// SetNillablePayOrderId sets the "pay_orderId" field if the given value is not nil.
func (douo *DemoOrderUpdateOne) SetNillablePayOrderId(u *uint64) *DemoOrderUpdateOne {
	if u != nil {
		douo.SetPayOrderId(*u)
	}
	return douo
}

// AddPayOrderId adds u to the "pay_orderId" field.
func (douo *DemoOrderUpdateOne) AddPayOrderId(u int64) *DemoOrderUpdateOne {
	douo.mutation.AddPayOrderId(u)
	return douo
}

// ClearPayOrderId clears the value of the "pay_orderId" field.
func (douo *DemoOrderUpdateOne) ClearPayOrderId() *DemoOrderUpdateOne {
	douo.mutation.ClearPayOrderId()
	return douo
}

// SetPayTime sets the "pay_time" field.
func (douo *DemoOrderUpdateOne) SetPayTime(t time.Time) *DemoOrderUpdateOne {
	douo.mutation.SetPayTime(t)
	return douo
}

// SetNillablePayTime sets the "pay_time" field if the given value is not nil.
func (douo *DemoOrderUpdateOne) SetNillablePayTime(t *time.Time) *DemoOrderUpdateOne {
	if t != nil {
		douo.SetPayTime(*t)
	}
	return douo
}

// ClearPayTime clears the value of the "pay_time" field.
func (douo *DemoOrderUpdateOne) ClearPayTime() *DemoOrderUpdateOne {
	douo.mutation.ClearPayTime()
	return douo
}

// SetPayChannelCode sets the "pay_channel_code" field.
func (douo *DemoOrderUpdateOne) SetPayChannelCode(s string) *DemoOrderUpdateOne {
	douo.mutation.SetPayChannelCode(s)
	return douo
}

// SetNillablePayChannelCode sets the "pay_channel_code" field if the given value is not nil.
func (douo *DemoOrderUpdateOne) SetNillablePayChannelCode(s *string) *DemoOrderUpdateOne {
	if s != nil {
		douo.SetPayChannelCode(*s)
	}
	return douo
}

// ClearPayChannelCode clears the value of the "pay_channel_code" field.
func (douo *DemoOrderUpdateOne) ClearPayChannelCode() *DemoOrderUpdateOne {
	douo.mutation.ClearPayChannelCode()
	return douo
}

// SetPayRefundID sets the "pay_refund_id" field.
func (douo *DemoOrderUpdateOne) SetPayRefundID(u uint64) *DemoOrderUpdateOne {
	douo.mutation.ResetPayRefundID()
	douo.mutation.SetPayRefundID(u)
	return douo
}

// SetNillablePayRefundID sets the "pay_refund_id" field if the given value is not nil.
func (douo *DemoOrderUpdateOne) SetNillablePayRefundID(u *uint64) *DemoOrderUpdateOne {
	if u != nil {
		douo.SetPayRefundID(*u)
	}
	return douo
}

// AddPayRefundID adds u to the "pay_refund_id" field.
func (douo *DemoOrderUpdateOne) AddPayRefundID(u int64) *DemoOrderUpdateOne {
	douo.mutation.AddPayRefundID(u)
	return douo
}

// ClearPayRefundID clears the value of the "pay_refund_id" field.
func (douo *DemoOrderUpdateOne) ClearPayRefundID() *DemoOrderUpdateOne {
	douo.mutation.ClearPayRefundID()
	return douo
}

// SetRefundPrice sets the "refund_price" field.
func (douo *DemoOrderUpdateOne) SetRefundPrice(i int32) *DemoOrderUpdateOne {
	douo.mutation.ResetRefundPrice()
	douo.mutation.SetRefundPrice(i)
	return douo
}

// SetNillableRefundPrice sets the "refund_price" field if the given value is not nil.
func (douo *DemoOrderUpdateOne) SetNillableRefundPrice(i *int32) *DemoOrderUpdateOne {
	if i != nil {
		douo.SetRefundPrice(*i)
	}
	return douo
}

// AddRefundPrice adds i to the "refund_price" field.
func (douo *DemoOrderUpdateOne) AddRefundPrice(i int32) *DemoOrderUpdateOne {
	douo.mutation.AddRefundPrice(i)
	return douo
}

// ClearRefundPrice clears the value of the "refund_price" field.
func (douo *DemoOrderUpdateOne) ClearRefundPrice() *DemoOrderUpdateOne {
	douo.mutation.ClearRefundPrice()
	return douo
}

// SetRefundTime sets the "refund_time" field.
func (douo *DemoOrderUpdateOne) SetRefundTime(t time.Time) *DemoOrderUpdateOne {
	douo.mutation.SetRefundTime(t)
	return douo
}

// SetNillableRefundTime sets the "refund_time" field if the given value is not nil.
func (douo *DemoOrderUpdateOne) SetNillableRefundTime(t *time.Time) *DemoOrderUpdateOne {
	if t != nil {
		douo.SetRefundTime(*t)
	}
	return douo
}

// ClearRefundTime clears the value of the "refund_time" field.
func (douo *DemoOrderUpdateOne) ClearRefundTime() *DemoOrderUpdateOne {
	douo.mutation.ClearRefundTime()
	return douo
}

// Mutation returns the DemoOrderMutation object of the builder.
func (douo *DemoOrderUpdateOne) Mutation() *DemoOrderMutation {
	return douo.mutation
}

// Where appends a list predicates to the DemoOrderUpdate builder.
func (douo *DemoOrderUpdateOne) Where(ps ...predicate.DemoOrder) *DemoOrderUpdateOne {
	douo.mutation.Where(ps...)
	return douo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (douo *DemoOrderUpdateOne) Select(field string, fields ...string) *DemoOrderUpdateOne {
	douo.fields = append([]string{field}, fields...)
	return douo
}

// Save executes the query and returns the updated DemoOrder entity.
func (douo *DemoOrderUpdateOne) Save(ctx context.Context) (*DemoOrder, error) {
	if err := douo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, douo.sqlSave, douo.mutation, douo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (douo *DemoOrderUpdateOne) SaveX(ctx context.Context) *DemoOrder {
	node, err := douo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (douo *DemoOrderUpdateOne) Exec(ctx context.Context) error {
	_, err := douo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (douo *DemoOrderUpdateOne) ExecX(ctx context.Context) {
	if err := douo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (douo *DemoOrderUpdateOne) defaults() error {
	if _, ok := douo.mutation.UpdatedAt(); !ok {
		if demoorder.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized demoorder.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := demoorder.UpdateDefaultUpdatedAt()
		douo.mutation.SetUpdatedAt(v)
	}
	return nil
}

func (douo *DemoOrderUpdateOne) sqlSave(ctx context.Context) (_node *DemoOrder, err error) {
	_spec := sqlgraph.NewUpdateSpec(demoorder.Table, demoorder.Columns, sqlgraph.NewFieldSpec(demoorder.FieldID, field.TypeUint64))
	id, ok := douo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "DemoOrder.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := douo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, demoorder.FieldID)
		for _, f := range fields {
			if !demoorder.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != demoorder.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := douo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := douo.mutation.UpdatedAt(); ok {
		_spec.SetField(demoorder.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := douo.mutation.DeletedAt(); ok {
		_spec.SetField(demoorder.FieldDeletedAt, field.TypeTime, value)
	}
	if douo.mutation.DeletedAtCleared() {
		_spec.ClearField(demoorder.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := douo.mutation.UserID(); ok {
		_spec.SetField(demoorder.FieldUserID, field.TypeString, value)
	}
	if value, ok := douo.mutation.SpuID(); ok {
		_spec.SetField(demoorder.FieldSpuID, field.TypeUint64, value)
	}
	if value, ok := douo.mutation.AddedSpuID(); ok {
		_spec.AddField(demoorder.FieldSpuID, field.TypeUint64, value)
	}
	if value, ok := douo.mutation.SpuName(); ok {
		_spec.SetField(demoorder.FieldSpuName, field.TypeString, value)
	}
	if value, ok := douo.mutation.Price(); ok {
		_spec.SetField(demoorder.FieldPrice, field.TypeInt32, value)
	}
	if value, ok := douo.mutation.AddedPrice(); ok {
		_spec.AddField(demoorder.FieldPrice, field.TypeInt32, value)
	}
	if value, ok := douo.mutation.PayStatus(); ok {
		_spec.SetField(demoorder.FieldPayStatus, field.TypeBool, value)
	}
	if value, ok := douo.mutation.PayOrderId(); ok {
		_spec.SetField(demoorder.FieldPayOrderId, field.TypeUint64, value)
	}
	if value, ok := douo.mutation.AddedPayOrderId(); ok {
		_spec.AddField(demoorder.FieldPayOrderId, field.TypeUint64, value)
	}
	if douo.mutation.PayOrderIdCleared() {
		_spec.ClearField(demoorder.FieldPayOrderId, field.TypeUint64)
	}
	if value, ok := douo.mutation.PayTime(); ok {
		_spec.SetField(demoorder.FieldPayTime, field.TypeTime, value)
	}
	if douo.mutation.PayTimeCleared() {
		_spec.ClearField(demoorder.FieldPayTime, field.TypeTime)
	}
	if value, ok := douo.mutation.PayChannelCode(); ok {
		_spec.SetField(demoorder.FieldPayChannelCode, field.TypeString, value)
	}
	if douo.mutation.PayChannelCodeCleared() {
		_spec.ClearField(demoorder.FieldPayChannelCode, field.TypeString)
	}
	if value, ok := douo.mutation.PayRefundID(); ok {
		_spec.SetField(demoorder.FieldPayRefundID, field.TypeUint64, value)
	}
	if value, ok := douo.mutation.AddedPayRefundID(); ok {
		_spec.AddField(demoorder.FieldPayRefundID, field.TypeUint64, value)
	}
	if douo.mutation.PayRefundIDCleared() {
		_spec.ClearField(demoorder.FieldPayRefundID, field.TypeUint64)
	}
	if value, ok := douo.mutation.RefundPrice(); ok {
		_spec.SetField(demoorder.FieldRefundPrice, field.TypeInt32, value)
	}
	if value, ok := douo.mutation.AddedRefundPrice(); ok {
		_spec.AddField(demoorder.FieldRefundPrice, field.TypeInt32, value)
	}
	if douo.mutation.RefundPriceCleared() {
		_spec.ClearField(demoorder.FieldRefundPrice, field.TypeInt32)
	}
	if value, ok := douo.mutation.RefundTime(); ok {
		_spec.SetField(demoorder.FieldRefundTime, field.TypeTime, value)
	}
	if douo.mutation.RefundTimeCleared() {
		_spec.ClearField(demoorder.FieldRefundTime, field.TypeTime)
	}
	_node = &DemoOrder{config: douo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, douo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{demoorder.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	douo.mutation.done = true
	return _node, nil
}

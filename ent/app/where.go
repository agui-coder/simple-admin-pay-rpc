// Code generated by ent, DO NOT EDIT.

package app

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/agui-coder/simple-admin-pay-rpc/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uint64) predicate.App {
	return predicate.App(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint64) predicate.App {
	return predicate.App(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint64) predicate.App {
	return predicate.App(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint64) predicate.App {
	return predicate.App(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint64) predicate.App {
	return predicate.App(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint64) predicate.App {
	return predicate.App(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint64) predicate.App {
	return predicate.App(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint64) predicate.App {
	return predicate.App(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint64) predicate.App {
	return predicate.App(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.App {
	return predicate.App(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.App {
	return predicate.App(sql.FieldEQ(FieldUpdatedAt, v))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v uint8) predicate.App {
	return predicate.App(sql.FieldEQ(FieldStatus, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.App {
	return predicate.App(sql.FieldEQ(FieldDeletedAt, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.App {
	return predicate.App(sql.FieldEQ(FieldName, v))
}

// Remark applies equality check predicate on the "remark" field. It's identical to RemarkEQ.
func Remark(v string) predicate.App {
	return predicate.App(sql.FieldEQ(FieldRemark, v))
}

// OrderNotifyURL applies equality check predicate on the "order_notify_url" field. It's identical to OrderNotifyURLEQ.
func OrderNotifyURL(v string) predicate.App {
	return predicate.App(sql.FieldEQ(FieldOrderNotifyURL, v))
}

// RefundNotifyURL applies equality check predicate on the "refund_notify_url" field. It's identical to RefundNotifyURLEQ.
func RefundNotifyURL(v string) predicate.App {
	return predicate.App(sql.FieldEQ(FieldRefundNotifyURL, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.App {
	return predicate.App(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.App {
	return predicate.App(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.App {
	return predicate.App(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.App {
	return predicate.App(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.App {
	return predicate.App(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.App {
	return predicate.App(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.App {
	return predicate.App(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.App {
	return predicate.App(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.App {
	return predicate.App(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.App {
	return predicate.App(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.App {
	return predicate.App(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.App {
	return predicate.App(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.App {
	return predicate.App(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.App {
	return predicate.App(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.App {
	return predicate.App(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.App {
	return predicate.App(sql.FieldLTE(FieldUpdatedAt, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v uint8) predicate.App {
	return predicate.App(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v uint8) predicate.App {
	return predicate.App(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...uint8) predicate.App {
	return predicate.App(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...uint8) predicate.App {
	return predicate.App(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v uint8) predicate.App {
	return predicate.App(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v uint8) predicate.App {
	return predicate.App(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v uint8) predicate.App {
	return predicate.App(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v uint8) predicate.App {
	return predicate.App(sql.FieldLTE(FieldStatus, v))
}

// StatusIsNil applies the IsNil predicate on the "status" field.
func StatusIsNil() predicate.App {
	return predicate.App(sql.FieldIsNull(FieldStatus))
}

// StatusNotNil applies the NotNil predicate on the "status" field.
func StatusNotNil() predicate.App {
	return predicate.App(sql.FieldNotNull(FieldStatus))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.App {
	return predicate.App(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.App {
	return predicate.App(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.App {
	return predicate.App(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.App {
	return predicate.App(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.App {
	return predicate.App(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.App {
	return predicate.App(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.App {
	return predicate.App(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.App {
	return predicate.App(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.App {
	return predicate.App(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.App {
	return predicate.App(sql.FieldNotNull(FieldDeletedAt))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.App {
	return predicate.App(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.App {
	return predicate.App(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.App {
	return predicate.App(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.App {
	return predicate.App(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.App {
	return predicate.App(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.App {
	return predicate.App(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.App {
	return predicate.App(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.App {
	return predicate.App(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.App {
	return predicate.App(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.App {
	return predicate.App(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.App {
	return predicate.App(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.App {
	return predicate.App(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.App {
	return predicate.App(sql.FieldContainsFold(FieldName, v))
}

// RemarkEQ applies the EQ predicate on the "remark" field.
func RemarkEQ(v string) predicate.App {
	return predicate.App(sql.FieldEQ(FieldRemark, v))
}

// RemarkNEQ applies the NEQ predicate on the "remark" field.
func RemarkNEQ(v string) predicate.App {
	return predicate.App(sql.FieldNEQ(FieldRemark, v))
}

// RemarkIn applies the In predicate on the "remark" field.
func RemarkIn(vs ...string) predicate.App {
	return predicate.App(sql.FieldIn(FieldRemark, vs...))
}

// RemarkNotIn applies the NotIn predicate on the "remark" field.
func RemarkNotIn(vs ...string) predicate.App {
	return predicate.App(sql.FieldNotIn(FieldRemark, vs...))
}

// RemarkGT applies the GT predicate on the "remark" field.
func RemarkGT(v string) predicate.App {
	return predicate.App(sql.FieldGT(FieldRemark, v))
}

// RemarkGTE applies the GTE predicate on the "remark" field.
func RemarkGTE(v string) predicate.App {
	return predicate.App(sql.FieldGTE(FieldRemark, v))
}

// RemarkLT applies the LT predicate on the "remark" field.
func RemarkLT(v string) predicate.App {
	return predicate.App(sql.FieldLT(FieldRemark, v))
}

// RemarkLTE applies the LTE predicate on the "remark" field.
func RemarkLTE(v string) predicate.App {
	return predicate.App(sql.FieldLTE(FieldRemark, v))
}

// RemarkContains applies the Contains predicate on the "remark" field.
func RemarkContains(v string) predicate.App {
	return predicate.App(sql.FieldContains(FieldRemark, v))
}

// RemarkHasPrefix applies the HasPrefix predicate on the "remark" field.
func RemarkHasPrefix(v string) predicate.App {
	return predicate.App(sql.FieldHasPrefix(FieldRemark, v))
}

// RemarkHasSuffix applies the HasSuffix predicate on the "remark" field.
func RemarkHasSuffix(v string) predicate.App {
	return predicate.App(sql.FieldHasSuffix(FieldRemark, v))
}

// RemarkIsNil applies the IsNil predicate on the "remark" field.
func RemarkIsNil() predicate.App {
	return predicate.App(sql.FieldIsNull(FieldRemark))
}

// RemarkNotNil applies the NotNil predicate on the "remark" field.
func RemarkNotNil() predicate.App {
	return predicate.App(sql.FieldNotNull(FieldRemark))
}

// RemarkEqualFold applies the EqualFold predicate on the "remark" field.
func RemarkEqualFold(v string) predicate.App {
	return predicate.App(sql.FieldEqualFold(FieldRemark, v))
}

// RemarkContainsFold applies the ContainsFold predicate on the "remark" field.
func RemarkContainsFold(v string) predicate.App {
	return predicate.App(sql.FieldContainsFold(FieldRemark, v))
}

// OrderNotifyURLEQ applies the EQ predicate on the "order_notify_url" field.
func OrderNotifyURLEQ(v string) predicate.App {
	return predicate.App(sql.FieldEQ(FieldOrderNotifyURL, v))
}

// OrderNotifyURLNEQ applies the NEQ predicate on the "order_notify_url" field.
func OrderNotifyURLNEQ(v string) predicate.App {
	return predicate.App(sql.FieldNEQ(FieldOrderNotifyURL, v))
}

// OrderNotifyURLIn applies the In predicate on the "order_notify_url" field.
func OrderNotifyURLIn(vs ...string) predicate.App {
	return predicate.App(sql.FieldIn(FieldOrderNotifyURL, vs...))
}

// OrderNotifyURLNotIn applies the NotIn predicate on the "order_notify_url" field.
func OrderNotifyURLNotIn(vs ...string) predicate.App {
	return predicate.App(sql.FieldNotIn(FieldOrderNotifyURL, vs...))
}

// OrderNotifyURLGT applies the GT predicate on the "order_notify_url" field.
func OrderNotifyURLGT(v string) predicate.App {
	return predicate.App(sql.FieldGT(FieldOrderNotifyURL, v))
}

// OrderNotifyURLGTE applies the GTE predicate on the "order_notify_url" field.
func OrderNotifyURLGTE(v string) predicate.App {
	return predicate.App(sql.FieldGTE(FieldOrderNotifyURL, v))
}

// OrderNotifyURLLT applies the LT predicate on the "order_notify_url" field.
func OrderNotifyURLLT(v string) predicate.App {
	return predicate.App(sql.FieldLT(FieldOrderNotifyURL, v))
}

// OrderNotifyURLLTE applies the LTE predicate on the "order_notify_url" field.
func OrderNotifyURLLTE(v string) predicate.App {
	return predicate.App(sql.FieldLTE(FieldOrderNotifyURL, v))
}

// OrderNotifyURLContains applies the Contains predicate on the "order_notify_url" field.
func OrderNotifyURLContains(v string) predicate.App {
	return predicate.App(sql.FieldContains(FieldOrderNotifyURL, v))
}

// OrderNotifyURLHasPrefix applies the HasPrefix predicate on the "order_notify_url" field.
func OrderNotifyURLHasPrefix(v string) predicate.App {
	return predicate.App(sql.FieldHasPrefix(FieldOrderNotifyURL, v))
}

// OrderNotifyURLHasSuffix applies the HasSuffix predicate on the "order_notify_url" field.
func OrderNotifyURLHasSuffix(v string) predicate.App {
	return predicate.App(sql.FieldHasSuffix(FieldOrderNotifyURL, v))
}

// OrderNotifyURLEqualFold applies the EqualFold predicate on the "order_notify_url" field.
func OrderNotifyURLEqualFold(v string) predicate.App {
	return predicate.App(sql.FieldEqualFold(FieldOrderNotifyURL, v))
}

// OrderNotifyURLContainsFold applies the ContainsFold predicate on the "order_notify_url" field.
func OrderNotifyURLContainsFold(v string) predicate.App {
	return predicate.App(sql.FieldContainsFold(FieldOrderNotifyURL, v))
}

// RefundNotifyURLEQ applies the EQ predicate on the "refund_notify_url" field.
func RefundNotifyURLEQ(v string) predicate.App {
	return predicate.App(sql.FieldEQ(FieldRefundNotifyURL, v))
}

// RefundNotifyURLNEQ applies the NEQ predicate on the "refund_notify_url" field.
func RefundNotifyURLNEQ(v string) predicate.App {
	return predicate.App(sql.FieldNEQ(FieldRefundNotifyURL, v))
}

// RefundNotifyURLIn applies the In predicate on the "refund_notify_url" field.
func RefundNotifyURLIn(vs ...string) predicate.App {
	return predicate.App(sql.FieldIn(FieldRefundNotifyURL, vs...))
}

// RefundNotifyURLNotIn applies the NotIn predicate on the "refund_notify_url" field.
func RefundNotifyURLNotIn(vs ...string) predicate.App {
	return predicate.App(sql.FieldNotIn(FieldRefundNotifyURL, vs...))
}

// RefundNotifyURLGT applies the GT predicate on the "refund_notify_url" field.
func RefundNotifyURLGT(v string) predicate.App {
	return predicate.App(sql.FieldGT(FieldRefundNotifyURL, v))
}

// RefundNotifyURLGTE applies the GTE predicate on the "refund_notify_url" field.
func RefundNotifyURLGTE(v string) predicate.App {
	return predicate.App(sql.FieldGTE(FieldRefundNotifyURL, v))
}

// RefundNotifyURLLT applies the LT predicate on the "refund_notify_url" field.
func RefundNotifyURLLT(v string) predicate.App {
	return predicate.App(sql.FieldLT(FieldRefundNotifyURL, v))
}

// RefundNotifyURLLTE applies the LTE predicate on the "refund_notify_url" field.
func RefundNotifyURLLTE(v string) predicate.App {
	return predicate.App(sql.FieldLTE(FieldRefundNotifyURL, v))
}

// RefundNotifyURLContains applies the Contains predicate on the "refund_notify_url" field.
func RefundNotifyURLContains(v string) predicate.App {
	return predicate.App(sql.FieldContains(FieldRefundNotifyURL, v))
}

// RefundNotifyURLHasPrefix applies the HasPrefix predicate on the "refund_notify_url" field.
func RefundNotifyURLHasPrefix(v string) predicate.App {
	return predicate.App(sql.FieldHasPrefix(FieldRefundNotifyURL, v))
}

// RefundNotifyURLHasSuffix applies the HasSuffix predicate on the "refund_notify_url" field.
func RefundNotifyURLHasSuffix(v string) predicate.App {
	return predicate.App(sql.FieldHasSuffix(FieldRefundNotifyURL, v))
}

// RefundNotifyURLEqualFold applies the EqualFold predicate on the "refund_notify_url" field.
func RefundNotifyURLEqualFold(v string) predicate.App {
	return predicate.App(sql.FieldEqualFold(FieldRefundNotifyURL, v))
}

// RefundNotifyURLContainsFold applies the ContainsFold predicate on the "refund_notify_url" field.
func RefundNotifyURLContainsFold(v string) predicate.App {
	return predicate.App(sql.FieldContainsFold(FieldRefundNotifyURL, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.App) predicate.App {
	return predicate.App(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.App) predicate.App {
	return predicate.App(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.App) predicate.App {
	return predicate.App(sql.NotPredicates(p))
}

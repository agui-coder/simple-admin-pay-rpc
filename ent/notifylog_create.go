// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"github.com/agui-coder/simple-admin-pay-rpc/ent/notifylog"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// NotifyLogCreate is the builder for creating a NotifyLog entity.
type NotifyLogCreate struct {
	config
	mutation *NotifyLogMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (nlc *NotifyLogCreate) SetCreatedAt(t time.Time) *NotifyLogCreate {
	nlc.mutation.SetCreatedAt(t)
	return nlc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (nlc *NotifyLogCreate) SetNillableCreatedAt(t *time.Time) *NotifyLogCreate {
	if t != nil {
		nlc.SetCreatedAt(*t)
	}
	return nlc
}

// SetUpdatedAt sets the "updated_at" field.
func (nlc *NotifyLogCreate) SetUpdatedAt(t time.Time) *NotifyLogCreate {
	nlc.mutation.SetUpdatedAt(t)
	return nlc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (nlc *NotifyLogCreate) SetNillableUpdatedAt(t *time.Time) *NotifyLogCreate {
	if t != nil {
		nlc.SetUpdatedAt(*t)
	}
	return nlc
}

// SetStatus sets the "status" field.
func (nlc *NotifyLogCreate) SetStatus(u uint8) *NotifyLogCreate {
	nlc.mutation.SetStatus(u)
	return nlc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (nlc *NotifyLogCreate) SetNillableStatus(u *uint8) *NotifyLogCreate {
	if u != nil {
		nlc.SetStatus(*u)
	}
	return nlc
}

// SetDeletedAt sets the "deleted_at" field.
func (nlc *NotifyLogCreate) SetDeletedAt(t time.Time) *NotifyLogCreate {
	nlc.mutation.SetDeletedAt(t)
	return nlc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (nlc *NotifyLogCreate) SetNillableDeletedAt(t *time.Time) *NotifyLogCreate {
	if t != nil {
		nlc.SetDeletedAt(*t)
	}
	return nlc
}

// SetTaskID sets the "task_id" field.
func (nlc *NotifyLogCreate) SetTaskID(u uint64) *NotifyLogCreate {
	nlc.mutation.SetTaskID(u)
	return nlc
}

// SetNotifyTimes sets the "notify_times" field.
func (nlc *NotifyLogCreate) SetNotifyTimes(i int8) *NotifyLogCreate {
	nlc.mutation.SetNotifyTimes(i)
	return nlc
}

// SetResponse sets the "response" field.
func (nlc *NotifyLogCreate) SetResponse(s string) *NotifyLogCreate {
	nlc.mutation.SetResponse(s)
	return nlc
}

// SetID sets the "id" field.
func (nlc *NotifyLogCreate) SetID(u uint64) *NotifyLogCreate {
	nlc.mutation.SetID(u)
	return nlc
}

// Mutation returns the NotifyLogMutation object of the builder.
func (nlc *NotifyLogCreate) Mutation() *NotifyLogMutation {
	return nlc.mutation
}

// Save creates the NotifyLog in the database.
func (nlc *NotifyLogCreate) Save(ctx context.Context) (*NotifyLog, error) {
	if err := nlc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, nlc.sqlSave, nlc.mutation, nlc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (nlc *NotifyLogCreate) SaveX(ctx context.Context) *NotifyLog {
	v, err := nlc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (nlc *NotifyLogCreate) Exec(ctx context.Context) error {
	_, err := nlc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nlc *NotifyLogCreate) ExecX(ctx context.Context) {
	if err := nlc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (nlc *NotifyLogCreate) defaults() error {
	if _, ok := nlc.mutation.CreatedAt(); !ok {
		if notifylog.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized notifylog.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := notifylog.DefaultCreatedAt()
		nlc.mutation.SetCreatedAt(v)
	}
	if _, ok := nlc.mutation.UpdatedAt(); !ok {
		if notifylog.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized notifylog.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := notifylog.DefaultUpdatedAt()
		nlc.mutation.SetUpdatedAt(v)
	}
	if _, ok := nlc.mutation.Status(); !ok {
		v := notifylog.DefaultStatus
		nlc.mutation.SetStatus(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (nlc *NotifyLogCreate) check() error {
	if _, ok := nlc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "NotifyLog.created_at"`)}
	}
	if _, ok := nlc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "NotifyLog.updated_at"`)}
	}
	if _, ok := nlc.mutation.TaskID(); !ok {
		return &ValidationError{Name: "task_id", err: errors.New(`ent: missing required field "NotifyLog.task_id"`)}
	}
	if _, ok := nlc.mutation.NotifyTimes(); !ok {
		return &ValidationError{Name: "notify_times", err: errors.New(`ent: missing required field "NotifyLog.notify_times"`)}
	}
	if _, ok := nlc.mutation.Response(); !ok {
		return &ValidationError{Name: "response", err: errors.New(`ent: missing required field "NotifyLog.response"`)}
	}
	return nil
}

func (nlc *NotifyLogCreate) sqlSave(ctx context.Context) (*NotifyLog, error) {
	if err := nlc.check(); err != nil {
		return nil, err
	}
	_node, _spec := nlc.createSpec()
	if err := sqlgraph.CreateNode(ctx, nlc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint64(id)
	}
	nlc.mutation.id = &_node.ID
	nlc.mutation.done = true
	return _node, nil
}

func (nlc *NotifyLogCreate) createSpec() (*NotifyLog, *sqlgraph.CreateSpec) {
	var (
		_node = &NotifyLog{config: nlc.config}
		_spec = sqlgraph.NewCreateSpec(notifylog.Table, sqlgraph.NewFieldSpec(notifylog.FieldID, field.TypeUint64))
	)
	if id, ok := nlc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := nlc.mutation.CreatedAt(); ok {
		_spec.SetField(notifylog.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := nlc.mutation.UpdatedAt(); ok {
		_spec.SetField(notifylog.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := nlc.mutation.Status(); ok {
		_spec.SetField(notifylog.FieldStatus, field.TypeUint8, value)
		_node.Status = value
	}
	if value, ok := nlc.mutation.DeletedAt(); ok {
		_spec.SetField(notifylog.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := nlc.mutation.TaskID(); ok {
		_spec.SetField(notifylog.FieldTaskID, field.TypeUint64, value)
		_node.TaskID = value
	}
	if value, ok := nlc.mutation.NotifyTimes(); ok {
		_spec.SetField(notifylog.FieldNotifyTimes, field.TypeInt8, value)
		_node.NotifyTimes = value
	}
	if value, ok := nlc.mutation.Response(); ok {
		_spec.SetField(notifylog.FieldResponse, field.TypeString, value)
		_node.Response = value
	}
	return _node, _spec
}

// NotifyLogCreateBulk is the builder for creating many NotifyLog entities in bulk.
type NotifyLogCreateBulk struct {
	config
	err      error
	builders []*NotifyLogCreate
}

// Save creates the NotifyLog entities in the database.
func (nlcb *NotifyLogCreateBulk) Save(ctx context.Context) ([]*NotifyLog, error) {
	if nlcb.err != nil {
		return nil, nlcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(nlcb.builders))
	nodes := make([]*NotifyLog, len(nlcb.builders))
	mutators := make([]Mutator, len(nlcb.builders))
	for i := range nlcb.builders {
		func(i int, root context.Context) {
			builder := nlcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*NotifyLogMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, nlcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, nlcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, nlcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (nlcb *NotifyLogCreateBulk) SaveX(ctx context.Context) []*NotifyLog {
	v, err := nlcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (nlcb *NotifyLogCreateBulk) Exec(ctx context.Context) error {
	_, err := nlcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nlcb *NotifyLogCreateBulk) ExecX(ctx context.Context) {
	if err := nlcb.Exec(ctx); err != nil {
		panic(err)
	}
}

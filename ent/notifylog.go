// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"github.com/agui-coder/simple-admin-pay-rpc/ent/notifylog"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// NotifyLog is the model entity for the NotifyLog schema.
type NotifyLog struct {
	config `json:"-"`
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// Create Time | 创建日期
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Update Time | 修改日期
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Status 1: normal 2: ban | 状态 1 正常 2 禁用
	Status uint8 `json:"status,omitempty"`
	// Delete Time | 删除日期
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// 通知任务编号
	TaskID uint64 `json:"task_id,omitempty"`
	// 第几次被通知
	NotifyTimes int8 `json:"notify_times,omitempty"`
	// 请求参数
	Response     string `json:"response,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*NotifyLog) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case notifylog.FieldID, notifylog.FieldStatus, notifylog.FieldTaskID, notifylog.FieldNotifyTimes:
			values[i] = new(sql.NullInt64)
		case notifylog.FieldResponse:
			values[i] = new(sql.NullString)
		case notifylog.FieldCreatedAt, notifylog.FieldUpdatedAt, notifylog.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the NotifyLog fields.
func (nl *NotifyLog) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case notifylog.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			nl.ID = uint64(value.Int64)
		case notifylog.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				nl.CreatedAt = value.Time
			}
		case notifylog.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				nl.UpdatedAt = value.Time
			}
		case notifylog.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				nl.Status = uint8(value.Int64)
			}
		case notifylog.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				nl.DeletedAt = value.Time
			}
		case notifylog.FieldTaskID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field task_id", values[i])
			} else if value.Valid {
				nl.TaskID = uint64(value.Int64)
			}
		case notifylog.FieldNotifyTimes:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field notify_times", values[i])
			} else if value.Valid {
				nl.NotifyTimes = int8(value.Int64)
			}
		case notifylog.FieldResponse:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field response", values[i])
			} else if value.Valid {
				nl.Response = value.String
			}
		default:
			nl.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the NotifyLog.
// This includes values selected through modifiers, order, etc.
func (nl *NotifyLog) Value(name string) (ent.Value, error) {
	return nl.selectValues.Get(name)
}

// Update returns a builder for updating this NotifyLog.
// Note that you need to call NotifyLog.Unwrap() before calling this method if this NotifyLog
// was returned from a transaction, and the transaction was committed or rolled back.
func (nl *NotifyLog) Update() *NotifyLogUpdateOne {
	return NewNotifyLogClient(nl.config).UpdateOne(nl)
}

// Unwrap unwraps the NotifyLog entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (nl *NotifyLog) Unwrap() *NotifyLog {
	_tx, ok := nl.config.driver.(*txDriver)
	if !ok {
		panic("ent: NotifyLog is not a transactional entity")
	}
	nl.config.driver = _tx.drv
	return nl
}

// String implements the fmt.Stringer.
func (nl *NotifyLog) String() string {
	var builder strings.Builder
	builder.WriteString("NotifyLog(")
	builder.WriteString(fmt.Sprintf("id=%v, ", nl.ID))
	builder.WriteString("created_at=")
	builder.WriteString(nl.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(nl.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", nl.Status))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(nl.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("task_id=")
	builder.WriteString(fmt.Sprintf("%v", nl.TaskID))
	builder.WriteString(", ")
	builder.WriteString("notify_times=")
	builder.WriteString(fmt.Sprintf("%v", nl.NotifyTimes))
	builder.WriteString(", ")
	builder.WriteString("response=")
	builder.WriteString(nl.Response)
	builder.WriteByte(')')
	return builder.String()
}

// NotifyLogs is a parsable slice of NotifyLog.
type NotifyLogs []*NotifyLog

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/agui-coder/simple-admin-pay-rpc/ent/demoorder"
)

// DemoOrder is the model entity for the DemoOrder schema.
type DemoOrder struct {
	config `json:"-"`
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// Create Time | 创建日期
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Update Time | 修改日期
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Delete Time | 删除日期
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// 用户编号
	UserID string `json:"user_id,omitempty"`
	// 商品编号
	SpuID uint64 `json:"spu_id,omitempty"`
	// 商品名称
	SpuName string `json:"spu_name,omitempty"`
	// 价格，单位：分
	Price int32 `json:"price,omitempty"`
	// 是否支付
	PayStatus bool `json:"pay_status,omitempty"`
	// 支付订单编号
	PayOrderId uint64 `json:"pay_orderId,omitempty"`
	// 付款时间
	PayTime time.Time `json:"pay_time,omitempty"`
	// 支付渠道
	PayChannelCode string `json:"pay_channel_code,omitempty"`
	// 支付退款单号
	PayRefundID uint64 `json:"pay_refund_id,omitempty"`
	// 退款金额，单位：分
	RefundPrice int32 `json:"refund_price,omitempty"`
	// 退款完成时间
	RefundTime   time.Time `json:"refund_time,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*DemoOrder) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case demoorder.FieldPayStatus:
			values[i] = new(sql.NullBool)
		case demoorder.FieldID, demoorder.FieldSpuID, demoorder.FieldPrice, demoorder.FieldPayOrderId, demoorder.FieldPayRefundID, demoorder.FieldRefundPrice:
			values[i] = new(sql.NullInt64)
		case demoorder.FieldUserID, demoorder.FieldSpuName, demoorder.FieldPayChannelCode:
			values[i] = new(sql.NullString)
		case demoorder.FieldCreatedAt, demoorder.FieldUpdatedAt, demoorder.FieldDeletedAt, demoorder.FieldPayTime, demoorder.FieldRefundTime:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the DemoOrder fields.
func (do *DemoOrder) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case demoorder.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			do.ID = uint64(value.Int64)
		case demoorder.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				do.CreatedAt = value.Time
			}
		case demoorder.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				do.UpdatedAt = value.Time
			}
		case demoorder.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				do.DeletedAt = value.Time
			}
		case demoorder.FieldUserID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				do.UserID = value.String
			}
		case demoorder.FieldSpuID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field spu_id", values[i])
			} else if value.Valid {
				do.SpuID = uint64(value.Int64)
			}
		case demoorder.FieldSpuName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field spu_name", values[i])
			} else if value.Valid {
				do.SpuName = value.String
			}
		case demoorder.FieldPrice:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field price", values[i])
			} else if value.Valid {
				do.Price = int32(value.Int64)
			}
		case demoorder.FieldPayStatus:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field pay_status", values[i])
			} else if value.Valid {
				do.PayStatus = value.Bool
			}
		case demoorder.FieldPayOrderId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field pay_orderId", values[i])
			} else if value.Valid {
				do.PayOrderId = uint64(value.Int64)
			}
		case demoorder.FieldPayTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field pay_time", values[i])
			} else if value.Valid {
				do.PayTime = value.Time
			}
		case demoorder.FieldPayChannelCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field pay_channel_code", values[i])
			} else if value.Valid {
				do.PayChannelCode = value.String
			}
		case demoorder.FieldPayRefundID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field pay_refund_id", values[i])
			} else if value.Valid {
				do.PayRefundID = uint64(value.Int64)
			}
		case demoorder.FieldRefundPrice:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field refund_price", values[i])
			} else if value.Valid {
				do.RefundPrice = int32(value.Int64)
			}
		case demoorder.FieldRefundTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field refund_time", values[i])
			} else if value.Valid {
				do.RefundTime = value.Time
			}
		default:
			do.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the DemoOrder.
// This includes values selected through modifiers, order, etc.
func (do *DemoOrder) Value(name string) (ent.Value, error) {
	return do.selectValues.Get(name)
}

// Update returns a builder for updating this DemoOrder.
// Note that you need to call DemoOrder.Unwrap() before calling this method if this DemoOrder
// was returned from a transaction, and the transaction was committed or rolled back.
func (do *DemoOrder) Update() *DemoOrderUpdateOne {
	return NewDemoOrderClient(do.config).UpdateOne(do)
}

// Unwrap unwraps the DemoOrder entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (do *DemoOrder) Unwrap() *DemoOrder {
	_tx, ok := do.config.driver.(*txDriver)
	if !ok {
		panic("ent: DemoOrder is not a transactional entity")
	}
	do.config.driver = _tx.drv
	return do
}

// String implements the fmt.Stringer.
func (do *DemoOrder) String() string {
	var builder strings.Builder
	builder.WriteString("DemoOrder(")
	builder.WriteString(fmt.Sprintf("id=%v, ", do.ID))
	builder.WriteString("created_at=")
	builder.WriteString(do.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(do.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(do.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(do.UserID)
	builder.WriteString(", ")
	builder.WriteString("spu_id=")
	builder.WriteString(fmt.Sprintf("%v", do.SpuID))
	builder.WriteString(", ")
	builder.WriteString("spu_name=")
	builder.WriteString(do.SpuName)
	builder.WriteString(", ")
	builder.WriteString("price=")
	builder.WriteString(fmt.Sprintf("%v", do.Price))
	builder.WriteString(", ")
	builder.WriteString("pay_status=")
	builder.WriteString(fmt.Sprintf("%v", do.PayStatus))
	builder.WriteString(", ")
	builder.WriteString("pay_orderId=")
	builder.WriteString(fmt.Sprintf("%v", do.PayOrderId))
	builder.WriteString(", ")
	builder.WriteString("pay_time=")
	builder.WriteString(do.PayTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("pay_channel_code=")
	builder.WriteString(do.PayChannelCode)
	builder.WriteString(", ")
	builder.WriteString("pay_refund_id=")
	builder.WriteString(fmt.Sprintf("%v", do.PayRefundID))
	builder.WriteString(", ")
	builder.WriteString("refund_price=")
	builder.WriteString(fmt.Sprintf("%v", do.RefundPrice))
	builder.WriteString(", ")
	builder.WriteString("refund_time=")
	builder.WriteString(do.RefundTime.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// DemoOrders is a parsable slice of DemoOrder.
type DemoOrders []*DemoOrder

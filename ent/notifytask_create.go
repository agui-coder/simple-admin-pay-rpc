// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"github.com/agui-coder/simple-admin-pay-rpc/ent/notifytask"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// NotifyTaskCreate is the builder for creating a NotifyTask entity.
type NotifyTaskCreate struct {
	config
	mutation *NotifyTaskMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (ntc *NotifyTaskCreate) SetCreatedAt(t time.Time) *NotifyTaskCreate {
	ntc.mutation.SetCreatedAt(t)
	return ntc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ntc *NotifyTaskCreate) SetNillableCreatedAt(t *time.Time) *NotifyTaskCreate {
	if t != nil {
		ntc.SetCreatedAt(*t)
	}
	return ntc
}

// SetUpdatedAt sets the "updated_at" field.
func (ntc *NotifyTaskCreate) SetUpdatedAt(t time.Time) *NotifyTaskCreate {
	ntc.mutation.SetUpdatedAt(t)
	return ntc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ntc *NotifyTaskCreate) SetNillableUpdatedAt(t *time.Time) *NotifyTaskCreate {
	if t != nil {
		ntc.SetUpdatedAt(*t)
	}
	return ntc
}

// SetStatus sets the "status" field.
func (ntc *NotifyTaskCreate) SetStatus(u uint8) *NotifyTaskCreate {
	ntc.mutation.SetStatus(u)
	return ntc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ntc *NotifyTaskCreate) SetNillableStatus(u *uint8) *NotifyTaskCreate {
	if u != nil {
		ntc.SetStatus(*u)
	}
	return ntc
}

// SetDeletedAt sets the "deleted_at" field.
func (ntc *NotifyTaskCreate) SetDeletedAt(t time.Time) *NotifyTaskCreate {
	ntc.mutation.SetDeletedAt(t)
	return ntc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ntc *NotifyTaskCreate) SetNillableDeletedAt(t *time.Time) *NotifyTaskCreate {
	if t != nil {
		ntc.SetDeletedAt(*t)
	}
	return ntc
}

// SetAppID sets the "app_id" field.
func (ntc *NotifyTaskCreate) SetAppID(u uint64) *NotifyTaskCreate {
	ntc.mutation.SetAppID(u)
	return ntc
}

// SetType sets the "type" field.
func (ntc *NotifyTaskCreate) SetType(i int) *NotifyTaskCreate {
	ntc.mutation.SetType(i)
	return ntc
}

// SetDataID sets the "data_id" field.
func (ntc *NotifyTaskCreate) SetDataID(u uint64) *NotifyTaskCreate {
	ntc.mutation.SetDataID(u)
	return ntc
}

// SetMerchantOrderID sets the "merchant_order_id" field.
func (ntc *NotifyTaskCreate) SetMerchantOrderID(s string) *NotifyTaskCreate {
	ntc.mutation.SetMerchantOrderID(s)
	return ntc
}

// SetNextNotifyTime sets the "next_notify_time" field.
func (ntc *NotifyTaskCreate) SetNextNotifyTime(t time.Time) *NotifyTaskCreate {
	ntc.mutation.SetNextNotifyTime(t)
	return ntc
}

// SetLastExecuteTime sets the "last_execute_time" field.
func (ntc *NotifyTaskCreate) SetLastExecuteTime(t time.Time) *NotifyTaskCreate {
	ntc.mutation.SetLastExecuteTime(t)
	return ntc
}

// SetNotifyTimes sets the "notify_times" field.
func (ntc *NotifyTaskCreate) SetNotifyTimes(i int8) *NotifyTaskCreate {
	ntc.mutation.SetNotifyTimes(i)
	return ntc
}

// SetMaxNotifyTimes sets the "max_notify_times" field.
func (ntc *NotifyTaskCreate) SetMaxNotifyTimes(i int8) *NotifyTaskCreate {
	ntc.mutation.SetMaxNotifyTimes(i)
	return ntc
}

// SetNotifyURL sets the "notify_url" field.
func (ntc *NotifyTaskCreate) SetNotifyURL(s string) *NotifyTaskCreate {
	ntc.mutation.SetNotifyURL(s)
	return ntc
}

// SetID sets the "id" field.
func (ntc *NotifyTaskCreate) SetID(u uint64) *NotifyTaskCreate {
	ntc.mutation.SetID(u)
	return ntc
}

// Mutation returns the NotifyTaskMutation object of the builder.
func (ntc *NotifyTaskCreate) Mutation() *NotifyTaskMutation {
	return ntc.mutation
}

// Save creates the NotifyTask in the database.
func (ntc *NotifyTaskCreate) Save(ctx context.Context) (*NotifyTask, error) {
	if err := ntc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, ntc.sqlSave, ntc.mutation, ntc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ntc *NotifyTaskCreate) SaveX(ctx context.Context) *NotifyTask {
	v, err := ntc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ntc *NotifyTaskCreate) Exec(ctx context.Context) error {
	_, err := ntc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ntc *NotifyTaskCreate) ExecX(ctx context.Context) {
	if err := ntc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ntc *NotifyTaskCreate) defaults() error {
	if _, ok := ntc.mutation.CreatedAt(); !ok {
		if notifytask.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized notifytask.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := notifytask.DefaultCreatedAt()
		ntc.mutation.SetCreatedAt(v)
	}
	if _, ok := ntc.mutation.UpdatedAt(); !ok {
		if notifytask.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized notifytask.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := notifytask.DefaultUpdatedAt()
		ntc.mutation.SetUpdatedAt(v)
	}
	if _, ok := ntc.mutation.Status(); !ok {
		v := notifytask.DefaultStatus
		ntc.mutation.SetStatus(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (ntc *NotifyTaskCreate) check() error {
	if _, ok := ntc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "NotifyTask.created_at"`)}
	}
	if _, ok := ntc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "NotifyTask.updated_at"`)}
	}
	if _, ok := ntc.mutation.AppID(); !ok {
		return &ValidationError{Name: "app_id", err: errors.New(`ent: missing required field "NotifyTask.app_id"`)}
	}
	if _, ok := ntc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "NotifyTask.type"`)}
	}
	if _, ok := ntc.mutation.DataID(); !ok {
		return &ValidationError{Name: "data_id", err: errors.New(`ent: missing required field "NotifyTask.data_id"`)}
	}
	if _, ok := ntc.mutation.MerchantOrderID(); !ok {
		return &ValidationError{Name: "merchant_order_id", err: errors.New(`ent: missing required field "NotifyTask.merchant_order_id"`)}
	}
	if _, ok := ntc.mutation.NextNotifyTime(); !ok {
		return &ValidationError{Name: "next_notify_time", err: errors.New(`ent: missing required field "NotifyTask.next_notify_time"`)}
	}
	if _, ok := ntc.mutation.LastExecuteTime(); !ok {
		return &ValidationError{Name: "last_execute_time", err: errors.New(`ent: missing required field "NotifyTask.last_execute_time"`)}
	}
	if _, ok := ntc.mutation.NotifyTimes(); !ok {
		return &ValidationError{Name: "notify_times", err: errors.New(`ent: missing required field "NotifyTask.notify_times"`)}
	}
	if _, ok := ntc.mutation.MaxNotifyTimes(); !ok {
		return &ValidationError{Name: "max_notify_times", err: errors.New(`ent: missing required field "NotifyTask.max_notify_times"`)}
	}
	if _, ok := ntc.mutation.NotifyURL(); !ok {
		return &ValidationError{Name: "notify_url", err: errors.New(`ent: missing required field "NotifyTask.notify_url"`)}
	}
	return nil
}

func (ntc *NotifyTaskCreate) sqlSave(ctx context.Context) (*NotifyTask, error) {
	if err := ntc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ntc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ntc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint64(id)
	}
	ntc.mutation.id = &_node.ID
	ntc.mutation.done = true
	return _node, nil
}

func (ntc *NotifyTaskCreate) createSpec() (*NotifyTask, *sqlgraph.CreateSpec) {
	var (
		_node = &NotifyTask{config: ntc.config}
		_spec = sqlgraph.NewCreateSpec(notifytask.Table, sqlgraph.NewFieldSpec(notifytask.FieldID, field.TypeUint64))
	)
	if id, ok := ntc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ntc.mutation.CreatedAt(); ok {
		_spec.SetField(notifytask.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := ntc.mutation.UpdatedAt(); ok {
		_spec.SetField(notifytask.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := ntc.mutation.Status(); ok {
		_spec.SetField(notifytask.FieldStatus, field.TypeUint8, value)
		_node.Status = value
	}
	if value, ok := ntc.mutation.DeletedAt(); ok {
		_spec.SetField(notifytask.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := ntc.mutation.AppID(); ok {
		_spec.SetField(notifytask.FieldAppID, field.TypeUint64, value)
		_node.AppID = value
	}
	if value, ok := ntc.mutation.GetType(); ok {
		_spec.SetField(notifytask.FieldType, field.TypeInt, value)
		_node.Type = value
	}
	if value, ok := ntc.mutation.DataID(); ok {
		_spec.SetField(notifytask.FieldDataID, field.TypeUint64, value)
		_node.DataID = value
	}
	if value, ok := ntc.mutation.MerchantOrderID(); ok {
		_spec.SetField(notifytask.FieldMerchantOrderID, field.TypeString, value)
		_node.MerchantOrderID = value
	}
	if value, ok := ntc.mutation.NextNotifyTime(); ok {
		_spec.SetField(notifytask.FieldNextNotifyTime, field.TypeTime, value)
		_node.NextNotifyTime = value
	}
	if value, ok := ntc.mutation.LastExecuteTime(); ok {
		_spec.SetField(notifytask.FieldLastExecuteTime, field.TypeTime, value)
		_node.LastExecuteTime = value
	}
	if value, ok := ntc.mutation.NotifyTimes(); ok {
		_spec.SetField(notifytask.FieldNotifyTimes, field.TypeInt8, value)
		_node.NotifyTimes = value
	}
	if value, ok := ntc.mutation.MaxNotifyTimes(); ok {
		_spec.SetField(notifytask.FieldMaxNotifyTimes, field.TypeInt8, value)
		_node.MaxNotifyTimes = value
	}
	if value, ok := ntc.mutation.NotifyURL(); ok {
		_spec.SetField(notifytask.FieldNotifyURL, field.TypeString, value)
		_node.NotifyURL = value
	}
	return _node, _spec
}

// NotifyTaskCreateBulk is the builder for creating many NotifyTask entities in bulk.
type NotifyTaskCreateBulk struct {
	config
	err      error
	builders []*NotifyTaskCreate
}

// Save creates the NotifyTask entities in the database.
func (ntcb *NotifyTaskCreateBulk) Save(ctx context.Context) ([]*NotifyTask, error) {
	if ntcb.err != nil {
		return nil, ntcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ntcb.builders))
	nodes := make([]*NotifyTask, len(ntcb.builders))
	mutators := make([]Mutator, len(ntcb.builders))
	for i := range ntcb.builders {
		func(i int, root context.Context) {
			builder := ntcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*NotifyTaskMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ntcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ntcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ntcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ntcb *NotifyTaskCreateBulk) SaveX(ctx context.Context) []*NotifyTask {
	v, err := ntcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ntcb *NotifyTaskCreateBulk) Exec(ctx context.Context) error {
	_, err := ntcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ntcb *NotifyTaskCreateBulk) ExecX(ctx context.Context) {
	if err := ntcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/agui-coder/simple-admin-pay-rpc/ent/refund"
)

// Refund is the model entity for the Refund schema.
type Refund struct {
	config `json:"-"`
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// Create Time | 创建日期
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Update Time | 修改日期
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Status 1: normal 2: ban | 状态 1 正常 2 禁用
	Status uint8 `json:"status,omitempty"`
	// Delete Time | 删除日期
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// 退款单号
	No string `json:"no,omitempty"`
	// 渠道编码
	ChannelCode string `json:"channel_code,omitempty"`
	// 支付订单编号 pay_order 表id
	OrderID uint64 `json:"order_id,omitempty"`
	// 支付订单 no
	OrderNo string `json:"order_no,omitempty"`
	// 商户订单编号（商户系统生成）
	MerchantOrderID string `json:"merchant_order_id,omitempty"`
	// 商户退款订单号（商户系统生成）
	MerchantRefundID string `json:"merchant_refund_id,omitempty"`
	// 异步通知商户地址
	NotifyURL string `json:"notify_url,omitempty"`
	// 支付金额,单位分
	PayPrice int32 `json:"pay_price,omitempty"`
	// 退款金额,单位分
	RefundPrice int32 `json:"refund_price,omitempty"`
	// 退款原因
	Reason string `json:"reason,omitempty"`
	// 用户 IP
	UserIP string `json:"user_ip,omitempty"`
	// 渠道订单号，pay_order 中的 channel_order_no 对应
	ChannelOrderNo string `json:"channel_order_no,omitempty"`
	// 渠道退款单号，渠道返回
	ChannelRefundNo string `json:"channel_refund_no,omitempty"`
	// 退款成功时间
	SuccessTime time.Time `json:"success_time,omitempty"`
	// 渠道调用报错时，错误码
	ChannelErrorCode string `json:"channel_error_code,omitempty"`
	// 渠道调用报错时，错误信息
	ChannelErrorMsg string `json:"channel_error_msg,omitempty"`
	// 支付渠道异步通知的内容
	ChannelNotifyData string `json:"channel_notify_data,omitempty"`
	selectValues      sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Refund) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case refund.FieldID, refund.FieldStatus, refund.FieldOrderID, refund.FieldPayPrice, refund.FieldRefundPrice:
			values[i] = new(sql.NullInt64)
		case refund.FieldNo, refund.FieldChannelCode, refund.FieldOrderNo, refund.FieldMerchantOrderID, refund.FieldMerchantRefundID, refund.FieldNotifyURL, refund.FieldReason, refund.FieldUserIP, refund.FieldChannelOrderNo, refund.FieldChannelRefundNo, refund.FieldChannelErrorCode, refund.FieldChannelErrorMsg, refund.FieldChannelNotifyData:
			values[i] = new(sql.NullString)
		case refund.FieldCreatedAt, refund.FieldUpdatedAt, refund.FieldDeletedAt, refund.FieldSuccessTime:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Refund fields.
func (r *Refund) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case refund.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			r.ID = uint64(value.Int64)
		case refund.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				r.CreatedAt = value.Time
			}
		case refund.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				r.UpdatedAt = value.Time
			}
		case refund.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				r.Status = uint8(value.Int64)
			}
		case refund.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				r.DeletedAt = value.Time
			}
		case refund.FieldNo:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field no", values[i])
			} else if value.Valid {
				r.No = value.String
			}
		case refund.FieldChannelCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field channel_code", values[i])
			} else if value.Valid {
				r.ChannelCode = value.String
			}
		case refund.FieldOrderID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field order_id", values[i])
			} else if value.Valid {
				r.OrderID = uint64(value.Int64)
			}
		case refund.FieldOrderNo:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field order_no", values[i])
			} else if value.Valid {
				r.OrderNo = value.String
			}
		case refund.FieldMerchantOrderID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field merchant_order_id", values[i])
			} else if value.Valid {
				r.MerchantOrderID = value.String
			}
		case refund.FieldMerchantRefundID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field merchant_refund_id", values[i])
			} else if value.Valid {
				r.MerchantRefundID = value.String
			}
		case refund.FieldNotifyURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field notify_url", values[i])
			} else if value.Valid {
				r.NotifyURL = value.String
			}
		case refund.FieldPayPrice:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field pay_price", values[i])
			} else if value.Valid {
				r.PayPrice = int32(value.Int64)
			}
		case refund.FieldRefundPrice:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field refund_price", values[i])
			} else if value.Valid {
				r.RefundPrice = int32(value.Int64)
			}
		case refund.FieldReason:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field reason", values[i])
			} else if value.Valid {
				r.Reason = value.String
			}
		case refund.FieldUserIP:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_ip", values[i])
			} else if value.Valid {
				r.UserIP = value.String
			}
		case refund.FieldChannelOrderNo:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field channel_order_no", values[i])
			} else if value.Valid {
				r.ChannelOrderNo = value.String
			}
		case refund.FieldChannelRefundNo:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field channel_refund_no", values[i])
			} else if value.Valid {
				r.ChannelRefundNo = value.String
			}
		case refund.FieldSuccessTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field success_time", values[i])
			} else if value.Valid {
				r.SuccessTime = value.Time
			}
		case refund.FieldChannelErrorCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field channel_error_code", values[i])
			} else if value.Valid {
				r.ChannelErrorCode = value.String
			}
		case refund.FieldChannelErrorMsg:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field channel_error_msg", values[i])
			} else if value.Valid {
				r.ChannelErrorMsg = value.String
			}
		case refund.FieldChannelNotifyData:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field channel_notify_data", values[i])
			} else if value.Valid {
				r.ChannelNotifyData = value.String
			}
		default:
			r.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Refund.
// This includes values selected through modifiers, order, etc.
func (r *Refund) Value(name string) (ent.Value, error) {
	return r.selectValues.Get(name)
}

// Update returns a builder for updating this Refund.
// Note that you need to call Refund.Unwrap() before calling this method if this Refund
// was returned from a transaction, and the transaction was committed or rolled back.
func (r *Refund) Update() *RefundUpdateOne {
	return NewRefundClient(r.config).UpdateOne(r)
}

// Unwrap unwraps the Refund entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (r *Refund) Unwrap() *Refund {
	_tx, ok := r.config.driver.(*txDriver)
	if !ok {
		panic("ent: Refund is not a transactional entity")
	}
	r.config.driver = _tx.drv
	return r
}

// String implements the fmt.Stringer.
func (r *Refund) String() string {
	var builder strings.Builder
	builder.WriteString("Refund(")
	builder.WriteString(fmt.Sprintf("id=%v, ", r.ID))
	builder.WriteString("created_at=")
	builder.WriteString(r.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(r.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", r.Status))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(r.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("no=")
	builder.WriteString(r.No)
	builder.WriteString(", ")
	builder.WriteString("channel_code=")
	builder.WriteString(r.ChannelCode)
	builder.WriteString(", ")
	builder.WriteString("order_id=")
	builder.WriteString(fmt.Sprintf("%v", r.OrderID))
	builder.WriteString(", ")
	builder.WriteString("order_no=")
	builder.WriteString(r.OrderNo)
	builder.WriteString(", ")
	builder.WriteString("merchant_order_id=")
	builder.WriteString(r.MerchantOrderID)
	builder.WriteString(", ")
	builder.WriteString("merchant_refund_id=")
	builder.WriteString(r.MerchantRefundID)
	builder.WriteString(", ")
	builder.WriteString("notify_url=")
	builder.WriteString(r.NotifyURL)
	builder.WriteString(", ")
	builder.WriteString("pay_price=")
	builder.WriteString(fmt.Sprintf("%v", r.PayPrice))
	builder.WriteString(", ")
	builder.WriteString("refund_price=")
	builder.WriteString(fmt.Sprintf("%v", r.RefundPrice))
	builder.WriteString(", ")
	builder.WriteString("reason=")
	builder.WriteString(r.Reason)
	builder.WriteString(", ")
	builder.WriteString("user_ip=")
	builder.WriteString(r.UserIP)
	builder.WriteString(", ")
	builder.WriteString("channel_order_no=")
	builder.WriteString(r.ChannelOrderNo)
	builder.WriteString(", ")
	builder.WriteString("channel_refund_no=")
	builder.WriteString(r.ChannelRefundNo)
	builder.WriteString(", ")
	builder.WriteString("success_time=")
	builder.WriteString(r.SuccessTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("channel_error_code=")
	builder.WriteString(r.ChannelErrorCode)
	builder.WriteString(", ")
	builder.WriteString("channel_error_msg=")
	builder.WriteString(r.ChannelErrorMsg)
	builder.WriteString(", ")
	builder.WriteString("channel_notify_data=")
	builder.WriteString(r.ChannelNotifyData)
	builder.WriteByte(')')
	return builder.String()
}

// Refunds is a parsable slice of Refund.
type Refunds []*Refund

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/agui-coder/simple-admin-pay-rpc/ent/predicate"
	"github.com/agui-coder/simple-admin-pay-rpc/ent/refund"
)

// RefundUpdate is the builder for updating Refund entities.
type RefundUpdate struct {
	config
	hooks    []Hook
	mutation *RefundMutation
}

// Where appends a list predicates to the RefundUpdate builder.
func (ru *RefundUpdate) Where(ps ...predicate.Refund) *RefundUpdate {
	ru.mutation.Where(ps...)
	return ru
}

// SetUpdatedAt sets the "updated_at" field.
func (ru *RefundUpdate) SetUpdatedAt(t time.Time) *RefundUpdate {
	ru.mutation.SetUpdatedAt(t)
	return ru
}

// SetStatus sets the "status" field.
func (ru *RefundUpdate) SetStatus(u uint8) *RefundUpdate {
	ru.mutation.ResetStatus()
	ru.mutation.SetStatus(u)
	return ru
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ru *RefundUpdate) SetNillableStatus(u *uint8) *RefundUpdate {
	if u != nil {
		ru.SetStatus(*u)
	}
	return ru
}

// AddStatus adds u to the "status" field.
func (ru *RefundUpdate) AddStatus(u int8) *RefundUpdate {
	ru.mutation.AddStatus(u)
	return ru
}

// ClearStatus clears the value of the "status" field.
func (ru *RefundUpdate) ClearStatus() *RefundUpdate {
	ru.mutation.ClearStatus()
	return ru
}

// SetDeletedAt sets the "deleted_at" field.
func (ru *RefundUpdate) SetDeletedAt(t time.Time) *RefundUpdate {
	ru.mutation.SetDeletedAt(t)
	return ru
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ru *RefundUpdate) SetNillableDeletedAt(t *time.Time) *RefundUpdate {
	if t != nil {
		ru.SetDeletedAt(*t)
	}
	return ru
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (ru *RefundUpdate) ClearDeletedAt() *RefundUpdate {
	ru.mutation.ClearDeletedAt()
	return ru
}

// SetNo sets the "no" field.
func (ru *RefundUpdate) SetNo(s string) *RefundUpdate {
	ru.mutation.SetNo(s)
	return ru
}

// SetNillableNo sets the "no" field if the given value is not nil.
func (ru *RefundUpdate) SetNillableNo(s *string) *RefundUpdate {
	if s != nil {
		ru.SetNo(*s)
	}
	return ru
}

// SetAppID sets the "app_id" field.
func (ru *RefundUpdate) SetAppID(u uint64) *RefundUpdate {
	ru.mutation.ResetAppID()
	ru.mutation.SetAppID(u)
	return ru
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (ru *RefundUpdate) SetNillableAppID(u *uint64) *RefundUpdate {
	if u != nil {
		ru.SetAppID(*u)
	}
	return ru
}

// AddAppID adds u to the "app_id" field.
func (ru *RefundUpdate) AddAppID(u int64) *RefundUpdate {
	ru.mutation.AddAppID(u)
	return ru
}

// SetChannelID sets the "channel_id" field.
func (ru *RefundUpdate) SetChannelID(u uint64) *RefundUpdate {
	ru.mutation.ResetChannelID()
	ru.mutation.SetChannelID(u)
	return ru
}

// SetNillableChannelID sets the "channel_id" field if the given value is not nil.
func (ru *RefundUpdate) SetNillableChannelID(u *uint64) *RefundUpdate {
	if u != nil {
		ru.SetChannelID(*u)
	}
	return ru
}

// AddChannelID adds u to the "channel_id" field.
func (ru *RefundUpdate) AddChannelID(u int64) *RefundUpdate {
	ru.mutation.AddChannelID(u)
	return ru
}

// SetChannelCode sets the "channel_code" field.
func (ru *RefundUpdate) SetChannelCode(s string) *RefundUpdate {
	ru.mutation.SetChannelCode(s)
	return ru
}

// SetNillableChannelCode sets the "channel_code" field if the given value is not nil.
func (ru *RefundUpdate) SetNillableChannelCode(s *string) *RefundUpdate {
	if s != nil {
		ru.SetChannelCode(*s)
	}
	return ru
}

// SetOrderID sets the "order_id" field.
func (ru *RefundUpdate) SetOrderID(u uint64) *RefundUpdate {
	ru.mutation.ResetOrderID()
	ru.mutation.SetOrderID(u)
	return ru
}

// SetNillableOrderID sets the "order_id" field if the given value is not nil.
func (ru *RefundUpdate) SetNillableOrderID(u *uint64) *RefundUpdate {
	if u != nil {
		ru.SetOrderID(*u)
	}
	return ru
}

// AddOrderID adds u to the "order_id" field.
func (ru *RefundUpdate) AddOrderID(u int64) *RefundUpdate {
	ru.mutation.AddOrderID(u)
	return ru
}

// SetOrderNo sets the "order_no" field.
func (ru *RefundUpdate) SetOrderNo(s string) *RefundUpdate {
	ru.mutation.SetOrderNo(s)
	return ru
}

// SetNillableOrderNo sets the "order_no" field if the given value is not nil.
func (ru *RefundUpdate) SetNillableOrderNo(s *string) *RefundUpdate {
	if s != nil {
		ru.SetOrderNo(*s)
	}
	return ru
}

// SetMerchantOrderID sets the "merchant_order_id" field.
func (ru *RefundUpdate) SetMerchantOrderID(s string) *RefundUpdate {
	ru.mutation.SetMerchantOrderID(s)
	return ru
}

// SetNillableMerchantOrderID sets the "merchant_order_id" field if the given value is not nil.
func (ru *RefundUpdate) SetNillableMerchantOrderID(s *string) *RefundUpdate {
	if s != nil {
		ru.SetMerchantOrderID(*s)
	}
	return ru
}

// SetMerchantRefundID sets the "merchant_refund_id" field.
func (ru *RefundUpdate) SetMerchantRefundID(s string) *RefundUpdate {
	ru.mutation.SetMerchantRefundID(s)
	return ru
}

// SetNillableMerchantRefundID sets the "merchant_refund_id" field if the given value is not nil.
func (ru *RefundUpdate) SetNillableMerchantRefundID(s *string) *RefundUpdate {
	if s != nil {
		ru.SetMerchantRefundID(*s)
	}
	return ru
}

// SetNotifyURL sets the "notify_url" field.
func (ru *RefundUpdate) SetNotifyURL(s string) *RefundUpdate {
	ru.mutation.SetNotifyURL(s)
	return ru
}

// SetNillableNotifyURL sets the "notify_url" field if the given value is not nil.
func (ru *RefundUpdate) SetNillableNotifyURL(s *string) *RefundUpdate {
	if s != nil {
		ru.SetNotifyURL(*s)
	}
	return ru
}

// SetPayPrice sets the "pay_price" field.
func (ru *RefundUpdate) SetPayPrice(i int32) *RefundUpdate {
	ru.mutation.ResetPayPrice()
	ru.mutation.SetPayPrice(i)
	return ru
}

// SetNillablePayPrice sets the "pay_price" field if the given value is not nil.
func (ru *RefundUpdate) SetNillablePayPrice(i *int32) *RefundUpdate {
	if i != nil {
		ru.SetPayPrice(*i)
	}
	return ru
}

// AddPayPrice adds i to the "pay_price" field.
func (ru *RefundUpdate) AddPayPrice(i int32) *RefundUpdate {
	ru.mutation.AddPayPrice(i)
	return ru
}

// SetRefundPrice sets the "refund_price" field.
func (ru *RefundUpdate) SetRefundPrice(i int32) *RefundUpdate {
	ru.mutation.ResetRefundPrice()
	ru.mutation.SetRefundPrice(i)
	return ru
}

// SetNillableRefundPrice sets the "refund_price" field if the given value is not nil.
func (ru *RefundUpdate) SetNillableRefundPrice(i *int32) *RefundUpdate {
	if i != nil {
		ru.SetRefundPrice(*i)
	}
	return ru
}

// AddRefundPrice adds i to the "refund_price" field.
func (ru *RefundUpdate) AddRefundPrice(i int32) *RefundUpdate {
	ru.mutation.AddRefundPrice(i)
	return ru
}

// SetReason sets the "reason" field.
func (ru *RefundUpdate) SetReason(s string) *RefundUpdate {
	ru.mutation.SetReason(s)
	return ru
}

// SetNillableReason sets the "reason" field if the given value is not nil.
func (ru *RefundUpdate) SetNillableReason(s *string) *RefundUpdate {
	if s != nil {
		ru.SetReason(*s)
	}
	return ru
}

// SetUserIP sets the "user_ip" field.
func (ru *RefundUpdate) SetUserIP(s string) *RefundUpdate {
	ru.mutation.SetUserIP(s)
	return ru
}

// SetNillableUserIP sets the "user_ip" field if the given value is not nil.
func (ru *RefundUpdate) SetNillableUserIP(s *string) *RefundUpdate {
	if s != nil {
		ru.SetUserIP(*s)
	}
	return ru
}

// ClearUserIP clears the value of the "user_ip" field.
func (ru *RefundUpdate) ClearUserIP() *RefundUpdate {
	ru.mutation.ClearUserIP()
	return ru
}

// SetChannelOrderNo sets the "channel_order_no" field.
func (ru *RefundUpdate) SetChannelOrderNo(s string) *RefundUpdate {
	ru.mutation.SetChannelOrderNo(s)
	return ru
}

// SetNillableChannelOrderNo sets the "channel_order_no" field if the given value is not nil.
func (ru *RefundUpdate) SetNillableChannelOrderNo(s *string) *RefundUpdate {
	if s != nil {
		ru.SetChannelOrderNo(*s)
	}
	return ru
}

// SetChannelRefundNo sets the "channel_refund_no" field.
func (ru *RefundUpdate) SetChannelRefundNo(s string) *RefundUpdate {
	ru.mutation.SetChannelRefundNo(s)
	return ru
}

// SetNillableChannelRefundNo sets the "channel_refund_no" field if the given value is not nil.
func (ru *RefundUpdate) SetNillableChannelRefundNo(s *string) *RefundUpdate {
	if s != nil {
		ru.SetChannelRefundNo(*s)
	}
	return ru
}

// ClearChannelRefundNo clears the value of the "channel_refund_no" field.
func (ru *RefundUpdate) ClearChannelRefundNo() *RefundUpdate {
	ru.mutation.ClearChannelRefundNo()
	return ru
}

// SetSuccessTime sets the "success_time" field.
func (ru *RefundUpdate) SetSuccessTime(t time.Time) *RefundUpdate {
	ru.mutation.SetSuccessTime(t)
	return ru
}

// SetNillableSuccessTime sets the "success_time" field if the given value is not nil.
func (ru *RefundUpdate) SetNillableSuccessTime(t *time.Time) *RefundUpdate {
	if t != nil {
		ru.SetSuccessTime(*t)
	}
	return ru
}

// ClearSuccessTime clears the value of the "success_time" field.
func (ru *RefundUpdate) ClearSuccessTime() *RefundUpdate {
	ru.mutation.ClearSuccessTime()
	return ru
}

// SetChannelErrorCode sets the "channel_error_code" field.
func (ru *RefundUpdate) SetChannelErrorCode(s string) *RefundUpdate {
	ru.mutation.SetChannelErrorCode(s)
	return ru
}

// SetNillableChannelErrorCode sets the "channel_error_code" field if the given value is not nil.
func (ru *RefundUpdate) SetNillableChannelErrorCode(s *string) *RefundUpdate {
	if s != nil {
		ru.SetChannelErrorCode(*s)
	}
	return ru
}

// ClearChannelErrorCode clears the value of the "channel_error_code" field.
func (ru *RefundUpdate) ClearChannelErrorCode() *RefundUpdate {
	ru.mutation.ClearChannelErrorCode()
	return ru
}

// SetChannelErrorMsg sets the "channel_error_msg" field.
func (ru *RefundUpdate) SetChannelErrorMsg(s string) *RefundUpdate {
	ru.mutation.SetChannelErrorMsg(s)
	return ru
}

// SetNillableChannelErrorMsg sets the "channel_error_msg" field if the given value is not nil.
func (ru *RefundUpdate) SetNillableChannelErrorMsg(s *string) *RefundUpdate {
	if s != nil {
		ru.SetChannelErrorMsg(*s)
	}
	return ru
}

// ClearChannelErrorMsg clears the value of the "channel_error_msg" field.
func (ru *RefundUpdate) ClearChannelErrorMsg() *RefundUpdate {
	ru.mutation.ClearChannelErrorMsg()
	return ru
}

// SetChannelNotifyData sets the "channel_notify_data" field.
func (ru *RefundUpdate) SetChannelNotifyData(s string) *RefundUpdate {
	ru.mutation.SetChannelNotifyData(s)
	return ru
}

// SetNillableChannelNotifyData sets the "channel_notify_data" field if the given value is not nil.
func (ru *RefundUpdate) SetNillableChannelNotifyData(s *string) *RefundUpdate {
	if s != nil {
		ru.SetChannelNotifyData(*s)
	}
	return ru
}

// ClearChannelNotifyData clears the value of the "channel_notify_data" field.
func (ru *RefundUpdate) ClearChannelNotifyData() *RefundUpdate {
	ru.mutation.ClearChannelNotifyData()
	return ru
}

// Mutation returns the RefundMutation object of the builder.
func (ru *RefundUpdate) Mutation() *RefundMutation {
	return ru.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ru *RefundUpdate) Save(ctx context.Context) (int, error) {
	if err := ru.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, ru.sqlSave, ru.mutation, ru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ru *RefundUpdate) SaveX(ctx context.Context) int {
	affected, err := ru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ru *RefundUpdate) Exec(ctx context.Context) error {
	_, err := ru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ru *RefundUpdate) ExecX(ctx context.Context) {
	if err := ru.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ru *RefundUpdate) defaults() error {
	if _, ok := ru.mutation.UpdatedAt(); !ok {
		if refund.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized refund.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := refund.UpdateDefaultUpdatedAt()
		ru.mutation.SetUpdatedAt(v)
	}
	return nil
}

func (ru *RefundUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(refund.Table, refund.Columns, sqlgraph.NewFieldSpec(refund.FieldID, field.TypeUint64))
	if ps := ru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ru.mutation.UpdatedAt(); ok {
		_spec.SetField(refund.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ru.mutation.Status(); ok {
		_spec.SetField(refund.FieldStatus, field.TypeUint8, value)
	}
	if value, ok := ru.mutation.AddedStatus(); ok {
		_spec.AddField(refund.FieldStatus, field.TypeUint8, value)
	}
	if ru.mutation.StatusCleared() {
		_spec.ClearField(refund.FieldStatus, field.TypeUint8)
	}
	if value, ok := ru.mutation.DeletedAt(); ok {
		_spec.SetField(refund.FieldDeletedAt, field.TypeTime, value)
	}
	if ru.mutation.DeletedAtCleared() {
		_spec.ClearField(refund.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := ru.mutation.No(); ok {
		_spec.SetField(refund.FieldNo, field.TypeString, value)
	}
	if value, ok := ru.mutation.AppID(); ok {
		_spec.SetField(refund.FieldAppID, field.TypeUint64, value)
	}
	if value, ok := ru.mutation.AddedAppID(); ok {
		_spec.AddField(refund.FieldAppID, field.TypeUint64, value)
	}
	if value, ok := ru.mutation.ChannelID(); ok {
		_spec.SetField(refund.FieldChannelID, field.TypeUint64, value)
	}
	if value, ok := ru.mutation.AddedChannelID(); ok {
		_spec.AddField(refund.FieldChannelID, field.TypeUint64, value)
	}
	if value, ok := ru.mutation.ChannelCode(); ok {
		_spec.SetField(refund.FieldChannelCode, field.TypeString, value)
	}
	if value, ok := ru.mutation.OrderID(); ok {
		_spec.SetField(refund.FieldOrderID, field.TypeUint64, value)
	}
	if value, ok := ru.mutation.AddedOrderID(); ok {
		_spec.AddField(refund.FieldOrderID, field.TypeUint64, value)
	}
	if value, ok := ru.mutation.OrderNo(); ok {
		_spec.SetField(refund.FieldOrderNo, field.TypeString, value)
	}
	if value, ok := ru.mutation.MerchantOrderID(); ok {
		_spec.SetField(refund.FieldMerchantOrderID, field.TypeString, value)
	}
	if value, ok := ru.mutation.MerchantRefundID(); ok {
		_spec.SetField(refund.FieldMerchantRefundID, field.TypeString, value)
	}
	if value, ok := ru.mutation.NotifyURL(); ok {
		_spec.SetField(refund.FieldNotifyURL, field.TypeString, value)
	}
	if value, ok := ru.mutation.PayPrice(); ok {
		_spec.SetField(refund.FieldPayPrice, field.TypeInt32, value)
	}
	if value, ok := ru.mutation.AddedPayPrice(); ok {
		_spec.AddField(refund.FieldPayPrice, field.TypeInt32, value)
	}
	if value, ok := ru.mutation.RefundPrice(); ok {
		_spec.SetField(refund.FieldRefundPrice, field.TypeInt32, value)
	}
	if value, ok := ru.mutation.AddedRefundPrice(); ok {
		_spec.AddField(refund.FieldRefundPrice, field.TypeInt32, value)
	}
	if value, ok := ru.mutation.Reason(); ok {
		_spec.SetField(refund.FieldReason, field.TypeString, value)
	}
	if value, ok := ru.mutation.UserIP(); ok {
		_spec.SetField(refund.FieldUserIP, field.TypeString, value)
	}
	if ru.mutation.UserIPCleared() {
		_spec.ClearField(refund.FieldUserIP, field.TypeString)
	}
	if value, ok := ru.mutation.ChannelOrderNo(); ok {
		_spec.SetField(refund.FieldChannelOrderNo, field.TypeString, value)
	}
	if value, ok := ru.mutation.ChannelRefundNo(); ok {
		_spec.SetField(refund.FieldChannelRefundNo, field.TypeString, value)
	}
	if ru.mutation.ChannelRefundNoCleared() {
		_spec.ClearField(refund.FieldChannelRefundNo, field.TypeString)
	}
	if value, ok := ru.mutation.SuccessTime(); ok {
		_spec.SetField(refund.FieldSuccessTime, field.TypeTime, value)
	}
	if ru.mutation.SuccessTimeCleared() {
		_spec.ClearField(refund.FieldSuccessTime, field.TypeTime)
	}
	if value, ok := ru.mutation.ChannelErrorCode(); ok {
		_spec.SetField(refund.FieldChannelErrorCode, field.TypeString, value)
	}
	if ru.mutation.ChannelErrorCodeCleared() {
		_spec.ClearField(refund.FieldChannelErrorCode, field.TypeString)
	}
	if value, ok := ru.mutation.ChannelErrorMsg(); ok {
		_spec.SetField(refund.FieldChannelErrorMsg, field.TypeString, value)
	}
	if ru.mutation.ChannelErrorMsgCleared() {
		_spec.ClearField(refund.FieldChannelErrorMsg, field.TypeString)
	}
	if value, ok := ru.mutation.ChannelNotifyData(); ok {
		_spec.SetField(refund.FieldChannelNotifyData, field.TypeString, value)
	}
	if ru.mutation.ChannelNotifyDataCleared() {
		_spec.ClearField(refund.FieldChannelNotifyData, field.TypeString)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{refund.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ru.mutation.done = true
	return n, nil
}

// RefundUpdateOne is the builder for updating a single Refund entity.
type RefundUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *RefundMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (ruo *RefundUpdateOne) SetUpdatedAt(t time.Time) *RefundUpdateOne {
	ruo.mutation.SetUpdatedAt(t)
	return ruo
}

// SetStatus sets the "status" field.
func (ruo *RefundUpdateOne) SetStatus(u uint8) *RefundUpdateOne {
	ruo.mutation.ResetStatus()
	ruo.mutation.SetStatus(u)
	return ruo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ruo *RefundUpdateOne) SetNillableStatus(u *uint8) *RefundUpdateOne {
	if u != nil {
		ruo.SetStatus(*u)
	}
	return ruo
}

// AddStatus adds u to the "status" field.
func (ruo *RefundUpdateOne) AddStatus(u int8) *RefundUpdateOne {
	ruo.mutation.AddStatus(u)
	return ruo
}

// ClearStatus clears the value of the "status" field.
func (ruo *RefundUpdateOne) ClearStatus() *RefundUpdateOne {
	ruo.mutation.ClearStatus()
	return ruo
}

// SetDeletedAt sets the "deleted_at" field.
func (ruo *RefundUpdateOne) SetDeletedAt(t time.Time) *RefundUpdateOne {
	ruo.mutation.SetDeletedAt(t)
	return ruo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ruo *RefundUpdateOne) SetNillableDeletedAt(t *time.Time) *RefundUpdateOne {
	if t != nil {
		ruo.SetDeletedAt(*t)
	}
	return ruo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (ruo *RefundUpdateOne) ClearDeletedAt() *RefundUpdateOne {
	ruo.mutation.ClearDeletedAt()
	return ruo
}

// SetNo sets the "no" field.
func (ruo *RefundUpdateOne) SetNo(s string) *RefundUpdateOne {
	ruo.mutation.SetNo(s)
	return ruo
}

// SetNillableNo sets the "no" field if the given value is not nil.
func (ruo *RefundUpdateOne) SetNillableNo(s *string) *RefundUpdateOne {
	if s != nil {
		ruo.SetNo(*s)
	}
	return ruo
}

// SetAppID sets the "app_id" field.
func (ruo *RefundUpdateOne) SetAppID(u uint64) *RefundUpdateOne {
	ruo.mutation.ResetAppID()
	ruo.mutation.SetAppID(u)
	return ruo
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (ruo *RefundUpdateOne) SetNillableAppID(u *uint64) *RefundUpdateOne {
	if u != nil {
		ruo.SetAppID(*u)
	}
	return ruo
}

// AddAppID adds u to the "app_id" field.
func (ruo *RefundUpdateOne) AddAppID(u int64) *RefundUpdateOne {
	ruo.mutation.AddAppID(u)
	return ruo
}

// SetChannelID sets the "channel_id" field.
func (ruo *RefundUpdateOne) SetChannelID(u uint64) *RefundUpdateOne {
	ruo.mutation.ResetChannelID()
	ruo.mutation.SetChannelID(u)
	return ruo
}

// SetNillableChannelID sets the "channel_id" field if the given value is not nil.
func (ruo *RefundUpdateOne) SetNillableChannelID(u *uint64) *RefundUpdateOne {
	if u != nil {
		ruo.SetChannelID(*u)
	}
	return ruo
}

// AddChannelID adds u to the "channel_id" field.
func (ruo *RefundUpdateOne) AddChannelID(u int64) *RefundUpdateOne {
	ruo.mutation.AddChannelID(u)
	return ruo
}

// SetChannelCode sets the "channel_code" field.
func (ruo *RefundUpdateOne) SetChannelCode(s string) *RefundUpdateOne {
	ruo.mutation.SetChannelCode(s)
	return ruo
}

// SetNillableChannelCode sets the "channel_code" field if the given value is not nil.
func (ruo *RefundUpdateOne) SetNillableChannelCode(s *string) *RefundUpdateOne {
	if s != nil {
		ruo.SetChannelCode(*s)
	}
	return ruo
}

// SetOrderID sets the "order_id" field.
func (ruo *RefundUpdateOne) SetOrderID(u uint64) *RefundUpdateOne {
	ruo.mutation.ResetOrderID()
	ruo.mutation.SetOrderID(u)
	return ruo
}

// SetNillableOrderID sets the "order_id" field if the given value is not nil.
func (ruo *RefundUpdateOne) SetNillableOrderID(u *uint64) *RefundUpdateOne {
	if u != nil {
		ruo.SetOrderID(*u)
	}
	return ruo
}

// AddOrderID adds u to the "order_id" field.
func (ruo *RefundUpdateOne) AddOrderID(u int64) *RefundUpdateOne {
	ruo.mutation.AddOrderID(u)
	return ruo
}

// SetOrderNo sets the "order_no" field.
func (ruo *RefundUpdateOne) SetOrderNo(s string) *RefundUpdateOne {
	ruo.mutation.SetOrderNo(s)
	return ruo
}

// SetNillableOrderNo sets the "order_no" field if the given value is not nil.
func (ruo *RefundUpdateOne) SetNillableOrderNo(s *string) *RefundUpdateOne {
	if s != nil {
		ruo.SetOrderNo(*s)
	}
	return ruo
}

// SetMerchantOrderID sets the "merchant_order_id" field.
func (ruo *RefundUpdateOne) SetMerchantOrderID(s string) *RefundUpdateOne {
	ruo.mutation.SetMerchantOrderID(s)
	return ruo
}

// SetNillableMerchantOrderID sets the "merchant_order_id" field if the given value is not nil.
func (ruo *RefundUpdateOne) SetNillableMerchantOrderID(s *string) *RefundUpdateOne {
	if s != nil {
		ruo.SetMerchantOrderID(*s)
	}
	return ruo
}

// SetMerchantRefundID sets the "merchant_refund_id" field.
func (ruo *RefundUpdateOne) SetMerchantRefundID(s string) *RefundUpdateOne {
	ruo.mutation.SetMerchantRefundID(s)
	return ruo
}

// SetNillableMerchantRefundID sets the "merchant_refund_id" field if the given value is not nil.
func (ruo *RefundUpdateOne) SetNillableMerchantRefundID(s *string) *RefundUpdateOne {
	if s != nil {
		ruo.SetMerchantRefundID(*s)
	}
	return ruo
}

// SetNotifyURL sets the "notify_url" field.
func (ruo *RefundUpdateOne) SetNotifyURL(s string) *RefundUpdateOne {
	ruo.mutation.SetNotifyURL(s)
	return ruo
}

// SetNillableNotifyURL sets the "notify_url" field if the given value is not nil.
func (ruo *RefundUpdateOne) SetNillableNotifyURL(s *string) *RefundUpdateOne {
	if s != nil {
		ruo.SetNotifyURL(*s)
	}
	return ruo
}

// SetPayPrice sets the "pay_price" field.
func (ruo *RefundUpdateOne) SetPayPrice(i int32) *RefundUpdateOne {
	ruo.mutation.ResetPayPrice()
	ruo.mutation.SetPayPrice(i)
	return ruo
}

// SetNillablePayPrice sets the "pay_price" field if the given value is not nil.
func (ruo *RefundUpdateOne) SetNillablePayPrice(i *int32) *RefundUpdateOne {
	if i != nil {
		ruo.SetPayPrice(*i)
	}
	return ruo
}

// AddPayPrice adds i to the "pay_price" field.
func (ruo *RefundUpdateOne) AddPayPrice(i int32) *RefundUpdateOne {
	ruo.mutation.AddPayPrice(i)
	return ruo
}

// SetRefundPrice sets the "refund_price" field.
func (ruo *RefundUpdateOne) SetRefundPrice(i int32) *RefundUpdateOne {
	ruo.mutation.ResetRefundPrice()
	ruo.mutation.SetRefundPrice(i)
	return ruo
}

// SetNillableRefundPrice sets the "refund_price" field if the given value is not nil.
func (ruo *RefundUpdateOne) SetNillableRefundPrice(i *int32) *RefundUpdateOne {
	if i != nil {
		ruo.SetRefundPrice(*i)
	}
	return ruo
}

// AddRefundPrice adds i to the "refund_price" field.
func (ruo *RefundUpdateOne) AddRefundPrice(i int32) *RefundUpdateOne {
	ruo.mutation.AddRefundPrice(i)
	return ruo
}

// SetReason sets the "reason" field.
func (ruo *RefundUpdateOne) SetReason(s string) *RefundUpdateOne {
	ruo.mutation.SetReason(s)
	return ruo
}

// SetNillableReason sets the "reason" field if the given value is not nil.
func (ruo *RefundUpdateOne) SetNillableReason(s *string) *RefundUpdateOne {
	if s != nil {
		ruo.SetReason(*s)
	}
	return ruo
}

// SetUserIP sets the "user_ip" field.
func (ruo *RefundUpdateOne) SetUserIP(s string) *RefundUpdateOne {
	ruo.mutation.SetUserIP(s)
	return ruo
}

// SetNillableUserIP sets the "user_ip" field if the given value is not nil.
func (ruo *RefundUpdateOne) SetNillableUserIP(s *string) *RefundUpdateOne {
	if s != nil {
		ruo.SetUserIP(*s)
	}
	return ruo
}

// ClearUserIP clears the value of the "user_ip" field.
func (ruo *RefundUpdateOne) ClearUserIP() *RefundUpdateOne {
	ruo.mutation.ClearUserIP()
	return ruo
}

// SetChannelOrderNo sets the "channel_order_no" field.
func (ruo *RefundUpdateOne) SetChannelOrderNo(s string) *RefundUpdateOne {
	ruo.mutation.SetChannelOrderNo(s)
	return ruo
}

// SetNillableChannelOrderNo sets the "channel_order_no" field if the given value is not nil.
func (ruo *RefundUpdateOne) SetNillableChannelOrderNo(s *string) *RefundUpdateOne {
	if s != nil {
		ruo.SetChannelOrderNo(*s)
	}
	return ruo
}

// SetChannelRefundNo sets the "channel_refund_no" field.
func (ruo *RefundUpdateOne) SetChannelRefundNo(s string) *RefundUpdateOne {
	ruo.mutation.SetChannelRefundNo(s)
	return ruo
}

// SetNillableChannelRefundNo sets the "channel_refund_no" field if the given value is not nil.
func (ruo *RefundUpdateOne) SetNillableChannelRefundNo(s *string) *RefundUpdateOne {
	if s != nil {
		ruo.SetChannelRefundNo(*s)
	}
	return ruo
}

// ClearChannelRefundNo clears the value of the "channel_refund_no" field.
func (ruo *RefundUpdateOne) ClearChannelRefundNo() *RefundUpdateOne {
	ruo.mutation.ClearChannelRefundNo()
	return ruo
}

// SetSuccessTime sets the "success_time" field.
func (ruo *RefundUpdateOne) SetSuccessTime(t time.Time) *RefundUpdateOne {
	ruo.mutation.SetSuccessTime(t)
	return ruo
}

// SetNillableSuccessTime sets the "success_time" field if the given value is not nil.
func (ruo *RefundUpdateOne) SetNillableSuccessTime(t *time.Time) *RefundUpdateOne {
	if t != nil {
		ruo.SetSuccessTime(*t)
	}
	return ruo
}

// ClearSuccessTime clears the value of the "success_time" field.
func (ruo *RefundUpdateOne) ClearSuccessTime() *RefundUpdateOne {
	ruo.mutation.ClearSuccessTime()
	return ruo
}

// SetChannelErrorCode sets the "channel_error_code" field.
func (ruo *RefundUpdateOne) SetChannelErrorCode(s string) *RefundUpdateOne {
	ruo.mutation.SetChannelErrorCode(s)
	return ruo
}

// SetNillableChannelErrorCode sets the "channel_error_code" field if the given value is not nil.
func (ruo *RefundUpdateOne) SetNillableChannelErrorCode(s *string) *RefundUpdateOne {
	if s != nil {
		ruo.SetChannelErrorCode(*s)
	}
	return ruo
}

// ClearChannelErrorCode clears the value of the "channel_error_code" field.
func (ruo *RefundUpdateOne) ClearChannelErrorCode() *RefundUpdateOne {
	ruo.mutation.ClearChannelErrorCode()
	return ruo
}

// SetChannelErrorMsg sets the "channel_error_msg" field.
func (ruo *RefundUpdateOne) SetChannelErrorMsg(s string) *RefundUpdateOne {
	ruo.mutation.SetChannelErrorMsg(s)
	return ruo
}

// SetNillableChannelErrorMsg sets the "channel_error_msg" field if the given value is not nil.
func (ruo *RefundUpdateOne) SetNillableChannelErrorMsg(s *string) *RefundUpdateOne {
	if s != nil {
		ruo.SetChannelErrorMsg(*s)
	}
	return ruo
}

// ClearChannelErrorMsg clears the value of the "channel_error_msg" field.
func (ruo *RefundUpdateOne) ClearChannelErrorMsg() *RefundUpdateOne {
	ruo.mutation.ClearChannelErrorMsg()
	return ruo
}

// SetChannelNotifyData sets the "channel_notify_data" field.
func (ruo *RefundUpdateOne) SetChannelNotifyData(s string) *RefundUpdateOne {
	ruo.mutation.SetChannelNotifyData(s)
	return ruo
}

// SetNillableChannelNotifyData sets the "channel_notify_data" field if the given value is not nil.
func (ruo *RefundUpdateOne) SetNillableChannelNotifyData(s *string) *RefundUpdateOne {
	if s != nil {
		ruo.SetChannelNotifyData(*s)
	}
	return ruo
}

// ClearChannelNotifyData clears the value of the "channel_notify_data" field.
func (ruo *RefundUpdateOne) ClearChannelNotifyData() *RefundUpdateOne {
	ruo.mutation.ClearChannelNotifyData()
	return ruo
}

// Mutation returns the RefundMutation object of the builder.
func (ruo *RefundUpdateOne) Mutation() *RefundMutation {
	return ruo.mutation
}

// Where appends a list predicates to the RefundUpdate builder.
func (ruo *RefundUpdateOne) Where(ps ...predicate.Refund) *RefundUpdateOne {
	ruo.mutation.Where(ps...)
	return ruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ruo *RefundUpdateOne) Select(field string, fields ...string) *RefundUpdateOne {
	ruo.fields = append([]string{field}, fields...)
	return ruo
}

// Save executes the query and returns the updated Refund entity.
func (ruo *RefundUpdateOne) Save(ctx context.Context) (*Refund, error) {
	if err := ruo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, ruo.sqlSave, ruo.mutation, ruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ruo *RefundUpdateOne) SaveX(ctx context.Context) *Refund {
	node, err := ruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ruo *RefundUpdateOne) Exec(ctx context.Context) error {
	_, err := ruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ruo *RefundUpdateOne) ExecX(ctx context.Context) {
	if err := ruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ruo *RefundUpdateOne) defaults() error {
	if _, ok := ruo.mutation.UpdatedAt(); !ok {
		if refund.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized refund.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := refund.UpdateDefaultUpdatedAt()
		ruo.mutation.SetUpdatedAt(v)
	}
	return nil
}

func (ruo *RefundUpdateOne) sqlSave(ctx context.Context) (_node *Refund, err error) {
	_spec := sqlgraph.NewUpdateSpec(refund.Table, refund.Columns, sqlgraph.NewFieldSpec(refund.FieldID, field.TypeUint64))
	id, ok := ruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Refund.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, refund.FieldID)
		for _, f := range fields {
			if !refund.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != refund.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ruo.mutation.UpdatedAt(); ok {
		_spec.SetField(refund.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ruo.mutation.Status(); ok {
		_spec.SetField(refund.FieldStatus, field.TypeUint8, value)
	}
	if value, ok := ruo.mutation.AddedStatus(); ok {
		_spec.AddField(refund.FieldStatus, field.TypeUint8, value)
	}
	if ruo.mutation.StatusCleared() {
		_spec.ClearField(refund.FieldStatus, field.TypeUint8)
	}
	if value, ok := ruo.mutation.DeletedAt(); ok {
		_spec.SetField(refund.FieldDeletedAt, field.TypeTime, value)
	}
	if ruo.mutation.DeletedAtCleared() {
		_spec.ClearField(refund.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := ruo.mutation.No(); ok {
		_spec.SetField(refund.FieldNo, field.TypeString, value)
	}
	if value, ok := ruo.mutation.AppID(); ok {
		_spec.SetField(refund.FieldAppID, field.TypeUint64, value)
	}
	if value, ok := ruo.mutation.AddedAppID(); ok {
		_spec.AddField(refund.FieldAppID, field.TypeUint64, value)
	}
	if value, ok := ruo.mutation.ChannelID(); ok {
		_spec.SetField(refund.FieldChannelID, field.TypeUint64, value)
	}
	if value, ok := ruo.mutation.AddedChannelID(); ok {
		_spec.AddField(refund.FieldChannelID, field.TypeUint64, value)
	}
	if value, ok := ruo.mutation.ChannelCode(); ok {
		_spec.SetField(refund.FieldChannelCode, field.TypeString, value)
	}
	if value, ok := ruo.mutation.OrderID(); ok {
		_spec.SetField(refund.FieldOrderID, field.TypeUint64, value)
	}
	if value, ok := ruo.mutation.AddedOrderID(); ok {
		_spec.AddField(refund.FieldOrderID, field.TypeUint64, value)
	}
	if value, ok := ruo.mutation.OrderNo(); ok {
		_spec.SetField(refund.FieldOrderNo, field.TypeString, value)
	}
	if value, ok := ruo.mutation.MerchantOrderID(); ok {
		_spec.SetField(refund.FieldMerchantOrderID, field.TypeString, value)
	}
	if value, ok := ruo.mutation.MerchantRefundID(); ok {
		_spec.SetField(refund.FieldMerchantRefundID, field.TypeString, value)
	}
	if value, ok := ruo.mutation.NotifyURL(); ok {
		_spec.SetField(refund.FieldNotifyURL, field.TypeString, value)
	}
	if value, ok := ruo.mutation.PayPrice(); ok {
		_spec.SetField(refund.FieldPayPrice, field.TypeInt32, value)
	}
	if value, ok := ruo.mutation.AddedPayPrice(); ok {
		_spec.AddField(refund.FieldPayPrice, field.TypeInt32, value)
	}
	if value, ok := ruo.mutation.RefundPrice(); ok {
		_spec.SetField(refund.FieldRefundPrice, field.TypeInt32, value)
	}
	if value, ok := ruo.mutation.AddedRefundPrice(); ok {
		_spec.AddField(refund.FieldRefundPrice, field.TypeInt32, value)
	}
	if value, ok := ruo.mutation.Reason(); ok {
		_spec.SetField(refund.FieldReason, field.TypeString, value)
	}
	if value, ok := ruo.mutation.UserIP(); ok {
		_spec.SetField(refund.FieldUserIP, field.TypeString, value)
	}
	if ruo.mutation.UserIPCleared() {
		_spec.ClearField(refund.FieldUserIP, field.TypeString)
	}
	if value, ok := ruo.mutation.ChannelOrderNo(); ok {
		_spec.SetField(refund.FieldChannelOrderNo, field.TypeString, value)
	}
	if value, ok := ruo.mutation.ChannelRefundNo(); ok {
		_spec.SetField(refund.FieldChannelRefundNo, field.TypeString, value)
	}
	if ruo.mutation.ChannelRefundNoCleared() {
		_spec.ClearField(refund.FieldChannelRefundNo, field.TypeString)
	}
	if value, ok := ruo.mutation.SuccessTime(); ok {
		_spec.SetField(refund.FieldSuccessTime, field.TypeTime, value)
	}
	if ruo.mutation.SuccessTimeCleared() {
		_spec.ClearField(refund.FieldSuccessTime, field.TypeTime)
	}
	if value, ok := ruo.mutation.ChannelErrorCode(); ok {
		_spec.SetField(refund.FieldChannelErrorCode, field.TypeString, value)
	}
	if ruo.mutation.ChannelErrorCodeCleared() {
		_spec.ClearField(refund.FieldChannelErrorCode, field.TypeString)
	}
	if value, ok := ruo.mutation.ChannelErrorMsg(); ok {
		_spec.SetField(refund.FieldChannelErrorMsg, field.TypeString, value)
	}
	if ruo.mutation.ChannelErrorMsgCleared() {
		_spec.ClearField(refund.FieldChannelErrorMsg, field.TypeString)
	}
	if value, ok := ruo.mutation.ChannelNotifyData(); ok {
		_spec.SetField(refund.FieldChannelNotifyData, field.TypeString, value)
	}
	if ruo.mutation.ChannelNotifyDataCleared() {
		_spec.ClearField(refund.FieldChannelNotifyData, field.TypeString)
	}
	_node = &Refund{config: ruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{refund.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ruo.mutation.done = true
	return _node, nil
}

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"
	"reflect"

	"github.com/agui-coder/simple-admin-pay-rpc/ent/migrate"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"github.com/agui-coder/simple-admin-pay-rpc/ent/app"
	"github.com/agui-coder/simple-admin-pay-rpc/ent/channel"
	"github.com/agui-coder/simple-admin-pay-rpc/ent/demoorder"
	"github.com/agui-coder/simple-admin-pay-rpc/ent/notifylog"
	"github.com/agui-coder/simple-admin-pay-rpc/ent/notifytask"
	"github.com/agui-coder/simple-admin-pay-rpc/ent/order"
	"github.com/agui-coder/simple-admin-pay-rpc/ent/orderextension"
	"github.com/agui-coder/simple-admin-pay-rpc/ent/refund"

	stdsql "database/sql"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// App is the client for interacting with the App builders.
	App *AppClient
	// Channel is the client for interacting with the Channel builders.
	Channel *ChannelClient
	// DemoOrder is the client for interacting with the DemoOrder builders.
	DemoOrder *DemoOrderClient
	// NotifyLog is the client for interacting with the NotifyLog builders.
	NotifyLog *NotifyLogClient
	// NotifyTask is the client for interacting with the NotifyTask builders.
	NotifyTask *NotifyTaskClient
	// Order is the client for interacting with the Order builders.
	Order *OrderClient
	// OrderExtension is the client for interacting with the OrderExtension builders.
	OrderExtension *OrderExtensionClient
	// Refund is the client for interacting with the Refund builders.
	Refund *RefundClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	client := &Client{config: newConfig(opts...)}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.App = NewAppClient(c.config)
	c.Channel = NewChannelClient(c.config)
	c.DemoOrder = NewDemoOrderClient(c.config)
	c.NotifyLog = NewNotifyLogClient(c.config)
	c.NotifyTask = NewNotifyTaskClient(c.config)
	c.Order = NewOrderClient(c.config)
	c.OrderExtension = NewOrderExtensionClient(c.config)
	c.Refund = NewRefundClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// newConfig creates a new config for the client.
func newConfig(opts ...Option) config {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	return cfg
}

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// ErrTxStarted is returned when trying to start a new transaction from a transactional client.
var ErrTxStarted = errors.New("ent: cannot start a transaction within a transaction")

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, ErrTxStarted
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:            ctx,
		config:         cfg,
		App:            NewAppClient(cfg),
		Channel:        NewChannelClient(cfg),
		DemoOrder:      NewDemoOrderClient(cfg),
		NotifyLog:      NewNotifyLogClient(cfg),
		NotifyTask:     NewNotifyTaskClient(cfg),
		Order:          NewOrderClient(cfg),
		OrderExtension: NewOrderExtensionClient(cfg),
		Refund:         NewRefundClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:            ctx,
		config:         cfg,
		App:            NewAppClient(cfg),
		Channel:        NewChannelClient(cfg),
		DemoOrder:      NewDemoOrderClient(cfg),
		NotifyLog:      NewNotifyLogClient(cfg),
		NotifyTask:     NewNotifyTaskClient(cfg),
		Order:          NewOrderClient(cfg),
		OrderExtension: NewOrderExtensionClient(cfg),
		Refund:         NewRefundClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		App.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	for _, n := range []interface{ Use(...Hook) }{
		c.App, c.Channel, c.DemoOrder, c.NotifyLog, c.NotifyTask, c.Order,
		c.OrderExtension, c.Refund,
	} {
		n.Use(hooks...)
	}
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	for _, n := range []interface{ Intercept(...Interceptor) }{
		c.App, c.Channel, c.DemoOrder, c.NotifyLog, c.NotifyTask, c.Order,
		c.OrderExtension, c.Refund,
	} {
		n.Intercept(interceptors...)
	}
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *AppMutation:
		return c.App.mutate(ctx, m)
	case *ChannelMutation:
		return c.Channel.mutate(ctx, m)
	case *DemoOrderMutation:
		return c.DemoOrder.mutate(ctx, m)
	case *NotifyLogMutation:
		return c.NotifyLog.mutate(ctx, m)
	case *NotifyTaskMutation:
		return c.NotifyTask.mutate(ctx, m)
	case *OrderMutation:
		return c.Order.mutate(ctx, m)
	case *OrderExtensionMutation:
		return c.OrderExtension.mutate(ctx, m)
	case *RefundMutation:
		return c.Refund.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// AppClient is a client for the App schema.
type AppClient struct {
	config
}

// NewAppClient returns a client for the App from the given config.
func NewAppClient(c config) *AppClient {
	return &AppClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `app.Hooks(f(g(h())))`.
func (c *AppClient) Use(hooks ...Hook) {
	c.hooks.App = append(c.hooks.App, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `app.Intercept(f(g(h())))`.
func (c *AppClient) Intercept(interceptors ...Interceptor) {
	c.inters.App = append(c.inters.App, interceptors...)
}

// Create returns a builder for creating a App entity.
func (c *AppClient) Create() *AppCreate {
	mutation := newAppMutation(c.config, OpCreate)
	return &AppCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of App entities.
func (c *AppClient) CreateBulk(builders ...*AppCreate) *AppCreateBulk {
	return &AppCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *AppClient) MapCreateBulk(slice any, setFunc func(*AppCreate, int)) *AppCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &AppCreateBulk{err: fmt.Errorf("calling to AppClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*AppCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &AppCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for App.
func (c *AppClient) Update() *AppUpdate {
	mutation := newAppMutation(c.config, OpUpdate)
	return &AppUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AppClient) UpdateOne(a *App) *AppUpdateOne {
	mutation := newAppMutation(c.config, OpUpdateOne, withApp(a))
	return &AppUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AppClient) UpdateOneID(id uint64) *AppUpdateOne {
	mutation := newAppMutation(c.config, OpUpdateOne, withAppID(id))
	return &AppUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for App.
func (c *AppClient) Delete() *AppDelete {
	mutation := newAppMutation(c.config, OpDelete)
	return &AppDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *AppClient) DeleteOne(a *App) *AppDeleteOne {
	return c.DeleteOneID(a.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *AppClient) DeleteOneID(id uint64) *AppDeleteOne {
	builder := c.Delete().Where(app.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AppDeleteOne{builder}
}

// Query returns a query builder for App.
func (c *AppClient) Query() *AppQuery {
	return &AppQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeApp},
		inters: c.Interceptors(),
	}
}

// Get returns a App entity by its id.
func (c *AppClient) Get(ctx context.Context, id uint64) (*App, error) {
	return c.Query().Where(app.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AppClient) GetX(ctx context.Context, id uint64) *App {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *AppClient) Hooks() []Hook {
	hooks := c.hooks.App
	return append(hooks[:len(hooks):len(hooks)], app.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *AppClient) Interceptors() []Interceptor {
	inters := c.inters.App
	return append(inters[:len(inters):len(inters)], app.Interceptors[:]...)
}

func (c *AppClient) mutate(ctx context.Context, m *AppMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&AppCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&AppUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&AppUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&AppDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown App mutation op: %q", m.Op())
	}
}

// ChannelClient is a client for the Channel schema.
type ChannelClient struct {
	config
}

// NewChannelClient returns a client for the Channel from the given config.
func NewChannelClient(c config) *ChannelClient {
	return &ChannelClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `channel.Hooks(f(g(h())))`.
func (c *ChannelClient) Use(hooks ...Hook) {
	c.hooks.Channel = append(c.hooks.Channel, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `channel.Intercept(f(g(h())))`.
func (c *ChannelClient) Intercept(interceptors ...Interceptor) {
	c.inters.Channel = append(c.inters.Channel, interceptors...)
}

// Create returns a builder for creating a Channel entity.
func (c *ChannelClient) Create() *ChannelCreate {
	mutation := newChannelMutation(c.config, OpCreate)
	return &ChannelCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Channel entities.
func (c *ChannelClient) CreateBulk(builders ...*ChannelCreate) *ChannelCreateBulk {
	return &ChannelCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ChannelClient) MapCreateBulk(slice any, setFunc func(*ChannelCreate, int)) *ChannelCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ChannelCreateBulk{err: fmt.Errorf("calling to ChannelClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ChannelCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ChannelCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Channel.
func (c *ChannelClient) Update() *ChannelUpdate {
	mutation := newChannelMutation(c.config, OpUpdate)
	return &ChannelUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ChannelClient) UpdateOne(ch *Channel) *ChannelUpdateOne {
	mutation := newChannelMutation(c.config, OpUpdateOne, withChannel(ch))
	return &ChannelUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ChannelClient) UpdateOneID(id uint64) *ChannelUpdateOne {
	mutation := newChannelMutation(c.config, OpUpdateOne, withChannelID(id))
	return &ChannelUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Channel.
func (c *ChannelClient) Delete() *ChannelDelete {
	mutation := newChannelMutation(c.config, OpDelete)
	return &ChannelDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ChannelClient) DeleteOne(ch *Channel) *ChannelDeleteOne {
	return c.DeleteOneID(ch.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ChannelClient) DeleteOneID(id uint64) *ChannelDeleteOne {
	builder := c.Delete().Where(channel.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ChannelDeleteOne{builder}
}

// Query returns a query builder for Channel.
func (c *ChannelClient) Query() *ChannelQuery {
	return &ChannelQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeChannel},
		inters: c.Interceptors(),
	}
}

// Get returns a Channel entity by its id.
func (c *ChannelClient) Get(ctx context.Context, id uint64) (*Channel, error) {
	return c.Query().Where(channel.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ChannelClient) GetX(ctx context.Context, id uint64) *Channel {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *ChannelClient) Hooks() []Hook {
	hooks := c.hooks.Channel
	return append(hooks[:len(hooks):len(hooks)], channel.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *ChannelClient) Interceptors() []Interceptor {
	inters := c.inters.Channel
	return append(inters[:len(inters):len(inters)], channel.Interceptors[:]...)
}

func (c *ChannelClient) mutate(ctx context.Context, m *ChannelMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ChannelCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ChannelUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ChannelUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ChannelDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Channel mutation op: %q", m.Op())
	}
}

// DemoOrderClient is a client for the DemoOrder schema.
type DemoOrderClient struct {
	config
}

// NewDemoOrderClient returns a client for the DemoOrder from the given config.
func NewDemoOrderClient(c config) *DemoOrderClient {
	return &DemoOrderClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `demoorder.Hooks(f(g(h())))`.
func (c *DemoOrderClient) Use(hooks ...Hook) {
	c.hooks.DemoOrder = append(c.hooks.DemoOrder, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `demoorder.Intercept(f(g(h())))`.
func (c *DemoOrderClient) Intercept(interceptors ...Interceptor) {
	c.inters.DemoOrder = append(c.inters.DemoOrder, interceptors...)
}

// Create returns a builder for creating a DemoOrder entity.
func (c *DemoOrderClient) Create() *DemoOrderCreate {
	mutation := newDemoOrderMutation(c.config, OpCreate)
	return &DemoOrderCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of DemoOrder entities.
func (c *DemoOrderClient) CreateBulk(builders ...*DemoOrderCreate) *DemoOrderCreateBulk {
	return &DemoOrderCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *DemoOrderClient) MapCreateBulk(slice any, setFunc func(*DemoOrderCreate, int)) *DemoOrderCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &DemoOrderCreateBulk{err: fmt.Errorf("calling to DemoOrderClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*DemoOrderCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &DemoOrderCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for DemoOrder.
func (c *DemoOrderClient) Update() *DemoOrderUpdate {
	mutation := newDemoOrderMutation(c.config, OpUpdate)
	return &DemoOrderUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *DemoOrderClient) UpdateOne(do *DemoOrder) *DemoOrderUpdateOne {
	mutation := newDemoOrderMutation(c.config, OpUpdateOne, withDemoOrder(do))
	return &DemoOrderUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *DemoOrderClient) UpdateOneID(id uint64) *DemoOrderUpdateOne {
	mutation := newDemoOrderMutation(c.config, OpUpdateOne, withDemoOrderID(id))
	return &DemoOrderUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for DemoOrder.
func (c *DemoOrderClient) Delete() *DemoOrderDelete {
	mutation := newDemoOrderMutation(c.config, OpDelete)
	return &DemoOrderDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *DemoOrderClient) DeleteOne(do *DemoOrder) *DemoOrderDeleteOne {
	return c.DeleteOneID(do.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *DemoOrderClient) DeleteOneID(id uint64) *DemoOrderDeleteOne {
	builder := c.Delete().Where(demoorder.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &DemoOrderDeleteOne{builder}
}

// Query returns a query builder for DemoOrder.
func (c *DemoOrderClient) Query() *DemoOrderQuery {
	return &DemoOrderQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeDemoOrder},
		inters: c.Interceptors(),
	}
}

// Get returns a DemoOrder entity by its id.
func (c *DemoOrderClient) Get(ctx context.Context, id uint64) (*DemoOrder, error) {
	return c.Query().Where(demoorder.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *DemoOrderClient) GetX(ctx context.Context, id uint64) *DemoOrder {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *DemoOrderClient) Hooks() []Hook {
	hooks := c.hooks.DemoOrder
	return append(hooks[:len(hooks):len(hooks)], demoorder.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *DemoOrderClient) Interceptors() []Interceptor {
	inters := c.inters.DemoOrder
	return append(inters[:len(inters):len(inters)], demoorder.Interceptors[:]...)
}

func (c *DemoOrderClient) mutate(ctx context.Context, m *DemoOrderMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&DemoOrderCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&DemoOrderUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&DemoOrderUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&DemoOrderDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown DemoOrder mutation op: %q", m.Op())
	}
}

// NotifyLogClient is a client for the NotifyLog schema.
type NotifyLogClient struct {
	config
}

// NewNotifyLogClient returns a client for the NotifyLog from the given config.
func NewNotifyLogClient(c config) *NotifyLogClient {
	return &NotifyLogClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `notifylog.Hooks(f(g(h())))`.
func (c *NotifyLogClient) Use(hooks ...Hook) {
	c.hooks.NotifyLog = append(c.hooks.NotifyLog, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `notifylog.Intercept(f(g(h())))`.
func (c *NotifyLogClient) Intercept(interceptors ...Interceptor) {
	c.inters.NotifyLog = append(c.inters.NotifyLog, interceptors...)
}

// Create returns a builder for creating a NotifyLog entity.
func (c *NotifyLogClient) Create() *NotifyLogCreate {
	mutation := newNotifyLogMutation(c.config, OpCreate)
	return &NotifyLogCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of NotifyLog entities.
func (c *NotifyLogClient) CreateBulk(builders ...*NotifyLogCreate) *NotifyLogCreateBulk {
	return &NotifyLogCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *NotifyLogClient) MapCreateBulk(slice any, setFunc func(*NotifyLogCreate, int)) *NotifyLogCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &NotifyLogCreateBulk{err: fmt.Errorf("calling to NotifyLogClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*NotifyLogCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &NotifyLogCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for NotifyLog.
func (c *NotifyLogClient) Update() *NotifyLogUpdate {
	mutation := newNotifyLogMutation(c.config, OpUpdate)
	return &NotifyLogUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *NotifyLogClient) UpdateOne(nl *NotifyLog) *NotifyLogUpdateOne {
	mutation := newNotifyLogMutation(c.config, OpUpdateOne, withNotifyLog(nl))
	return &NotifyLogUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *NotifyLogClient) UpdateOneID(id uint64) *NotifyLogUpdateOne {
	mutation := newNotifyLogMutation(c.config, OpUpdateOne, withNotifyLogID(id))
	return &NotifyLogUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for NotifyLog.
func (c *NotifyLogClient) Delete() *NotifyLogDelete {
	mutation := newNotifyLogMutation(c.config, OpDelete)
	return &NotifyLogDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *NotifyLogClient) DeleteOne(nl *NotifyLog) *NotifyLogDeleteOne {
	return c.DeleteOneID(nl.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *NotifyLogClient) DeleteOneID(id uint64) *NotifyLogDeleteOne {
	builder := c.Delete().Where(notifylog.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &NotifyLogDeleteOne{builder}
}

// Query returns a query builder for NotifyLog.
func (c *NotifyLogClient) Query() *NotifyLogQuery {
	return &NotifyLogQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeNotifyLog},
		inters: c.Interceptors(),
	}
}

// Get returns a NotifyLog entity by its id.
func (c *NotifyLogClient) Get(ctx context.Context, id uint64) (*NotifyLog, error) {
	return c.Query().Where(notifylog.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *NotifyLogClient) GetX(ctx context.Context, id uint64) *NotifyLog {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *NotifyLogClient) Hooks() []Hook {
	hooks := c.hooks.NotifyLog
	return append(hooks[:len(hooks):len(hooks)], notifylog.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *NotifyLogClient) Interceptors() []Interceptor {
	inters := c.inters.NotifyLog
	return append(inters[:len(inters):len(inters)], notifylog.Interceptors[:]...)
}

func (c *NotifyLogClient) mutate(ctx context.Context, m *NotifyLogMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&NotifyLogCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&NotifyLogUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&NotifyLogUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&NotifyLogDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown NotifyLog mutation op: %q", m.Op())
	}
}

// NotifyTaskClient is a client for the NotifyTask schema.
type NotifyTaskClient struct {
	config
}

// NewNotifyTaskClient returns a client for the NotifyTask from the given config.
func NewNotifyTaskClient(c config) *NotifyTaskClient {
	return &NotifyTaskClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `notifytask.Hooks(f(g(h())))`.
func (c *NotifyTaskClient) Use(hooks ...Hook) {
	c.hooks.NotifyTask = append(c.hooks.NotifyTask, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `notifytask.Intercept(f(g(h())))`.
func (c *NotifyTaskClient) Intercept(interceptors ...Interceptor) {
	c.inters.NotifyTask = append(c.inters.NotifyTask, interceptors...)
}

// Create returns a builder for creating a NotifyTask entity.
func (c *NotifyTaskClient) Create() *NotifyTaskCreate {
	mutation := newNotifyTaskMutation(c.config, OpCreate)
	return &NotifyTaskCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of NotifyTask entities.
func (c *NotifyTaskClient) CreateBulk(builders ...*NotifyTaskCreate) *NotifyTaskCreateBulk {
	return &NotifyTaskCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *NotifyTaskClient) MapCreateBulk(slice any, setFunc func(*NotifyTaskCreate, int)) *NotifyTaskCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &NotifyTaskCreateBulk{err: fmt.Errorf("calling to NotifyTaskClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*NotifyTaskCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &NotifyTaskCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for NotifyTask.
func (c *NotifyTaskClient) Update() *NotifyTaskUpdate {
	mutation := newNotifyTaskMutation(c.config, OpUpdate)
	return &NotifyTaskUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *NotifyTaskClient) UpdateOne(nt *NotifyTask) *NotifyTaskUpdateOne {
	mutation := newNotifyTaskMutation(c.config, OpUpdateOne, withNotifyTask(nt))
	return &NotifyTaskUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *NotifyTaskClient) UpdateOneID(id uint64) *NotifyTaskUpdateOne {
	mutation := newNotifyTaskMutation(c.config, OpUpdateOne, withNotifyTaskID(id))
	return &NotifyTaskUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for NotifyTask.
func (c *NotifyTaskClient) Delete() *NotifyTaskDelete {
	mutation := newNotifyTaskMutation(c.config, OpDelete)
	return &NotifyTaskDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *NotifyTaskClient) DeleteOne(nt *NotifyTask) *NotifyTaskDeleteOne {
	return c.DeleteOneID(nt.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *NotifyTaskClient) DeleteOneID(id uint64) *NotifyTaskDeleteOne {
	builder := c.Delete().Where(notifytask.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &NotifyTaskDeleteOne{builder}
}

// Query returns a query builder for NotifyTask.
func (c *NotifyTaskClient) Query() *NotifyTaskQuery {
	return &NotifyTaskQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeNotifyTask},
		inters: c.Interceptors(),
	}
}

// Get returns a NotifyTask entity by its id.
func (c *NotifyTaskClient) Get(ctx context.Context, id uint64) (*NotifyTask, error) {
	return c.Query().Where(notifytask.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *NotifyTaskClient) GetX(ctx context.Context, id uint64) *NotifyTask {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *NotifyTaskClient) Hooks() []Hook {
	hooks := c.hooks.NotifyTask
	return append(hooks[:len(hooks):len(hooks)], notifytask.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *NotifyTaskClient) Interceptors() []Interceptor {
	inters := c.inters.NotifyTask
	return append(inters[:len(inters):len(inters)], notifytask.Interceptors[:]...)
}

func (c *NotifyTaskClient) mutate(ctx context.Context, m *NotifyTaskMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&NotifyTaskCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&NotifyTaskUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&NotifyTaskUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&NotifyTaskDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown NotifyTask mutation op: %q", m.Op())
	}
}

// OrderClient is a client for the Order schema.
type OrderClient struct {
	config
}

// NewOrderClient returns a client for the Order from the given config.
func NewOrderClient(c config) *OrderClient {
	return &OrderClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `order.Hooks(f(g(h())))`.
func (c *OrderClient) Use(hooks ...Hook) {
	c.hooks.Order = append(c.hooks.Order, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `order.Intercept(f(g(h())))`.
func (c *OrderClient) Intercept(interceptors ...Interceptor) {
	c.inters.Order = append(c.inters.Order, interceptors...)
}

// Create returns a builder for creating a Order entity.
func (c *OrderClient) Create() *OrderCreate {
	mutation := newOrderMutation(c.config, OpCreate)
	return &OrderCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Order entities.
func (c *OrderClient) CreateBulk(builders ...*OrderCreate) *OrderCreateBulk {
	return &OrderCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *OrderClient) MapCreateBulk(slice any, setFunc func(*OrderCreate, int)) *OrderCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &OrderCreateBulk{err: fmt.Errorf("calling to OrderClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*OrderCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &OrderCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Order.
func (c *OrderClient) Update() *OrderUpdate {
	mutation := newOrderMutation(c.config, OpUpdate)
	return &OrderUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *OrderClient) UpdateOne(o *Order) *OrderUpdateOne {
	mutation := newOrderMutation(c.config, OpUpdateOne, withOrder(o))
	return &OrderUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *OrderClient) UpdateOneID(id uint64) *OrderUpdateOne {
	mutation := newOrderMutation(c.config, OpUpdateOne, withOrderID(id))
	return &OrderUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Order.
func (c *OrderClient) Delete() *OrderDelete {
	mutation := newOrderMutation(c.config, OpDelete)
	return &OrderDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *OrderClient) DeleteOne(o *Order) *OrderDeleteOne {
	return c.DeleteOneID(o.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *OrderClient) DeleteOneID(id uint64) *OrderDeleteOne {
	builder := c.Delete().Where(order.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &OrderDeleteOne{builder}
}

// Query returns a query builder for Order.
func (c *OrderClient) Query() *OrderQuery {
	return &OrderQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeOrder},
		inters: c.Interceptors(),
	}
}

// Get returns a Order entity by its id.
func (c *OrderClient) Get(ctx context.Context, id uint64) (*Order, error) {
	return c.Query().Where(order.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *OrderClient) GetX(ctx context.Context, id uint64) *Order {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *OrderClient) Hooks() []Hook {
	hooks := c.hooks.Order
	return append(hooks[:len(hooks):len(hooks)], order.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *OrderClient) Interceptors() []Interceptor {
	inters := c.inters.Order
	return append(inters[:len(inters):len(inters)], order.Interceptors[:]...)
}

func (c *OrderClient) mutate(ctx context.Context, m *OrderMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&OrderCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&OrderUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&OrderUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&OrderDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Order mutation op: %q", m.Op())
	}
}

// OrderExtensionClient is a client for the OrderExtension schema.
type OrderExtensionClient struct {
	config
}

// NewOrderExtensionClient returns a client for the OrderExtension from the given config.
func NewOrderExtensionClient(c config) *OrderExtensionClient {
	return &OrderExtensionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `orderextension.Hooks(f(g(h())))`.
func (c *OrderExtensionClient) Use(hooks ...Hook) {
	c.hooks.OrderExtension = append(c.hooks.OrderExtension, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `orderextension.Intercept(f(g(h())))`.
func (c *OrderExtensionClient) Intercept(interceptors ...Interceptor) {
	c.inters.OrderExtension = append(c.inters.OrderExtension, interceptors...)
}

// Create returns a builder for creating a OrderExtension entity.
func (c *OrderExtensionClient) Create() *OrderExtensionCreate {
	mutation := newOrderExtensionMutation(c.config, OpCreate)
	return &OrderExtensionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of OrderExtension entities.
func (c *OrderExtensionClient) CreateBulk(builders ...*OrderExtensionCreate) *OrderExtensionCreateBulk {
	return &OrderExtensionCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *OrderExtensionClient) MapCreateBulk(slice any, setFunc func(*OrderExtensionCreate, int)) *OrderExtensionCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &OrderExtensionCreateBulk{err: fmt.Errorf("calling to OrderExtensionClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*OrderExtensionCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &OrderExtensionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for OrderExtension.
func (c *OrderExtensionClient) Update() *OrderExtensionUpdate {
	mutation := newOrderExtensionMutation(c.config, OpUpdate)
	return &OrderExtensionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *OrderExtensionClient) UpdateOne(oe *OrderExtension) *OrderExtensionUpdateOne {
	mutation := newOrderExtensionMutation(c.config, OpUpdateOne, withOrderExtension(oe))
	return &OrderExtensionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *OrderExtensionClient) UpdateOneID(id uint64) *OrderExtensionUpdateOne {
	mutation := newOrderExtensionMutation(c.config, OpUpdateOne, withOrderExtensionID(id))
	return &OrderExtensionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for OrderExtension.
func (c *OrderExtensionClient) Delete() *OrderExtensionDelete {
	mutation := newOrderExtensionMutation(c.config, OpDelete)
	return &OrderExtensionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *OrderExtensionClient) DeleteOne(oe *OrderExtension) *OrderExtensionDeleteOne {
	return c.DeleteOneID(oe.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *OrderExtensionClient) DeleteOneID(id uint64) *OrderExtensionDeleteOne {
	builder := c.Delete().Where(orderextension.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &OrderExtensionDeleteOne{builder}
}

// Query returns a query builder for OrderExtension.
func (c *OrderExtensionClient) Query() *OrderExtensionQuery {
	return &OrderExtensionQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeOrderExtension},
		inters: c.Interceptors(),
	}
}

// Get returns a OrderExtension entity by its id.
func (c *OrderExtensionClient) Get(ctx context.Context, id uint64) (*OrderExtension, error) {
	return c.Query().Where(orderextension.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *OrderExtensionClient) GetX(ctx context.Context, id uint64) *OrderExtension {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *OrderExtensionClient) Hooks() []Hook {
	hooks := c.hooks.OrderExtension
	return append(hooks[:len(hooks):len(hooks)], orderextension.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *OrderExtensionClient) Interceptors() []Interceptor {
	inters := c.inters.OrderExtension
	return append(inters[:len(inters):len(inters)], orderextension.Interceptors[:]...)
}

func (c *OrderExtensionClient) mutate(ctx context.Context, m *OrderExtensionMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&OrderExtensionCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&OrderExtensionUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&OrderExtensionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&OrderExtensionDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown OrderExtension mutation op: %q", m.Op())
	}
}

// RefundClient is a client for the Refund schema.
type RefundClient struct {
	config
}

// NewRefundClient returns a client for the Refund from the given config.
func NewRefundClient(c config) *RefundClient {
	return &RefundClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `refund.Hooks(f(g(h())))`.
func (c *RefundClient) Use(hooks ...Hook) {
	c.hooks.Refund = append(c.hooks.Refund, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `refund.Intercept(f(g(h())))`.
func (c *RefundClient) Intercept(interceptors ...Interceptor) {
	c.inters.Refund = append(c.inters.Refund, interceptors...)
}

// Create returns a builder for creating a Refund entity.
func (c *RefundClient) Create() *RefundCreate {
	mutation := newRefundMutation(c.config, OpCreate)
	return &RefundCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Refund entities.
func (c *RefundClient) CreateBulk(builders ...*RefundCreate) *RefundCreateBulk {
	return &RefundCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *RefundClient) MapCreateBulk(slice any, setFunc func(*RefundCreate, int)) *RefundCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &RefundCreateBulk{err: fmt.Errorf("calling to RefundClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*RefundCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &RefundCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Refund.
func (c *RefundClient) Update() *RefundUpdate {
	mutation := newRefundMutation(c.config, OpUpdate)
	return &RefundUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *RefundClient) UpdateOne(r *Refund) *RefundUpdateOne {
	mutation := newRefundMutation(c.config, OpUpdateOne, withRefund(r))
	return &RefundUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *RefundClient) UpdateOneID(id uint64) *RefundUpdateOne {
	mutation := newRefundMutation(c.config, OpUpdateOne, withRefundID(id))
	return &RefundUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Refund.
func (c *RefundClient) Delete() *RefundDelete {
	mutation := newRefundMutation(c.config, OpDelete)
	return &RefundDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *RefundClient) DeleteOne(r *Refund) *RefundDeleteOne {
	return c.DeleteOneID(r.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *RefundClient) DeleteOneID(id uint64) *RefundDeleteOne {
	builder := c.Delete().Where(refund.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &RefundDeleteOne{builder}
}

// Query returns a query builder for Refund.
func (c *RefundClient) Query() *RefundQuery {
	return &RefundQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeRefund},
		inters: c.Interceptors(),
	}
}

// Get returns a Refund entity by its id.
func (c *RefundClient) Get(ctx context.Context, id uint64) (*Refund, error) {
	return c.Query().Where(refund.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *RefundClient) GetX(ctx context.Context, id uint64) *Refund {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *RefundClient) Hooks() []Hook {
	hooks := c.hooks.Refund
	return append(hooks[:len(hooks):len(hooks)], refund.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *RefundClient) Interceptors() []Interceptor {
	inters := c.inters.Refund
	return append(inters[:len(inters):len(inters)], refund.Interceptors[:]...)
}

func (c *RefundClient) mutate(ctx context.Context, m *RefundMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&RefundCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&RefundUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&RefundUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&RefundDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Refund mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		App, Channel, DemoOrder, NotifyLog, NotifyTask, Order, OrderExtension,
		Refund []ent.Hook
	}
	inters struct {
		App, Channel, DemoOrder, NotifyLog, NotifyTask, Order, OrderExtension,
		Refund []ent.Interceptor
	}
)

// ExecContext allows calling the underlying ExecContext method of the driver if it is supported by it.
// See, database/sql#DB.ExecContext for more information.
func (c *config) ExecContext(ctx context.Context, query string, args ...any) (stdsql.Result, error) {
	ex, ok := c.driver.(interface {
		ExecContext(context.Context, string, ...any) (stdsql.Result, error)
	})
	if !ok {
		return nil, fmt.Errorf("Driver.ExecContext is not supported")
	}
	return ex.ExecContext(ctx, query, args...)
}

// QueryContext allows calling the underlying QueryContext method of the driver if it is supported by it.
// See, database/sql#DB.QueryContext for more information.
func (c *config) QueryContext(ctx context.Context, query string, args ...any) (*stdsql.Rows, error) {
	q, ok := c.driver.(interface {
		QueryContext(context.Context, string, ...any) (*stdsql.Rows, error)
	})
	if !ok {
		return nil, fmt.Errorf("Driver.QueryContext is not supported")
	}
	return q.QueryContext(ctx, query, args...)
}

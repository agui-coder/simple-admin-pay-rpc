// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/agui-coder/simple-admin-pay-rpc/ent/notifytask"
	"github.com/agui-coder/simple-admin-pay-rpc/ent/predicate"
)

// NotifyTaskDelete is the builder for deleting a NotifyTask entity.
type NotifyTaskDelete struct {
	config
	hooks    []Hook
	mutation *NotifyTaskMutation
}

// Where appends a list predicates to the NotifyTaskDelete builder.
func (ntd *NotifyTaskDelete) Where(ps ...predicate.NotifyTask) *NotifyTaskDelete {
	ntd.mutation.Where(ps...)
	return ntd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (ntd *NotifyTaskDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, ntd.sqlExec, ntd.mutation, ntd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (ntd *NotifyTaskDelete) ExecX(ctx context.Context) int {
	n, err := ntd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (ntd *NotifyTaskDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(notifytask.Table, sqlgraph.NewFieldSpec(notifytask.FieldID, field.TypeUint64))
	if ps := ntd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, ntd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	ntd.mutation.done = true
	return affected, err
}

// NotifyTaskDeleteOne is the builder for deleting a single NotifyTask entity.
type NotifyTaskDeleteOne struct {
	ntd *NotifyTaskDelete
}

// Where appends a list predicates to the NotifyTaskDelete builder.
func (ntdo *NotifyTaskDeleteOne) Where(ps ...predicate.NotifyTask) *NotifyTaskDeleteOne {
	ntdo.ntd.mutation.Where(ps...)
	return ntdo
}

// Exec executes the deletion query.
func (ntdo *NotifyTaskDeleteOne) Exec(ctx context.Context) error {
	n, err := ntdo.ntd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{notifytask.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (ntdo *NotifyTaskDeleteOne) ExecX(ctx context.Context) {
	if err := ntdo.Exec(ctx); err != nil {
		panic(err)
	}
}

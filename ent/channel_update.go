// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/agui-coder/simple-admin-pay-rpc/ent/channel"
	"github.com/agui-coder/simple-admin-pay-rpc/ent/predicate"
)

// ChannelUpdate is the builder for updating Channel entities.
type ChannelUpdate struct {
	config
	hooks    []Hook
	mutation *ChannelMutation
}

// Where appends a list predicates to the ChannelUpdate builder.
func (cu *ChannelUpdate) Where(ps ...predicate.Channel) *ChannelUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetUpdatedAt sets the "updated_at" field.
func (cu *ChannelUpdate) SetUpdatedAt(t time.Time) *ChannelUpdate {
	cu.mutation.SetUpdatedAt(t)
	return cu
}

// SetStatus sets the "status" field.
func (cu *ChannelUpdate) SetStatus(u uint8) *ChannelUpdate {
	cu.mutation.ResetStatus()
	cu.mutation.SetStatus(u)
	return cu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (cu *ChannelUpdate) SetNillableStatus(u *uint8) *ChannelUpdate {
	if u != nil {
		cu.SetStatus(*u)
	}
	return cu
}

// AddStatus adds u to the "status" field.
func (cu *ChannelUpdate) AddStatus(u int8) *ChannelUpdate {
	cu.mutation.AddStatus(u)
	return cu
}

// ClearStatus clears the value of the "status" field.
func (cu *ChannelUpdate) ClearStatus() *ChannelUpdate {
	cu.mutation.ClearStatus()
	return cu
}

// SetDeletedAt sets the "deleted_at" field.
func (cu *ChannelUpdate) SetDeletedAt(t time.Time) *ChannelUpdate {
	cu.mutation.SetDeletedAt(t)
	return cu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (cu *ChannelUpdate) SetNillableDeletedAt(t *time.Time) *ChannelUpdate {
	if t != nil {
		cu.SetDeletedAt(*t)
	}
	return cu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (cu *ChannelUpdate) ClearDeletedAt() *ChannelUpdate {
	cu.mutation.ClearDeletedAt()
	return cu
}

// SetCode sets the "code" field.
func (cu *ChannelUpdate) SetCode(s string) *ChannelUpdate {
	cu.mutation.SetCode(s)
	return cu
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (cu *ChannelUpdate) SetNillableCode(s *string) *ChannelUpdate {
	if s != nil {
		cu.SetCode(*s)
	}
	return cu
}

// SetRemark sets the "remark" field.
func (cu *ChannelUpdate) SetRemark(s string) *ChannelUpdate {
	cu.mutation.SetRemark(s)
	return cu
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (cu *ChannelUpdate) SetNillableRemark(s *string) *ChannelUpdate {
	if s != nil {
		cu.SetRemark(*s)
	}
	return cu
}

// ClearRemark clears the value of the "remark" field.
func (cu *ChannelUpdate) ClearRemark() *ChannelUpdate {
	cu.mutation.ClearRemark()
	return cu
}

// SetFeeRate sets the "fee_rate" field.
func (cu *ChannelUpdate) SetFeeRate(f float64) *ChannelUpdate {
	cu.mutation.ResetFeeRate()
	cu.mutation.SetFeeRate(f)
	return cu
}

// SetNillableFeeRate sets the "fee_rate" field if the given value is not nil.
func (cu *ChannelUpdate) SetNillableFeeRate(f *float64) *ChannelUpdate {
	if f != nil {
		cu.SetFeeRate(*f)
	}
	return cu
}

// AddFeeRate adds f to the "fee_rate" field.
func (cu *ChannelUpdate) AddFeeRate(f float64) *ChannelUpdate {
	cu.mutation.AddFeeRate(f)
	return cu
}

// SetAppID sets the "app_id" field.
func (cu *ChannelUpdate) SetAppID(u uint64) *ChannelUpdate {
	cu.mutation.ResetAppID()
	cu.mutation.SetAppID(u)
	return cu
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (cu *ChannelUpdate) SetNillableAppID(u *uint64) *ChannelUpdate {
	if u != nil {
		cu.SetAppID(*u)
	}
	return cu
}

// AddAppID adds u to the "app_id" field.
func (cu *ChannelUpdate) AddAppID(u int64) *ChannelUpdate {
	cu.mutation.AddAppID(u)
	return cu
}

// SetConfig sets the "config" field.
func (cu *ChannelUpdate) SetConfig(s string) *ChannelUpdate {
	cu.mutation.SetConfig(s)
	return cu
}

// SetNillableConfig sets the "config" field if the given value is not nil.
func (cu *ChannelUpdate) SetNillableConfig(s *string) *ChannelUpdate {
	if s != nil {
		cu.SetConfig(*s)
	}
	return cu
}

// Mutation returns the ChannelMutation object of the builder.
func (cu *ChannelUpdate) Mutation() *ChannelMutation {
	return cu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *ChannelUpdate) Save(ctx context.Context) (int, error) {
	if err := cu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, cu.sqlSave, cu.mutation, cu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cu *ChannelUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *ChannelUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *ChannelUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cu *ChannelUpdate) defaults() error {
	if _, ok := cu.mutation.UpdatedAt(); !ok {
		if channel.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized channel.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := channel.UpdateDefaultUpdatedAt()
		cu.mutation.SetUpdatedAt(v)
	}
	return nil
}

func (cu *ChannelUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(channel.Table, channel.Columns, sqlgraph.NewFieldSpec(channel.FieldID, field.TypeUint64))
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.UpdatedAt(); ok {
		_spec.SetField(channel.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := cu.mutation.Status(); ok {
		_spec.SetField(channel.FieldStatus, field.TypeUint8, value)
	}
	if value, ok := cu.mutation.AddedStatus(); ok {
		_spec.AddField(channel.FieldStatus, field.TypeUint8, value)
	}
	if cu.mutation.StatusCleared() {
		_spec.ClearField(channel.FieldStatus, field.TypeUint8)
	}
	if value, ok := cu.mutation.DeletedAt(); ok {
		_spec.SetField(channel.FieldDeletedAt, field.TypeTime, value)
	}
	if cu.mutation.DeletedAtCleared() {
		_spec.ClearField(channel.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := cu.mutation.Code(); ok {
		_spec.SetField(channel.FieldCode, field.TypeString, value)
	}
	if value, ok := cu.mutation.Remark(); ok {
		_spec.SetField(channel.FieldRemark, field.TypeString, value)
	}
	if cu.mutation.RemarkCleared() {
		_spec.ClearField(channel.FieldRemark, field.TypeString)
	}
	if value, ok := cu.mutation.FeeRate(); ok {
		_spec.SetField(channel.FieldFeeRate, field.TypeFloat64, value)
	}
	if value, ok := cu.mutation.AddedFeeRate(); ok {
		_spec.AddField(channel.FieldFeeRate, field.TypeFloat64, value)
	}
	if value, ok := cu.mutation.AppID(); ok {
		_spec.SetField(channel.FieldAppID, field.TypeUint64, value)
	}
	if value, ok := cu.mutation.AddedAppID(); ok {
		_spec.AddField(channel.FieldAppID, field.TypeUint64, value)
	}
	if value, ok := cu.mutation.Config(); ok {
		_spec.SetField(channel.FieldConfig, field.TypeString, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{channel.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cu.mutation.done = true
	return n, nil
}

// ChannelUpdateOne is the builder for updating a single Channel entity.
type ChannelUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ChannelMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (cuo *ChannelUpdateOne) SetUpdatedAt(t time.Time) *ChannelUpdateOne {
	cuo.mutation.SetUpdatedAt(t)
	return cuo
}

// SetStatus sets the "status" field.
func (cuo *ChannelUpdateOne) SetStatus(u uint8) *ChannelUpdateOne {
	cuo.mutation.ResetStatus()
	cuo.mutation.SetStatus(u)
	return cuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (cuo *ChannelUpdateOne) SetNillableStatus(u *uint8) *ChannelUpdateOne {
	if u != nil {
		cuo.SetStatus(*u)
	}
	return cuo
}

// AddStatus adds u to the "status" field.
func (cuo *ChannelUpdateOne) AddStatus(u int8) *ChannelUpdateOne {
	cuo.mutation.AddStatus(u)
	return cuo
}

// ClearStatus clears the value of the "status" field.
func (cuo *ChannelUpdateOne) ClearStatus() *ChannelUpdateOne {
	cuo.mutation.ClearStatus()
	return cuo
}

// SetDeletedAt sets the "deleted_at" field.
func (cuo *ChannelUpdateOne) SetDeletedAt(t time.Time) *ChannelUpdateOne {
	cuo.mutation.SetDeletedAt(t)
	return cuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (cuo *ChannelUpdateOne) SetNillableDeletedAt(t *time.Time) *ChannelUpdateOne {
	if t != nil {
		cuo.SetDeletedAt(*t)
	}
	return cuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (cuo *ChannelUpdateOne) ClearDeletedAt() *ChannelUpdateOne {
	cuo.mutation.ClearDeletedAt()
	return cuo
}

// SetCode sets the "code" field.
func (cuo *ChannelUpdateOne) SetCode(s string) *ChannelUpdateOne {
	cuo.mutation.SetCode(s)
	return cuo
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (cuo *ChannelUpdateOne) SetNillableCode(s *string) *ChannelUpdateOne {
	if s != nil {
		cuo.SetCode(*s)
	}
	return cuo
}

// SetRemark sets the "remark" field.
func (cuo *ChannelUpdateOne) SetRemark(s string) *ChannelUpdateOne {
	cuo.mutation.SetRemark(s)
	return cuo
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (cuo *ChannelUpdateOne) SetNillableRemark(s *string) *ChannelUpdateOne {
	if s != nil {
		cuo.SetRemark(*s)
	}
	return cuo
}

// ClearRemark clears the value of the "remark" field.
func (cuo *ChannelUpdateOne) ClearRemark() *ChannelUpdateOne {
	cuo.mutation.ClearRemark()
	return cuo
}

// SetFeeRate sets the "fee_rate" field.
func (cuo *ChannelUpdateOne) SetFeeRate(f float64) *ChannelUpdateOne {
	cuo.mutation.ResetFeeRate()
	cuo.mutation.SetFeeRate(f)
	return cuo
}

// SetNillableFeeRate sets the "fee_rate" field if the given value is not nil.
func (cuo *ChannelUpdateOne) SetNillableFeeRate(f *float64) *ChannelUpdateOne {
	if f != nil {
		cuo.SetFeeRate(*f)
	}
	return cuo
}

// AddFeeRate adds f to the "fee_rate" field.
func (cuo *ChannelUpdateOne) AddFeeRate(f float64) *ChannelUpdateOne {
	cuo.mutation.AddFeeRate(f)
	return cuo
}

// SetAppID sets the "app_id" field.
func (cuo *ChannelUpdateOne) SetAppID(u uint64) *ChannelUpdateOne {
	cuo.mutation.ResetAppID()
	cuo.mutation.SetAppID(u)
	return cuo
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (cuo *ChannelUpdateOne) SetNillableAppID(u *uint64) *ChannelUpdateOne {
	if u != nil {
		cuo.SetAppID(*u)
	}
	return cuo
}

// AddAppID adds u to the "app_id" field.
func (cuo *ChannelUpdateOne) AddAppID(u int64) *ChannelUpdateOne {
	cuo.mutation.AddAppID(u)
	return cuo
}

// SetConfig sets the "config" field.
func (cuo *ChannelUpdateOne) SetConfig(s string) *ChannelUpdateOne {
	cuo.mutation.SetConfig(s)
	return cuo
}

// SetNillableConfig sets the "config" field if the given value is not nil.
func (cuo *ChannelUpdateOne) SetNillableConfig(s *string) *ChannelUpdateOne {
	if s != nil {
		cuo.SetConfig(*s)
	}
	return cuo
}

// Mutation returns the ChannelMutation object of the builder.
func (cuo *ChannelUpdateOne) Mutation() *ChannelMutation {
	return cuo.mutation
}

// Where appends a list predicates to the ChannelUpdate builder.
func (cuo *ChannelUpdateOne) Where(ps ...predicate.Channel) *ChannelUpdateOne {
	cuo.mutation.Where(ps...)
	return cuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *ChannelUpdateOne) Select(field string, fields ...string) *ChannelUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Channel entity.
func (cuo *ChannelUpdateOne) Save(ctx context.Context) (*Channel, error) {
	if err := cuo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, cuo.sqlSave, cuo.mutation, cuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *ChannelUpdateOne) SaveX(ctx context.Context) *Channel {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *ChannelUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *ChannelUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cuo *ChannelUpdateOne) defaults() error {
	if _, ok := cuo.mutation.UpdatedAt(); !ok {
		if channel.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized channel.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := channel.UpdateDefaultUpdatedAt()
		cuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

func (cuo *ChannelUpdateOne) sqlSave(ctx context.Context) (_node *Channel, err error) {
	_spec := sqlgraph.NewUpdateSpec(channel.Table, channel.Columns, sqlgraph.NewFieldSpec(channel.FieldID, field.TypeUint64))
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Channel.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, channel.FieldID)
		for _, f := range fields {
			if !channel.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != channel.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.UpdatedAt(); ok {
		_spec.SetField(channel.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := cuo.mutation.Status(); ok {
		_spec.SetField(channel.FieldStatus, field.TypeUint8, value)
	}
	if value, ok := cuo.mutation.AddedStatus(); ok {
		_spec.AddField(channel.FieldStatus, field.TypeUint8, value)
	}
	if cuo.mutation.StatusCleared() {
		_spec.ClearField(channel.FieldStatus, field.TypeUint8)
	}
	if value, ok := cuo.mutation.DeletedAt(); ok {
		_spec.SetField(channel.FieldDeletedAt, field.TypeTime, value)
	}
	if cuo.mutation.DeletedAtCleared() {
		_spec.ClearField(channel.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := cuo.mutation.Code(); ok {
		_spec.SetField(channel.FieldCode, field.TypeString, value)
	}
	if value, ok := cuo.mutation.Remark(); ok {
		_spec.SetField(channel.FieldRemark, field.TypeString, value)
	}
	if cuo.mutation.RemarkCleared() {
		_spec.ClearField(channel.FieldRemark, field.TypeString)
	}
	if value, ok := cuo.mutation.FeeRate(); ok {
		_spec.SetField(channel.FieldFeeRate, field.TypeFloat64, value)
	}
	if value, ok := cuo.mutation.AddedFeeRate(); ok {
		_spec.AddField(channel.FieldFeeRate, field.TypeFloat64, value)
	}
	if value, ok := cuo.mutation.AppID(); ok {
		_spec.SetField(channel.FieldAppID, field.TypeUint64, value)
	}
	if value, ok := cuo.mutation.AddedAppID(); ok {
		_spec.AddField(channel.FieldAppID, field.TypeUint64, value)
	}
	if value, ok := cuo.mutation.Config(); ok {
		_spec.SetField(channel.FieldConfig, field.TypeString, value)
	}
	_node = &Channel{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{channel.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cuo.mutation.done = true
	return _node, nil
}

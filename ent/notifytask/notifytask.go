// Code generated by ent, DO NOT EDIT.

package notifytask

import (
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the notifytask type in the database.
	Label = "notify_task"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldAppID holds the string denoting the app_id field in the database.
	FieldAppID = "app_id"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldDataID holds the string denoting the data_id field in the database.
	FieldDataID = "data_id"
	// FieldMerchantOrderID holds the string denoting the merchant_order_id field in the database.
	FieldMerchantOrderID = "merchant_order_id"
	// FieldNextNotifyTime holds the string denoting the next_notify_time field in the database.
	FieldNextNotifyTime = "next_notify_time"
	// FieldLastExecuteTime holds the string denoting the last_execute_time field in the database.
	FieldLastExecuteTime = "last_execute_time"
	// FieldNotifyTimes holds the string denoting the notify_times field in the database.
	FieldNotifyTimes = "notify_times"
	// FieldMaxNotifyTimes holds the string denoting the max_notify_times field in the database.
	FieldMaxNotifyTimes = "max_notify_times"
	// FieldNotifyURL holds the string denoting the notify_url field in the database.
	FieldNotifyURL = "notify_url"
	// Table holds the table name of the notifytask in the database.
	Table = "pay_notify_task"
)

// Columns holds all SQL columns for notifytask fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldStatus,
	FieldDeletedAt,
	FieldAppID,
	FieldType,
	FieldDataID,
	FieldMerchantOrderID,
	FieldNextNotifyTime,
	FieldLastExecuteTime,
	FieldNotifyTimes,
	FieldMaxNotifyTimes,
	FieldNotifyURL,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "github.com/agui-coder/simple-admin-pay-rpc/ent/runtime"
var (
	Hooks        [1]ent.Hook
	Interceptors [1]ent.Interceptor
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultStatus holds the default value on creation for the "status" field.
	DefaultStatus uint8
)

// OrderOption defines the ordering options for the NotifyTask queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByAppID orders the results by the app_id field.
func ByAppID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAppID, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByDataID orders the results by the data_id field.
func ByDataID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDataID, opts...).ToFunc()
}

// ByMerchantOrderID orders the results by the merchant_order_id field.
func ByMerchantOrderID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMerchantOrderID, opts...).ToFunc()
}

// ByNextNotifyTime orders the results by the next_notify_time field.
func ByNextNotifyTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNextNotifyTime, opts...).ToFunc()
}

// ByLastExecuteTime orders the results by the last_execute_time field.
func ByLastExecuteTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLastExecuteTime, opts...).ToFunc()
}

// ByNotifyTimes orders the results by the notify_times field.
func ByNotifyTimes(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNotifyTimes, opts...).ToFunc()
}

// ByMaxNotifyTimes orders the results by the max_notify_times field.
func ByMaxNotifyTimes(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMaxNotifyTimes, opts...).ToFunc()
}

// ByNotifyURL orders the results by the notify_url field.
func ByNotifyURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNotifyURL, opts...).ToFunc()
}

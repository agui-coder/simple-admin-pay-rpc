// Code generated by ent, DO NOT EDIT.

package notifytask

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/agui-coder/simple-admin-pay-rpc/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uint64) predicate.NotifyTask {
	return predicate.NotifyTask(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint64) predicate.NotifyTask {
	return predicate.NotifyTask(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint64) predicate.NotifyTask {
	return predicate.NotifyTask(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint64) predicate.NotifyTask {
	return predicate.NotifyTask(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint64) predicate.NotifyTask {
	return predicate.NotifyTask(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint64) predicate.NotifyTask {
	return predicate.NotifyTask(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint64) predicate.NotifyTask {
	return predicate.NotifyTask(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint64) predicate.NotifyTask {
	return predicate.NotifyTask(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint64) predicate.NotifyTask {
	return predicate.NotifyTask(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.NotifyTask {
	return predicate.NotifyTask(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.NotifyTask {
	return predicate.NotifyTask(sql.FieldEQ(FieldUpdatedAt, v))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v uint8) predicate.NotifyTask {
	return predicate.NotifyTask(sql.FieldEQ(FieldStatus, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.NotifyTask {
	return predicate.NotifyTask(sql.FieldEQ(FieldDeletedAt, v))
}

// AppID applies equality check predicate on the "app_id" field. It's identical to AppIDEQ.
func AppID(v uint64) predicate.NotifyTask {
	return predicate.NotifyTask(sql.FieldEQ(FieldAppID, v))
}

// Type applies equality check predicate on the "type" field. It's identical to TypeEQ.
func Type(v int) predicate.NotifyTask {
	return predicate.NotifyTask(sql.FieldEQ(FieldType, v))
}

// DataID applies equality check predicate on the "data_id" field. It's identical to DataIDEQ.
func DataID(v uint64) predicate.NotifyTask {
	return predicate.NotifyTask(sql.FieldEQ(FieldDataID, v))
}

// MerchantOrderID applies equality check predicate on the "merchant_order_id" field. It's identical to MerchantOrderIDEQ.
func MerchantOrderID(v string) predicate.NotifyTask {
	return predicate.NotifyTask(sql.FieldEQ(FieldMerchantOrderID, v))
}

// NextNotifyTime applies equality check predicate on the "next_notify_time" field. It's identical to NextNotifyTimeEQ.
func NextNotifyTime(v time.Time) predicate.NotifyTask {
	return predicate.NotifyTask(sql.FieldEQ(FieldNextNotifyTime, v))
}

// LastExecuteTime applies equality check predicate on the "last_execute_time" field. It's identical to LastExecuteTimeEQ.
func LastExecuteTime(v time.Time) predicate.NotifyTask {
	return predicate.NotifyTask(sql.FieldEQ(FieldLastExecuteTime, v))
}

// NotifyTimes applies equality check predicate on the "notify_times" field. It's identical to NotifyTimesEQ.
func NotifyTimes(v int8) predicate.NotifyTask {
	return predicate.NotifyTask(sql.FieldEQ(FieldNotifyTimes, v))
}

// MaxNotifyTimes applies equality check predicate on the "max_notify_times" field. It's identical to MaxNotifyTimesEQ.
func MaxNotifyTimes(v int8) predicate.NotifyTask {
	return predicate.NotifyTask(sql.FieldEQ(FieldMaxNotifyTimes, v))
}

// NotifyURL applies equality check predicate on the "notify_url" field. It's identical to NotifyURLEQ.
func NotifyURL(v string) predicate.NotifyTask {
	return predicate.NotifyTask(sql.FieldEQ(FieldNotifyURL, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.NotifyTask {
	return predicate.NotifyTask(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.NotifyTask {
	return predicate.NotifyTask(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.NotifyTask {
	return predicate.NotifyTask(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.NotifyTask {
	return predicate.NotifyTask(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.NotifyTask {
	return predicate.NotifyTask(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.NotifyTask {
	return predicate.NotifyTask(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.NotifyTask {
	return predicate.NotifyTask(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.NotifyTask {
	return predicate.NotifyTask(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.NotifyTask {
	return predicate.NotifyTask(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.NotifyTask {
	return predicate.NotifyTask(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.NotifyTask {
	return predicate.NotifyTask(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.NotifyTask {
	return predicate.NotifyTask(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.NotifyTask {
	return predicate.NotifyTask(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.NotifyTask {
	return predicate.NotifyTask(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.NotifyTask {
	return predicate.NotifyTask(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.NotifyTask {
	return predicate.NotifyTask(sql.FieldLTE(FieldUpdatedAt, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v uint8) predicate.NotifyTask {
	return predicate.NotifyTask(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v uint8) predicate.NotifyTask {
	return predicate.NotifyTask(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...uint8) predicate.NotifyTask {
	return predicate.NotifyTask(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...uint8) predicate.NotifyTask {
	return predicate.NotifyTask(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v uint8) predicate.NotifyTask {
	return predicate.NotifyTask(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v uint8) predicate.NotifyTask {
	return predicate.NotifyTask(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v uint8) predicate.NotifyTask {
	return predicate.NotifyTask(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v uint8) predicate.NotifyTask {
	return predicate.NotifyTask(sql.FieldLTE(FieldStatus, v))
}

// StatusIsNil applies the IsNil predicate on the "status" field.
func StatusIsNil() predicate.NotifyTask {
	return predicate.NotifyTask(sql.FieldIsNull(FieldStatus))
}

// StatusNotNil applies the NotNil predicate on the "status" field.
func StatusNotNil() predicate.NotifyTask {
	return predicate.NotifyTask(sql.FieldNotNull(FieldStatus))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.NotifyTask {
	return predicate.NotifyTask(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.NotifyTask {
	return predicate.NotifyTask(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.NotifyTask {
	return predicate.NotifyTask(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.NotifyTask {
	return predicate.NotifyTask(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.NotifyTask {
	return predicate.NotifyTask(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.NotifyTask {
	return predicate.NotifyTask(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.NotifyTask {
	return predicate.NotifyTask(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.NotifyTask {
	return predicate.NotifyTask(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.NotifyTask {
	return predicate.NotifyTask(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.NotifyTask {
	return predicate.NotifyTask(sql.FieldNotNull(FieldDeletedAt))
}

// AppIDEQ applies the EQ predicate on the "app_id" field.
func AppIDEQ(v uint64) predicate.NotifyTask {
	return predicate.NotifyTask(sql.FieldEQ(FieldAppID, v))
}

// AppIDNEQ applies the NEQ predicate on the "app_id" field.
func AppIDNEQ(v uint64) predicate.NotifyTask {
	return predicate.NotifyTask(sql.FieldNEQ(FieldAppID, v))
}

// AppIDIn applies the In predicate on the "app_id" field.
func AppIDIn(vs ...uint64) predicate.NotifyTask {
	return predicate.NotifyTask(sql.FieldIn(FieldAppID, vs...))
}

// AppIDNotIn applies the NotIn predicate on the "app_id" field.
func AppIDNotIn(vs ...uint64) predicate.NotifyTask {
	return predicate.NotifyTask(sql.FieldNotIn(FieldAppID, vs...))
}

// AppIDGT applies the GT predicate on the "app_id" field.
func AppIDGT(v uint64) predicate.NotifyTask {
	return predicate.NotifyTask(sql.FieldGT(FieldAppID, v))
}

// AppIDGTE applies the GTE predicate on the "app_id" field.
func AppIDGTE(v uint64) predicate.NotifyTask {
	return predicate.NotifyTask(sql.FieldGTE(FieldAppID, v))
}

// AppIDLT applies the LT predicate on the "app_id" field.
func AppIDLT(v uint64) predicate.NotifyTask {
	return predicate.NotifyTask(sql.FieldLT(FieldAppID, v))
}

// AppIDLTE applies the LTE predicate on the "app_id" field.
func AppIDLTE(v uint64) predicate.NotifyTask {
	return predicate.NotifyTask(sql.FieldLTE(FieldAppID, v))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v int) predicate.NotifyTask {
	return predicate.NotifyTask(sql.FieldEQ(FieldType, v))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v int) predicate.NotifyTask {
	return predicate.NotifyTask(sql.FieldNEQ(FieldType, v))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...int) predicate.NotifyTask {
	return predicate.NotifyTask(sql.FieldIn(FieldType, vs...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...int) predicate.NotifyTask {
	return predicate.NotifyTask(sql.FieldNotIn(FieldType, vs...))
}

// TypeGT applies the GT predicate on the "type" field.
func TypeGT(v int) predicate.NotifyTask {
	return predicate.NotifyTask(sql.FieldGT(FieldType, v))
}

// TypeGTE applies the GTE predicate on the "type" field.
func TypeGTE(v int) predicate.NotifyTask {
	return predicate.NotifyTask(sql.FieldGTE(FieldType, v))
}

// TypeLT applies the LT predicate on the "type" field.
func TypeLT(v int) predicate.NotifyTask {
	return predicate.NotifyTask(sql.FieldLT(FieldType, v))
}

// TypeLTE applies the LTE predicate on the "type" field.
func TypeLTE(v int) predicate.NotifyTask {
	return predicate.NotifyTask(sql.FieldLTE(FieldType, v))
}

// DataIDEQ applies the EQ predicate on the "data_id" field.
func DataIDEQ(v uint64) predicate.NotifyTask {
	return predicate.NotifyTask(sql.FieldEQ(FieldDataID, v))
}

// DataIDNEQ applies the NEQ predicate on the "data_id" field.
func DataIDNEQ(v uint64) predicate.NotifyTask {
	return predicate.NotifyTask(sql.FieldNEQ(FieldDataID, v))
}

// DataIDIn applies the In predicate on the "data_id" field.
func DataIDIn(vs ...uint64) predicate.NotifyTask {
	return predicate.NotifyTask(sql.FieldIn(FieldDataID, vs...))
}

// DataIDNotIn applies the NotIn predicate on the "data_id" field.
func DataIDNotIn(vs ...uint64) predicate.NotifyTask {
	return predicate.NotifyTask(sql.FieldNotIn(FieldDataID, vs...))
}

// DataIDGT applies the GT predicate on the "data_id" field.
func DataIDGT(v uint64) predicate.NotifyTask {
	return predicate.NotifyTask(sql.FieldGT(FieldDataID, v))
}

// DataIDGTE applies the GTE predicate on the "data_id" field.
func DataIDGTE(v uint64) predicate.NotifyTask {
	return predicate.NotifyTask(sql.FieldGTE(FieldDataID, v))
}

// DataIDLT applies the LT predicate on the "data_id" field.
func DataIDLT(v uint64) predicate.NotifyTask {
	return predicate.NotifyTask(sql.FieldLT(FieldDataID, v))
}

// DataIDLTE applies the LTE predicate on the "data_id" field.
func DataIDLTE(v uint64) predicate.NotifyTask {
	return predicate.NotifyTask(sql.FieldLTE(FieldDataID, v))
}

// MerchantOrderIDEQ applies the EQ predicate on the "merchant_order_id" field.
func MerchantOrderIDEQ(v string) predicate.NotifyTask {
	return predicate.NotifyTask(sql.FieldEQ(FieldMerchantOrderID, v))
}

// MerchantOrderIDNEQ applies the NEQ predicate on the "merchant_order_id" field.
func MerchantOrderIDNEQ(v string) predicate.NotifyTask {
	return predicate.NotifyTask(sql.FieldNEQ(FieldMerchantOrderID, v))
}

// MerchantOrderIDIn applies the In predicate on the "merchant_order_id" field.
func MerchantOrderIDIn(vs ...string) predicate.NotifyTask {
	return predicate.NotifyTask(sql.FieldIn(FieldMerchantOrderID, vs...))
}

// MerchantOrderIDNotIn applies the NotIn predicate on the "merchant_order_id" field.
func MerchantOrderIDNotIn(vs ...string) predicate.NotifyTask {
	return predicate.NotifyTask(sql.FieldNotIn(FieldMerchantOrderID, vs...))
}

// MerchantOrderIDGT applies the GT predicate on the "merchant_order_id" field.
func MerchantOrderIDGT(v string) predicate.NotifyTask {
	return predicate.NotifyTask(sql.FieldGT(FieldMerchantOrderID, v))
}

// MerchantOrderIDGTE applies the GTE predicate on the "merchant_order_id" field.
func MerchantOrderIDGTE(v string) predicate.NotifyTask {
	return predicate.NotifyTask(sql.FieldGTE(FieldMerchantOrderID, v))
}

// MerchantOrderIDLT applies the LT predicate on the "merchant_order_id" field.
func MerchantOrderIDLT(v string) predicate.NotifyTask {
	return predicate.NotifyTask(sql.FieldLT(FieldMerchantOrderID, v))
}

// MerchantOrderIDLTE applies the LTE predicate on the "merchant_order_id" field.
func MerchantOrderIDLTE(v string) predicate.NotifyTask {
	return predicate.NotifyTask(sql.FieldLTE(FieldMerchantOrderID, v))
}

// MerchantOrderIDContains applies the Contains predicate on the "merchant_order_id" field.
func MerchantOrderIDContains(v string) predicate.NotifyTask {
	return predicate.NotifyTask(sql.FieldContains(FieldMerchantOrderID, v))
}

// MerchantOrderIDHasPrefix applies the HasPrefix predicate on the "merchant_order_id" field.
func MerchantOrderIDHasPrefix(v string) predicate.NotifyTask {
	return predicate.NotifyTask(sql.FieldHasPrefix(FieldMerchantOrderID, v))
}

// MerchantOrderIDHasSuffix applies the HasSuffix predicate on the "merchant_order_id" field.
func MerchantOrderIDHasSuffix(v string) predicate.NotifyTask {
	return predicate.NotifyTask(sql.FieldHasSuffix(FieldMerchantOrderID, v))
}

// MerchantOrderIDEqualFold applies the EqualFold predicate on the "merchant_order_id" field.
func MerchantOrderIDEqualFold(v string) predicate.NotifyTask {
	return predicate.NotifyTask(sql.FieldEqualFold(FieldMerchantOrderID, v))
}

// MerchantOrderIDContainsFold applies the ContainsFold predicate on the "merchant_order_id" field.
func MerchantOrderIDContainsFold(v string) predicate.NotifyTask {
	return predicate.NotifyTask(sql.FieldContainsFold(FieldMerchantOrderID, v))
}

// NextNotifyTimeEQ applies the EQ predicate on the "next_notify_time" field.
func NextNotifyTimeEQ(v time.Time) predicate.NotifyTask {
	return predicate.NotifyTask(sql.FieldEQ(FieldNextNotifyTime, v))
}

// NextNotifyTimeNEQ applies the NEQ predicate on the "next_notify_time" field.
func NextNotifyTimeNEQ(v time.Time) predicate.NotifyTask {
	return predicate.NotifyTask(sql.FieldNEQ(FieldNextNotifyTime, v))
}

// NextNotifyTimeIn applies the In predicate on the "next_notify_time" field.
func NextNotifyTimeIn(vs ...time.Time) predicate.NotifyTask {
	return predicate.NotifyTask(sql.FieldIn(FieldNextNotifyTime, vs...))
}

// NextNotifyTimeNotIn applies the NotIn predicate on the "next_notify_time" field.
func NextNotifyTimeNotIn(vs ...time.Time) predicate.NotifyTask {
	return predicate.NotifyTask(sql.FieldNotIn(FieldNextNotifyTime, vs...))
}

// NextNotifyTimeGT applies the GT predicate on the "next_notify_time" field.
func NextNotifyTimeGT(v time.Time) predicate.NotifyTask {
	return predicate.NotifyTask(sql.FieldGT(FieldNextNotifyTime, v))
}

// NextNotifyTimeGTE applies the GTE predicate on the "next_notify_time" field.
func NextNotifyTimeGTE(v time.Time) predicate.NotifyTask {
	return predicate.NotifyTask(sql.FieldGTE(FieldNextNotifyTime, v))
}

// NextNotifyTimeLT applies the LT predicate on the "next_notify_time" field.
func NextNotifyTimeLT(v time.Time) predicate.NotifyTask {
	return predicate.NotifyTask(sql.FieldLT(FieldNextNotifyTime, v))
}

// NextNotifyTimeLTE applies the LTE predicate on the "next_notify_time" field.
func NextNotifyTimeLTE(v time.Time) predicate.NotifyTask {
	return predicate.NotifyTask(sql.FieldLTE(FieldNextNotifyTime, v))
}

// LastExecuteTimeEQ applies the EQ predicate on the "last_execute_time" field.
func LastExecuteTimeEQ(v time.Time) predicate.NotifyTask {
	return predicate.NotifyTask(sql.FieldEQ(FieldLastExecuteTime, v))
}

// LastExecuteTimeNEQ applies the NEQ predicate on the "last_execute_time" field.
func LastExecuteTimeNEQ(v time.Time) predicate.NotifyTask {
	return predicate.NotifyTask(sql.FieldNEQ(FieldLastExecuteTime, v))
}

// LastExecuteTimeIn applies the In predicate on the "last_execute_time" field.
func LastExecuteTimeIn(vs ...time.Time) predicate.NotifyTask {
	return predicate.NotifyTask(sql.FieldIn(FieldLastExecuteTime, vs...))
}

// LastExecuteTimeNotIn applies the NotIn predicate on the "last_execute_time" field.
func LastExecuteTimeNotIn(vs ...time.Time) predicate.NotifyTask {
	return predicate.NotifyTask(sql.FieldNotIn(FieldLastExecuteTime, vs...))
}

// LastExecuteTimeGT applies the GT predicate on the "last_execute_time" field.
func LastExecuteTimeGT(v time.Time) predicate.NotifyTask {
	return predicate.NotifyTask(sql.FieldGT(FieldLastExecuteTime, v))
}

// LastExecuteTimeGTE applies the GTE predicate on the "last_execute_time" field.
func LastExecuteTimeGTE(v time.Time) predicate.NotifyTask {
	return predicate.NotifyTask(sql.FieldGTE(FieldLastExecuteTime, v))
}

// LastExecuteTimeLT applies the LT predicate on the "last_execute_time" field.
func LastExecuteTimeLT(v time.Time) predicate.NotifyTask {
	return predicate.NotifyTask(sql.FieldLT(FieldLastExecuteTime, v))
}

// LastExecuteTimeLTE applies the LTE predicate on the "last_execute_time" field.
func LastExecuteTimeLTE(v time.Time) predicate.NotifyTask {
	return predicate.NotifyTask(sql.FieldLTE(FieldLastExecuteTime, v))
}

// NotifyTimesEQ applies the EQ predicate on the "notify_times" field.
func NotifyTimesEQ(v int8) predicate.NotifyTask {
	return predicate.NotifyTask(sql.FieldEQ(FieldNotifyTimes, v))
}

// NotifyTimesNEQ applies the NEQ predicate on the "notify_times" field.
func NotifyTimesNEQ(v int8) predicate.NotifyTask {
	return predicate.NotifyTask(sql.FieldNEQ(FieldNotifyTimes, v))
}

// NotifyTimesIn applies the In predicate on the "notify_times" field.
func NotifyTimesIn(vs ...int8) predicate.NotifyTask {
	return predicate.NotifyTask(sql.FieldIn(FieldNotifyTimes, vs...))
}

// NotifyTimesNotIn applies the NotIn predicate on the "notify_times" field.
func NotifyTimesNotIn(vs ...int8) predicate.NotifyTask {
	return predicate.NotifyTask(sql.FieldNotIn(FieldNotifyTimes, vs...))
}

// NotifyTimesGT applies the GT predicate on the "notify_times" field.
func NotifyTimesGT(v int8) predicate.NotifyTask {
	return predicate.NotifyTask(sql.FieldGT(FieldNotifyTimes, v))
}

// NotifyTimesGTE applies the GTE predicate on the "notify_times" field.
func NotifyTimesGTE(v int8) predicate.NotifyTask {
	return predicate.NotifyTask(sql.FieldGTE(FieldNotifyTimes, v))
}

// NotifyTimesLT applies the LT predicate on the "notify_times" field.
func NotifyTimesLT(v int8) predicate.NotifyTask {
	return predicate.NotifyTask(sql.FieldLT(FieldNotifyTimes, v))
}

// NotifyTimesLTE applies the LTE predicate on the "notify_times" field.
func NotifyTimesLTE(v int8) predicate.NotifyTask {
	return predicate.NotifyTask(sql.FieldLTE(FieldNotifyTimes, v))
}

// MaxNotifyTimesEQ applies the EQ predicate on the "max_notify_times" field.
func MaxNotifyTimesEQ(v int8) predicate.NotifyTask {
	return predicate.NotifyTask(sql.FieldEQ(FieldMaxNotifyTimes, v))
}

// MaxNotifyTimesNEQ applies the NEQ predicate on the "max_notify_times" field.
func MaxNotifyTimesNEQ(v int8) predicate.NotifyTask {
	return predicate.NotifyTask(sql.FieldNEQ(FieldMaxNotifyTimes, v))
}

// MaxNotifyTimesIn applies the In predicate on the "max_notify_times" field.
func MaxNotifyTimesIn(vs ...int8) predicate.NotifyTask {
	return predicate.NotifyTask(sql.FieldIn(FieldMaxNotifyTimes, vs...))
}

// MaxNotifyTimesNotIn applies the NotIn predicate on the "max_notify_times" field.
func MaxNotifyTimesNotIn(vs ...int8) predicate.NotifyTask {
	return predicate.NotifyTask(sql.FieldNotIn(FieldMaxNotifyTimes, vs...))
}

// MaxNotifyTimesGT applies the GT predicate on the "max_notify_times" field.
func MaxNotifyTimesGT(v int8) predicate.NotifyTask {
	return predicate.NotifyTask(sql.FieldGT(FieldMaxNotifyTimes, v))
}

// MaxNotifyTimesGTE applies the GTE predicate on the "max_notify_times" field.
func MaxNotifyTimesGTE(v int8) predicate.NotifyTask {
	return predicate.NotifyTask(sql.FieldGTE(FieldMaxNotifyTimes, v))
}

// MaxNotifyTimesLT applies the LT predicate on the "max_notify_times" field.
func MaxNotifyTimesLT(v int8) predicate.NotifyTask {
	return predicate.NotifyTask(sql.FieldLT(FieldMaxNotifyTimes, v))
}

// MaxNotifyTimesLTE applies the LTE predicate on the "max_notify_times" field.
func MaxNotifyTimesLTE(v int8) predicate.NotifyTask {
	return predicate.NotifyTask(sql.FieldLTE(FieldMaxNotifyTimes, v))
}

// NotifyURLEQ applies the EQ predicate on the "notify_url" field.
func NotifyURLEQ(v string) predicate.NotifyTask {
	return predicate.NotifyTask(sql.FieldEQ(FieldNotifyURL, v))
}

// NotifyURLNEQ applies the NEQ predicate on the "notify_url" field.
func NotifyURLNEQ(v string) predicate.NotifyTask {
	return predicate.NotifyTask(sql.FieldNEQ(FieldNotifyURL, v))
}

// NotifyURLIn applies the In predicate on the "notify_url" field.
func NotifyURLIn(vs ...string) predicate.NotifyTask {
	return predicate.NotifyTask(sql.FieldIn(FieldNotifyURL, vs...))
}

// NotifyURLNotIn applies the NotIn predicate on the "notify_url" field.
func NotifyURLNotIn(vs ...string) predicate.NotifyTask {
	return predicate.NotifyTask(sql.FieldNotIn(FieldNotifyURL, vs...))
}

// NotifyURLGT applies the GT predicate on the "notify_url" field.
func NotifyURLGT(v string) predicate.NotifyTask {
	return predicate.NotifyTask(sql.FieldGT(FieldNotifyURL, v))
}

// NotifyURLGTE applies the GTE predicate on the "notify_url" field.
func NotifyURLGTE(v string) predicate.NotifyTask {
	return predicate.NotifyTask(sql.FieldGTE(FieldNotifyURL, v))
}

// NotifyURLLT applies the LT predicate on the "notify_url" field.
func NotifyURLLT(v string) predicate.NotifyTask {
	return predicate.NotifyTask(sql.FieldLT(FieldNotifyURL, v))
}

// NotifyURLLTE applies the LTE predicate on the "notify_url" field.
func NotifyURLLTE(v string) predicate.NotifyTask {
	return predicate.NotifyTask(sql.FieldLTE(FieldNotifyURL, v))
}

// NotifyURLContains applies the Contains predicate on the "notify_url" field.
func NotifyURLContains(v string) predicate.NotifyTask {
	return predicate.NotifyTask(sql.FieldContains(FieldNotifyURL, v))
}

// NotifyURLHasPrefix applies the HasPrefix predicate on the "notify_url" field.
func NotifyURLHasPrefix(v string) predicate.NotifyTask {
	return predicate.NotifyTask(sql.FieldHasPrefix(FieldNotifyURL, v))
}

// NotifyURLHasSuffix applies the HasSuffix predicate on the "notify_url" field.
func NotifyURLHasSuffix(v string) predicate.NotifyTask {
	return predicate.NotifyTask(sql.FieldHasSuffix(FieldNotifyURL, v))
}

// NotifyURLEqualFold applies the EqualFold predicate on the "notify_url" field.
func NotifyURLEqualFold(v string) predicate.NotifyTask {
	return predicate.NotifyTask(sql.FieldEqualFold(FieldNotifyURL, v))
}

// NotifyURLContainsFold applies the ContainsFold predicate on the "notify_url" field.
func NotifyURLContainsFold(v string) predicate.NotifyTask {
	return predicate.NotifyTask(sql.FieldContainsFold(FieldNotifyURL, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.NotifyTask) predicate.NotifyTask {
	return predicate.NotifyTask(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.NotifyTask) predicate.NotifyTask {
	return predicate.NotifyTask(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.NotifyTask) predicate.NotifyTask {
	return predicate.NotifyTask(sql.NotPredicates(p))
}

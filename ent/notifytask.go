// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/agui-coder/simple-admin-pay-rpc/ent/notifytask"
)

// NotifyTask is the model entity for the NotifyTask schema.
type NotifyTask struct {
	config `json:"-"`
	// ID of the ent.
	// 任务编号
	ID uint64 `json:"id,omitempty"`
	// Create Time | 创建日期
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Update Time | 修改日期
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Status 1: normal 2: ban | 状态 1 正常 2 禁用
	Status uint8 `json:"status,omitempty"`
	// Delete Time | 删除日期
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// 应用编号
	AppID uint64 `json:"app_id,omitempty"`
	// 通知类型
	Type int `json:"type,omitempty"`
	// 数据编号
	DataID uint64 `json:"data_id,omitempty"`
	// 商户订单编号
	MerchantOrderID string `json:"merchant_order_id,omitempty"`
	// 下一次通知时间
	NextNotifyTime time.Time `json:"next_notify_time,omitempty"`
	// 最后一次执行时间
	LastExecuteTime time.Time `json:"last_execute_time,omitempty"`
	// 当前通知次数
	NotifyTimes int8 `json:"notify_times,omitempty"`
	// 最大可通知次数
	MaxNotifyTimes int8 `json:"max_notify_times,omitempty"`
	// 异步通知地址
	NotifyURL    string `json:"notify_url,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*NotifyTask) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case notifytask.FieldID, notifytask.FieldStatus, notifytask.FieldAppID, notifytask.FieldType, notifytask.FieldDataID, notifytask.FieldNotifyTimes, notifytask.FieldMaxNotifyTimes:
			values[i] = new(sql.NullInt64)
		case notifytask.FieldMerchantOrderID, notifytask.FieldNotifyURL:
			values[i] = new(sql.NullString)
		case notifytask.FieldCreatedAt, notifytask.FieldUpdatedAt, notifytask.FieldDeletedAt, notifytask.FieldNextNotifyTime, notifytask.FieldLastExecuteTime:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the NotifyTask fields.
func (nt *NotifyTask) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case notifytask.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			nt.ID = uint64(value.Int64)
		case notifytask.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				nt.CreatedAt = value.Time
			}
		case notifytask.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				nt.UpdatedAt = value.Time
			}
		case notifytask.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				nt.Status = uint8(value.Int64)
			}
		case notifytask.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				nt.DeletedAt = value.Time
			}
		case notifytask.FieldAppID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field app_id", values[i])
			} else if value.Valid {
				nt.AppID = uint64(value.Int64)
			}
		case notifytask.FieldType:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				nt.Type = int(value.Int64)
			}
		case notifytask.FieldDataID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field data_id", values[i])
			} else if value.Valid {
				nt.DataID = uint64(value.Int64)
			}
		case notifytask.FieldMerchantOrderID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field merchant_order_id", values[i])
			} else if value.Valid {
				nt.MerchantOrderID = value.String
			}
		case notifytask.FieldNextNotifyTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field next_notify_time", values[i])
			} else if value.Valid {
				nt.NextNotifyTime = value.Time
			}
		case notifytask.FieldLastExecuteTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field last_execute_time", values[i])
			} else if value.Valid {
				nt.LastExecuteTime = value.Time
			}
		case notifytask.FieldNotifyTimes:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field notify_times", values[i])
			} else if value.Valid {
				nt.NotifyTimes = int8(value.Int64)
			}
		case notifytask.FieldMaxNotifyTimes:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field max_notify_times", values[i])
			} else if value.Valid {
				nt.MaxNotifyTimes = int8(value.Int64)
			}
		case notifytask.FieldNotifyURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field notify_url", values[i])
			} else if value.Valid {
				nt.NotifyURL = value.String
			}
		default:
			nt.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the NotifyTask.
// This includes values selected through modifiers, order, etc.
func (nt *NotifyTask) Value(name string) (ent.Value, error) {
	return nt.selectValues.Get(name)
}

// Update returns a builder for updating this NotifyTask.
// Note that you need to call NotifyTask.Unwrap() before calling this method if this NotifyTask
// was returned from a transaction, and the transaction was committed or rolled back.
func (nt *NotifyTask) Update() *NotifyTaskUpdateOne {
	return NewNotifyTaskClient(nt.config).UpdateOne(nt)
}

// Unwrap unwraps the NotifyTask entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (nt *NotifyTask) Unwrap() *NotifyTask {
	_tx, ok := nt.config.driver.(*txDriver)
	if !ok {
		panic("ent: NotifyTask is not a transactional entity")
	}
	nt.config.driver = _tx.drv
	return nt
}

// String implements the fmt.Stringer.
func (nt *NotifyTask) String() string {
	var builder strings.Builder
	builder.WriteString("NotifyTask(")
	builder.WriteString(fmt.Sprintf("id=%v, ", nt.ID))
	builder.WriteString("created_at=")
	builder.WriteString(nt.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(nt.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", nt.Status))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(nt.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("app_id=")
	builder.WriteString(fmt.Sprintf("%v", nt.AppID))
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(fmt.Sprintf("%v", nt.Type))
	builder.WriteString(", ")
	builder.WriteString("data_id=")
	builder.WriteString(fmt.Sprintf("%v", nt.DataID))
	builder.WriteString(", ")
	builder.WriteString("merchant_order_id=")
	builder.WriteString(nt.MerchantOrderID)
	builder.WriteString(", ")
	builder.WriteString("next_notify_time=")
	builder.WriteString(nt.NextNotifyTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("last_execute_time=")
	builder.WriteString(nt.LastExecuteTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("notify_times=")
	builder.WriteString(fmt.Sprintf("%v", nt.NotifyTimes))
	builder.WriteString(", ")
	builder.WriteString("max_notify_times=")
	builder.WriteString(fmt.Sprintf("%v", nt.MaxNotifyTimes))
	builder.WriteString(", ")
	builder.WriteString("notify_url=")
	builder.WriteString(nt.NotifyURL)
	builder.WriteByte(')')
	return builder.String()
}

// NotifyTasks is a parsable slice of NotifyTask.
type NotifyTasks []*NotifyTask

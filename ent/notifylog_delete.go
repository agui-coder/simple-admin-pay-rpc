// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"github.com/agui-coder/simple-admin-pay-rpc/ent/notifylog"
	"github.com/agui-coder/simple-admin-pay-rpc/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// NotifyLogDelete is the builder for deleting a NotifyLog entity.
type NotifyLogDelete struct {
	config
	hooks    []Hook
	mutation *NotifyLogMutation
}

// Where appends a list predicates to the NotifyLogDelete builder.
func (nld *NotifyLogDelete) Where(ps ...predicate.NotifyLog) *NotifyLogDelete {
	nld.mutation.Where(ps...)
	return nld
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (nld *NotifyLogDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, nld.sqlExec, nld.mutation, nld.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (nld *NotifyLogDelete) ExecX(ctx context.Context) int {
	n, err := nld.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (nld *NotifyLogDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(notifylog.Table, sqlgraph.NewFieldSpec(notifylog.FieldID, field.TypeUint64))
	if ps := nld.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, nld.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	nld.mutation.done = true
	return affected, err
}

// NotifyLogDeleteOne is the builder for deleting a single NotifyLog entity.
type NotifyLogDeleteOne struct {
	nld *NotifyLogDelete
}

// Where appends a list predicates to the NotifyLogDelete builder.
func (nldo *NotifyLogDeleteOne) Where(ps ...predicate.NotifyLog) *NotifyLogDeleteOne {
	nldo.nld.mutation.Where(ps...)
	return nldo
}

// Exec executes the deletion query.
func (nldo *NotifyLogDeleteOne) Exec(ctx context.Context) error {
	n, err := nldo.nld.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{notifylog.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (nldo *NotifyLogDeleteOne) ExecX(ctx context.Context) {
	if err := nldo.Exec(ctx); err != nil {
		panic(err)
	}
}

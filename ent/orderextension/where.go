// Code generated by ent, DO NOT EDIT.

package orderextension

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/agui-coder/simple-admin-pay-rpc/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uint64) predicate.OrderExtension {
	return predicate.OrderExtension(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint64) predicate.OrderExtension {
	return predicate.OrderExtension(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint64) predicate.OrderExtension {
	return predicate.OrderExtension(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint64) predicate.OrderExtension {
	return predicate.OrderExtension(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint64) predicate.OrderExtension {
	return predicate.OrderExtension(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint64) predicate.OrderExtension {
	return predicate.OrderExtension(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint64) predicate.OrderExtension {
	return predicate.OrderExtension(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint64) predicate.OrderExtension {
	return predicate.OrderExtension(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint64) predicate.OrderExtension {
	return predicate.OrderExtension(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.OrderExtension {
	return predicate.OrderExtension(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.OrderExtension {
	return predicate.OrderExtension(sql.FieldEQ(FieldUpdatedAt, v))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v uint8) predicate.OrderExtension {
	return predicate.OrderExtension(sql.FieldEQ(FieldStatus, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.OrderExtension {
	return predicate.OrderExtension(sql.FieldEQ(FieldDeletedAt, v))
}

// No applies equality check predicate on the "no" field. It's identical to NoEQ.
func No(v string) predicate.OrderExtension {
	return predicate.OrderExtension(sql.FieldEQ(FieldNo, v))
}

// OrderID applies equality check predicate on the "order_id" field. It's identical to OrderIDEQ.
func OrderID(v uint64) predicate.OrderExtension {
	return predicate.OrderExtension(sql.FieldEQ(FieldOrderID, v))
}

// ChannelCode applies equality check predicate on the "channel_code" field. It's identical to ChannelCodeEQ.
func ChannelCode(v string) predicate.OrderExtension {
	return predicate.OrderExtension(sql.FieldEQ(FieldChannelCode, v))
}

// UserIP applies equality check predicate on the "user_ip" field. It's identical to UserIPEQ.
func UserIP(v string) predicate.OrderExtension {
	return predicate.OrderExtension(sql.FieldEQ(FieldUserIP, v))
}

// ChannelErrorCode applies equality check predicate on the "channel_error_code" field. It's identical to ChannelErrorCodeEQ.
func ChannelErrorCode(v string) predicate.OrderExtension {
	return predicate.OrderExtension(sql.FieldEQ(FieldChannelErrorCode, v))
}

// ChannelErrorMsg applies equality check predicate on the "channel_error_msg" field. It's identical to ChannelErrorMsgEQ.
func ChannelErrorMsg(v string) predicate.OrderExtension {
	return predicate.OrderExtension(sql.FieldEQ(FieldChannelErrorMsg, v))
}

// ChannelNotifyData applies equality check predicate on the "channel_notify_data" field. It's identical to ChannelNotifyDataEQ.
func ChannelNotifyData(v string) predicate.OrderExtension {
	return predicate.OrderExtension(sql.FieldEQ(FieldChannelNotifyData, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.OrderExtension {
	return predicate.OrderExtension(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.OrderExtension {
	return predicate.OrderExtension(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.OrderExtension {
	return predicate.OrderExtension(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.OrderExtension {
	return predicate.OrderExtension(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.OrderExtension {
	return predicate.OrderExtension(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.OrderExtension {
	return predicate.OrderExtension(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.OrderExtension {
	return predicate.OrderExtension(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.OrderExtension {
	return predicate.OrderExtension(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.OrderExtension {
	return predicate.OrderExtension(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.OrderExtension {
	return predicate.OrderExtension(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.OrderExtension {
	return predicate.OrderExtension(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.OrderExtension {
	return predicate.OrderExtension(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.OrderExtension {
	return predicate.OrderExtension(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.OrderExtension {
	return predicate.OrderExtension(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.OrderExtension {
	return predicate.OrderExtension(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.OrderExtension {
	return predicate.OrderExtension(sql.FieldLTE(FieldUpdatedAt, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v uint8) predicate.OrderExtension {
	return predicate.OrderExtension(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v uint8) predicate.OrderExtension {
	return predicate.OrderExtension(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...uint8) predicate.OrderExtension {
	return predicate.OrderExtension(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...uint8) predicate.OrderExtension {
	return predicate.OrderExtension(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v uint8) predicate.OrderExtension {
	return predicate.OrderExtension(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v uint8) predicate.OrderExtension {
	return predicate.OrderExtension(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v uint8) predicate.OrderExtension {
	return predicate.OrderExtension(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v uint8) predicate.OrderExtension {
	return predicate.OrderExtension(sql.FieldLTE(FieldStatus, v))
}

// StatusIsNil applies the IsNil predicate on the "status" field.
func StatusIsNil() predicate.OrderExtension {
	return predicate.OrderExtension(sql.FieldIsNull(FieldStatus))
}

// StatusNotNil applies the NotNil predicate on the "status" field.
func StatusNotNil() predicate.OrderExtension {
	return predicate.OrderExtension(sql.FieldNotNull(FieldStatus))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.OrderExtension {
	return predicate.OrderExtension(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.OrderExtension {
	return predicate.OrderExtension(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.OrderExtension {
	return predicate.OrderExtension(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.OrderExtension {
	return predicate.OrderExtension(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.OrderExtension {
	return predicate.OrderExtension(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.OrderExtension {
	return predicate.OrderExtension(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.OrderExtension {
	return predicate.OrderExtension(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.OrderExtension {
	return predicate.OrderExtension(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.OrderExtension {
	return predicate.OrderExtension(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.OrderExtension {
	return predicate.OrderExtension(sql.FieldNotNull(FieldDeletedAt))
}

// NoEQ applies the EQ predicate on the "no" field.
func NoEQ(v string) predicate.OrderExtension {
	return predicate.OrderExtension(sql.FieldEQ(FieldNo, v))
}

// NoNEQ applies the NEQ predicate on the "no" field.
func NoNEQ(v string) predicate.OrderExtension {
	return predicate.OrderExtension(sql.FieldNEQ(FieldNo, v))
}

// NoIn applies the In predicate on the "no" field.
func NoIn(vs ...string) predicate.OrderExtension {
	return predicate.OrderExtension(sql.FieldIn(FieldNo, vs...))
}

// NoNotIn applies the NotIn predicate on the "no" field.
func NoNotIn(vs ...string) predicate.OrderExtension {
	return predicate.OrderExtension(sql.FieldNotIn(FieldNo, vs...))
}

// NoGT applies the GT predicate on the "no" field.
func NoGT(v string) predicate.OrderExtension {
	return predicate.OrderExtension(sql.FieldGT(FieldNo, v))
}

// NoGTE applies the GTE predicate on the "no" field.
func NoGTE(v string) predicate.OrderExtension {
	return predicate.OrderExtension(sql.FieldGTE(FieldNo, v))
}

// NoLT applies the LT predicate on the "no" field.
func NoLT(v string) predicate.OrderExtension {
	return predicate.OrderExtension(sql.FieldLT(FieldNo, v))
}

// NoLTE applies the LTE predicate on the "no" field.
func NoLTE(v string) predicate.OrderExtension {
	return predicate.OrderExtension(sql.FieldLTE(FieldNo, v))
}

// NoContains applies the Contains predicate on the "no" field.
func NoContains(v string) predicate.OrderExtension {
	return predicate.OrderExtension(sql.FieldContains(FieldNo, v))
}

// NoHasPrefix applies the HasPrefix predicate on the "no" field.
func NoHasPrefix(v string) predicate.OrderExtension {
	return predicate.OrderExtension(sql.FieldHasPrefix(FieldNo, v))
}

// NoHasSuffix applies the HasSuffix predicate on the "no" field.
func NoHasSuffix(v string) predicate.OrderExtension {
	return predicate.OrderExtension(sql.FieldHasSuffix(FieldNo, v))
}

// NoEqualFold applies the EqualFold predicate on the "no" field.
func NoEqualFold(v string) predicate.OrderExtension {
	return predicate.OrderExtension(sql.FieldEqualFold(FieldNo, v))
}

// NoContainsFold applies the ContainsFold predicate on the "no" field.
func NoContainsFold(v string) predicate.OrderExtension {
	return predicate.OrderExtension(sql.FieldContainsFold(FieldNo, v))
}

// OrderIDEQ applies the EQ predicate on the "order_id" field.
func OrderIDEQ(v uint64) predicate.OrderExtension {
	return predicate.OrderExtension(sql.FieldEQ(FieldOrderID, v))
}

// OrderIDNEQ applies the NEQ predicate on the "order_id" field.
func OrderIDNEQ(v uint64) predicate.OrderExtension {
	return predicate.OrderExtension(sql.FieldNEQ(FieldOrderID, v))
}

// OrderIDIn applies the In predicate on the "order_id" field.
func OrderIDIn(vs ...uint64) predicate.OrderExtension {
	return predicate.OrderExtension(sql.FieldIn(FieldOrderID, vs...))
}

// OrderIDNotIn applies the NotIn predicate on the "order_id" field.
func OrderIDNotIn(vs ...uint64) predicate.OrderExtension {
	return predicate.OrderExtension(sql.FieldNotIn(FieldOrderID, vs...))
}

// OrderIDGT applies the GT predicate on the "order_id" field.
func OrderIDGT(v uint64) predicate.OrderExtension {
	return predicate.OrderExtension(sql.FieldGT(FieldOrderID, v))
}

// OrderIDGTE applies the GTE predicate on the "order_id" field.
func OrderIDGTE(v uint64) predicate.OrderExtension {
	return predicate.OrderExtension(sql.FieldGTE(FieldOrderID, v))
}

// OrderIDLT applies the LT predicate on the "order_id" field.
func OrderIDLT(v uint64) predicate.OrderExtension {
	return predicate.OrderExtension(sql.FieldLT(FieldOrderID, v))
}

// OrderIDLTE applies the LTE predicate on the "order_id" field.
func OrderIDLTE(v uint64) predicate.OrderExtension {
	return predicate.OrderExtension(sql.FieldLTE(FieldOrderID, v))
}

// ChannelCodeEQ applies the EQ predicate on the "channel_code" field.
func ChannelCodeEQ(v string) predicate.OrderExtension {
	return predicate.OrderExtension(sql.FieldEQ(FieldChannelCode, v))
}

// ChannelCodeNEQ applies the NEQ predicate on the "channel_code" field.
func ChannelCodeNEQ(v string) predicate.OrderExtension {
	return predicate.OrderExtension(sql.FieldNEQ(FieldChannelCode, v))
}

// ChannelCodeIn applies the In predicate on the "channel_code" field.
func ChannelCodeIn(vs ...string) predicate.OrderExtension {
	return predicate.OrderExtension(sql.FieldIn(FieldChannelCode, vs...))
}

// ChannelCodeNotIn applies the NotIn predicate on the "channel_code" field.
func ChannelCodeNotIn(vs ...string) predicate.OrderExtension {
	return predicate.OrderExtension(sql.FieldNotIn(FieldChannelCode, vs...))
}

// ChannelCodeGT applies the GT predicate on the "channel_code" field.
func ChannelCodeGT(v string) predicate.OrderExtension {
	return predicate.OrderExtension(sql.FieldGT(FieldChannelCode, v))
}

// ChannelCodeGTE applies the GTE predicate on the "channel_code" field.
func ChannelCodeGTE(v string) predicate.OrderExtension {
	return predicate.OrderExtension(sql.FieldGTE(FieldChannelCode, v))
}

// ChannelCodeLT applies the LT predicate on the "channel_code" field.
func ChannelCodeLT(v string) predicate.OrderExtension {
	return predicate.OrderExtension(sql.FieldLT(FieldChannelCode, v))
}

// ChannelCodeLTE applies the LTE predicate on the "channel_code" field.
func ChannelCodeLTE(v string) predicate.OrderExtension {
	return predicate.OrderExtension(sql.FieldLTE(FieldChannelCode, v))
}

// ChannelCodeContains applies the Contains predicate on the "channel_code" field.
func ChannelCodeContains(v string) predicate.OrderExtension {
	return predicate.OrderExtension(sql.FieldContains(FieldChannelCode, v))
}

// ChannelCodeHasPrefix applies the HasPrefix predicate on the "channel_code" field.
func ChannelCodeHasPrefix(v string) predicate.OrderExtension {
	return predicate.OrderExtension(sql.FieldHasPrefix(FieldChannelCode, v))
}

// ChannelCodeHasSuffix applies the HasSuffix predicate on the "channel_code" field.
func ChannelCodeHasSuffix(v string) predicate.OrderExtension {
	return predicate.OrderExtension(sql.FieldHasSuffix(FieldChannelCode, v))
}

// ChannelCodeEqualFold applies the EqualFold predicate on the "channel_code" field.
func ChannelCodeEqualFold(v string) predicate.OrderExtension {
	return predicate.OrderExtension(sql.FieldEqualFold(FieldChannelCode, v))
}

// ChannelCodeContainsFold applies the ContainsFold predicate on the "channel_code" field.
func ChannelCodeContainsFold(v string) predicate.OrderExtension {
	return predicate.OrderExtension(sql.FieldContainsFold(FieldChannelCode, v))
}

// UserIPEQ applies the EQ predicate on the "user_ip" field.
func UserIPEQ(v string) predicate.OrderExtension {
	return predicate.OrderExtension(sql.FieldEQ(FieldUserIP, v))
}

// UserIPNEQ applies the NEQ predicate on the "user_ip" field.
func UserIPNEQ(v string) predicate.OrderExtension {
	return predicate.OrderExtension(sql.FieldNEQ(FieldUserIP, v))
}

// UserIPIn applies the In predicate on the "user_ip" field.
func UserIPIn(vs ...string) predicate.OrderExtension {
	return predicate.OrderExtension(sql.FieldIn(FieldUserIP, vs...))
}

// UserIPNotIn applies the NotIn predicate on the "user_ip" field.
func UserIPNotIn(vs ...string) predicate.OrderExtension {
	return predicate.OrderExtension(sql.FieldNotIn(FieldUserIP, vs...))
}

// UserIPGT applies the GT predicate on the "user_ip" field.
func UserIPGT(v string) predicate.OrderExtension {
	return predicate.OrderExtension(sql.FieldGT(FieldUserIP, v))
}

// UserIPGTE applies the GTE predicate on the "user_ip" field.
func UserIPGTE(v string) predicate.OrderExtension {
	return predicate.OrderExtension(sql.FieldGTE(FieldUserIP, v))
}

// UserIPLT applies the LT predicate on the "user_ip" field.
func UserIPLT(v string) predicate.OrderExtension {
	return predicate.OrderExtension(sql.FieldLT(FieldUserIP, v))
}

// UserIPLTE applies the LTE predicate on the "user_ip" field.
func UserIPLTE(v string) predicate.OrderExtension {
	return predicate.OrderExtension(sql.FieldLTE(FieldUserIP, v))
}

// UserIPContains applies the Contains predicate on the "user_ip" field.
func UserIPContains(v string) predicate.OrderExtension {
	return predicate.OrderExtension(sql.FieldContains(FieldUserIP, v))
}

// UserIPHasPrefix applies the HasPrefix predicate on the "user_ip" field.
func UserIPHasPrefix(v string) predicate.OrderExtension {
	return predicate.OrderExtension(sql.FieldHasPrefix(FieldUserIP, v))
}

// UserIPHasSuffix applies the HasSuffix predicate on the "user_ip" field.
func UserIPHasSuffix(v string) predicate.OrderExtension {
	return predicate.OrderExtension(sql.FieldHasSuffix(FieldUserIP, v))
}

// UserIPEqualFold applies the EqualFold predicate on the "user_ip" field.
func UserIPEqualFold(v string) predicate.OrderExtension {
	return predicate.OrderExtension(sql.FieldEqualFold(FieldUserIP, v))
}

// UserIPContainsFold applies the ContainsFold predicate on the "user_ip" field.
func UserIPContainsFold(v string) predicate.OrderExtension {
	return predicate.OrderExtension(sql.FieldContainsFold(FieldUserIP, v))
}

// ChannelExtrasIsNil applies the IsNil predicate on the "channel_extras" field.
func ChannelExtrasIsNil() predicate.OrderExtension {
	return predicate.OrderExtension(sql.FieldIsNull(FieldChannelExtras))
}

// ChannelExtrasNotNil applies the NotNil predicate on the "channel_extras" field.
func ChannelExtrasNotNil() predicate.OrderExtension {
	return predicate.OrderExtension(sql.FieldNotNull(FieldChannelExtras))
}

// ChannelErrorCodeEQ applies the EQ predicate on the "channel_error_code" field.
func ChannelErrorCodeEQ(v string) predicate.OrderExtension {
	return predicate.OrderExtension(sql.FieldEQ(FieldChannelErrorCode, v))
}

// ChannelErrorCodeNEQ applies the NEQ predicate on the "channel_error_code" field.
func ChannelErrorCodeNEQ(v string) predicate.OrderExtension {
	return predicate.OrderExtension(sql.FieldNEQ(FieldChannelErrorCode, v))
}

// ChannelErrorCodeIn applies the In predicate on the "channel_error_code" field.
func ChannelErrorCodeIn(vs ...string) predicate.OrderExtension {
	return predicate.OrderExtension(sql.FieldIn(FieldChannelErrorCode, vs...))
}

// ChannelErrorCodeNotIn applies the NotIn predicate on the "channel_error_code" field.
func ChannelErrorCodeNotIn(vs ...string) predicate.OrderExtension {
	return predicate.OrderExtension(sql.FieldNotIn(FieldChannelErrorCode, vs...))
}

// ChannelErrorCodeGT applies the GT predicate on the "channel_error_code" field.
func ChannelErrorCodeGT(v string) predicate.OrderExtension {
	return predicate.OrderExtension(sql.FieldGT(FieldChannelErrorCode, v))
}

// ChannelErrorCodeGTE applies the GTE predicate on the "channel_error_code" field.
func ChannelErrorCodeGTE(v string) predicate.OrderExtension {
	return predicate.OrderExtension(sql.FieldGTE(FieldChannelErrorCode, v))
}

// ChannelErrorCodeLT applies the LT predicate on the "channel_error_code" field.
func ChannelErrorCodeLT(v string) predicate.OrderExtension {
	return predicate.OrderExtension(sql.FieldLT(FieldChannelErrorCode, v))
}

// ChannelErrorCodeLTE applies the LTE predicate on the "channel_error_code" field.
func ChannelErrorCodeLTE(v string) predicate.OrderExtension {
	return predicate.OrderExtension(sql.FieldLTE(FieldChannelErrorCode, v))
}

// ChannelErrorCodeContains applies the Contains predicate on the "channel_error_code" field.
func ChannelErrorCodeContains(v string) predicate.OrderExtension {
	return predicate.OrderExtension(sql.FieldContains(FieldChannelErrorCode, v))
}

// ChannelErrorCodeHasPrefix applies the HasPrefix predicate on the "channel_error_code" field.
func ChannelErrorCodeHasPrefix(v string) predicate.OrderExtension {
	return predicate.OrderExtension(sql.FieldHasPrefix(FieldChannelErrorCode, v))
}

// ChannelErrorCodeHasSuffix applies the HasSuffix predicate on the "channel_error_code" field.
func ChannelErrorCodeHasSuffix(v string) predicate.OrderExtension {
	return predicate.OrderExtension(sql.FieldHasSuffix(FieldChannelErrorCode, v))
}

// ChannelErrorCodeIsNil applies the IsNil predicate on the "channel_error_code" field.
func ChannelErrorCodeIsNil() predicate.OrderExtension {
	return predicate.OrderExtension(sql.FieldIsNull(FieldChannelErrorCode))
}

// ChannelErrorCodeNotNil applies the NotNil predicate on the "channel_error_code" field.
func ChannelErrorCodeNotNil() predicate.OrderExtension {
	return predicate.OrderExtension(sql.FieldNotNull(FieldChannelErrorCode))
}

// ChannelErrorCodeEqualFold applies the EqualFold predicate on the "channel_error_code" field.
func ChannelErrorCodeEqualFold(v string) predicate.OrderExtension {
	return predicate.OrderExtension(sql.FieldEqualFold(FieldChannelErrorCode, v))
}

// ChannelErrorCodeContainsFold applies the ContainsFold predicate on the "channel_error_code" field.
func ChannelErrorCodeContainsFold(v string) predicate.OrderExtension {
	return predicate.OrderExtension(sql.FieldContainsFold(FieldChannelErrorCode, v))
}

// ChannelErrorMsgEQ applies the EQ predicate on the "channel_error_msg" field.
func ChannelErrorMsgEQ(v string) predicate.OrderExtension {
	return predicate.OrderExtension(sql.FieldEQ(FieldChannelErrorMsg, v))
}

// ChannelErrorMsgNEQ applies the NEQ predicate on the "channel_error_msg" field.
func ChannelErrorMsgNEQ(v string) predicate.OrderExtension {
	return predicate.OrderExtension(sql.FieldNEQ(FieldChannelErrorMsg, v))
}

// ChannelErrorMsgIn applies the In predicate on the "channel_error_msg" field.
func ChannelErrorMsgIn(vs ...string) predicate.OrderExtension {
	return predicate.OrderExtension(sql.FieldIn(FieldChannelErrorMsg, vs...))
}

// ChannelErrorMsgNotIn applies the NotIn predicate on the "channel_error_msg" field.
func ChannelErrorMsgNotIn(vs ...string) predicate.OrderExtension {
	return predicate.OrderExtension(sql.FieldNotIn(FieldChannelErrorMsg, vs...))
}

// ChannelErrorMsgGT applies the GT predicate on the "channel_error_msg" field.
func ChannelErrorMsgGT(v string) predicate.OrderExtension {
	return predicate.OrderExtension(sql.FieldGT(FieldChannelErrorMsg, v))
}

// ChannelErrorMsgGTE applies the GTE predicate on the "channel_error_msg" field.
func ChannelErrorMsgGTE(v string) predicate.OrderExtension {
	return predicate.OrderExtension(sql.FieldGTE(FieldChannelErrorMsg, v))
}

// ChannelErrorMsgLT applies the LT predicate on the "channel_error_msg" field.
func ChannelErrorMsgLT(v string) predicate.OrderExtension {
	return predicate.OrderExtension(sql.FieldLT(FieldChannelErrorMsg, v))
}

// ChannelErrorMsgLTE applies the LTE predicate on the "channel_error_msg" field.
func ChannelErrorMsgLTE(v string) predicate.OrderExtension {
	return predicate.OrderExtension(sql.FieldLTE(FieldChannelErrorMsg, v))
}

// ChannelErrorMsgContains applies the Contains predicate on the "channel_error_msg" field.
func ChannelErrorMsgContains(v string) predicate.OrderExtension {
	return predicate.OrderExtension(sql.FieldContains(FieldChannelErrorMsg, v))
}

// ChannelErrorMsgHasPrefix applies the HasPrefix predicate on the "channel_error_msg" field.
func ChannelErrorMsgHasPrefix(v string) predicate.OrderExtension {
	return predicate.OrderExtension(sql.FieldHasPrefix(FieldChannelErrorMsg, v))
}

// ChannelErrorMsgHasSuffix applies the HasSuffix predicate on the "channel_error_msg" field.
func ChannelErrorMsgHasSuffix(v string) predicate.OrderExtension {
	return predicate.OrderExtension(sql.FieldHasSuffix(FieldChannelErrorMsg, v))
}

// ChannelErrorMsgIsNil applies the IsNil predicate on the "channel_error_msg" field.
func ChannelErrorMsgIsNil() predicate.OrderExtension {
	return predicate.OrderExtension(sql.FieldIsNull(FieldChannelErrorMsg))
}

// ChannelErrorMsgNotNil applies the NotNil predicate on the "channel_error_msg" field.
func ChannelErrorMsgNotNil() predicate.OrderExtension {
	return predicate.OrderExtension(sql.FieldNotNull(FieldChannelErrorMsg))
}

// ChannelErrorMsgEqualFold applies the EqualFold predicate on the "channel_error_msg" field.
func ChannelErrorMsgEqualFold(v string) predicate.OrderExtension {
	return predicate.OrderExtension(sql.FieldEqualFold(FieldChannelErrorMsg, v))
}

// ChannelErrorMsgContainsFold applies the ContainsFold predicate on the "channel_error_msg" field.
func ChannelErrorMsgContainsFold(v string) predicate.OrderExtension {
	return predicate.OrderExtension(sql.FieldContainsFold(FieldChannelErrorMsg, v))
}

// ChannelNotifyDataEQ applies the EQ predicate on the "channel_notify_data" field.
func ChannelNotifyDataEQ(v string) predicate.OrderExtension {
	return predicate.OrderExtension(sql.FieldEQ(FieldChannelNotifyData, v))
}

// ChannelNotifyDataNEQ applies the NEQ predicate on the "channel_notify_data" field.
func ChannelNotifyDataNEQ(v string) predicate.OrderExtension {
	return predicate.OrderExtension(sql.FieldNEQ(FieldChannelNotifyData, v))
}

// ChannelNotifyDataIn applies the In predicate on the "channel_notify_data" field.
func ChannelNotifyDataIn(vs ...string) predicate.OrderExtension {
	return predicate.OrderExtension(sql.FieldIn(FieldChannelNotifyData, vs...))
}

// ChannelNotifyDataNotIn applies the NotIn predicate on the "channel_notify_data" field.
func ChannelNotifyDataNotIn(vs ...string) predicate.OrderExtension {
	return predicate.OrderExtension(sql.FieldNotIn(FieldChannelNotifyData, vs...))
}

// ChannelNotifyDataGT applies the GT predicate on the "channel_notify_data" field.
func ChannelNotifyDataGT(v string) predicate.OrderExtension {
	return predicate.OrderExtension(sql.FieldGT(FieldChannelNotifyData, v))
}

// ChannelNotifyDataGTE applies the GTE predicate on the "channel_notify_data" field.
func ChannelNotifyDataGTE(v string) predicate.OrderExtension {
	return predicate.OrderExtension(sql.FieldGTE(FieldChannelNotifyData, v))
}

// ChannelNotifyDataLT applies the LT predicate on the "channel_notify_data" field.
func ChannelNotifyDataLT(v string) predicate.OrderExtension {
	return predicate.OrderExtension(sql.FieldLT(FieldChannelNotifyData, v))
}

// ChannelNotifyDataLTE applies the LTE predicate on the "channel_notify_data" field.
func ChannelNotifyDataLTE(v string) predicate.OrderExtension {
	return predicate.OrderExtension(sql.FieldLTE(FieldChannelNotifyData, v))
}

// ChannelNotifyDataContains applies the Contains predicate on the "channel_notify_data" field.
func ChannelNotifyDataContains(v string) predicate.OrderExtension {
	return predicate.OrderExtension(sql.FieldContains(FieldChannelNotifyData, v))
}

// ChannelNotifyDataHasPrefix applies the HasPrefix predicate on the "channel_notify_data" field.
func ChannelNotifyDataHasPrefix(v string) predicate.OrderExtension {
	return predicate.OrderExtension(sql.FieldHasPrefix(FieldChannelNotifyData, v))
}

// ChannelNotifyDataHasSuffix applies the HasSuffix predicate on the "channel_notify_data" field.
func ChannelNotifyDataHasSuffix(v string) predicate.OrderExtension {
	return predicate.OrderExtension(sql.FieldHasSuffix(FieldChannelNotifyData, v))
}

// ChannelNotifyDataIsNil applies the IsNil predicate on the "channel_notify_data" field.
func ChannelNotifyDataIsNil() predicate.OrderExtension {
	return predicate.OrderExtension(sql.FieldIsNull(FieldChannelNotifyData))
}

// ChannelNotifyDataNotNil applies the NotNil predicate on the "channel_notify_data" field.
func ChannelNotifyDataNotNil() predicate.OrderExtension {
	return predicate.OrderExtension(sql.FieldNotNull(FieldChannelNotifyData))
}

// ChannelNotifyDataEqualFold applies the EqualFold predicate on the "channel_notify_data" field.
func ChannelNotifyDataEqualFold(v string) predicate.OrderExtension {
	return predicate.OrderExtension(sql.FieldEqualFold(FieldChannelNotifyData, v))
}

// ChannelNotifyDataContainsFold applies the ContainsFold predicate on the "channel_notify_data" field.
func ChannelNotifyDataContainsFold(v string) predicate.OrderExtension {
	return predicate.OrderExtension(sql.FieldContainsFold(FieldChannelNotifyData, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.OrderExtension) predicate.OrderExtension {
	return predicate.OrderExtension(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.OrderExtension) predicate.OrderExtension {
	return predicate.OrderExtension(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.OrderExtension) predicate.OrderExtension {
	return predicate.OrderExtension(sql.NotPredicates(p))
}

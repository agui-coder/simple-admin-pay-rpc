// Code generated by ent, DO NOT EDIT.

package orderextension

import (
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the orderextension type in the database.
	Label = "order_extension"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldNo holds the string denoting the no field in the database.
	FieldNo = "no"
	// FieldOrderID holds the string denoting the order_id field in the database.
	FieldOrderID = "order_id"
	// FieldChannelID holds the string denoting the channel_id field in the database.
	FieldChannelID = "channel_id"
	// FieldChannelCode holds the string denoting the channel_code field in the database.
	FieldChannelCode = "channel_code"
	// FieldUserIP holds the string denoting the user_ip field in the database.
	FieldUserIP = "user_ip"
	// FieldChannelExtras holds the string denoting the channel_extras field in the database.
	FieldChannelExtras = "channel_extras"
	// FieldChannelErrorCode holds the string denoting the channel_error_code field in the database.
	FieldChannelErrorCode = "channel_error_code"
	// FieldChannelErrorMsg holds the string denoting the channel_error_msg field in the database.
	FieldChannelErrorMsg = "channel_error_msg"
	// FieldChannelNotifyData holds the string denoting the channel_notify_data field in the database.
	FieldChannelNotifyData = "channel_notify_data"
	// Table holds the table name of the orderextension in the database.
	Table = "pay_order_extension"
)

// Columns holds all SQL columns for orderextension fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldStatus,
	FieldDeletedAt,
	FieldNo,
	FieldOrderID,
	FieldChannelID,
	FieldChannelCode,
	FieldUserIP,
	FieldChannelExtras,
	FieldChannelErrorCode,
	FieldChannelErrorMsg,
	FieldChannelNotifyData,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "github.com/agui-coder/simple-admin-pay-rpc/ent/runtime"
var (
	Hooks        [1]ent.Hook
	Interceptors [1]ent.Interceptor
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultStatus holds the default value on creation for the "status" field.
	DefaultStatus uint8
)

// OrderOption defines the ordering options for the OrderExtension queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByNo orders the results by the no field.
func ByNo(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNo, opts...).ToFunc()
}

// ByOrderID orders the results by the order_id field.
func ByOrderID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOrderID, opts...).ToFunc()
}

// ByChannelID orders the results by the channel_id field.
func ByChannelID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldChannelID, opts...).ToFunc()
}

// ByChannelCode orders the results by the channel_code field.
func ByChannelCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldChannelCode, opts...).ToFunc()
}

// ByUserIP orders the results by the user_ip field.
func ByUserIP(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserIP, opts...).ToFunc()
}

// ByChannelErrorCode orders the results by the channel_error_code field.
func ByChannelErrorCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldChannelErrorCode, opts...).ToFunc()
}

// ByChannelErrorMsg orders the results by the channel_error_msg field.
func ByChannelErrorMsg(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldChannelErrorMsg, opts...).ToFunc()
}

// ByChannelNotifyData orders the results by the channel_notify_data field.
func ByChannelNotifyData(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldChannelNotifyData, opts...).ToFunc()
}

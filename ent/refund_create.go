// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/agui-coder/simple-admin-pay-rpc/ent/refund"
)

// RefundCreate is the builder for creating a Refund entity.
type RefundCreate struct {
	config
	mutation *RefundMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (rc *RefundCreate) SetCreatedAt(t time.Time) *RefundCreate {
	rc.mutation.SetCreatedAt(t)
	return rc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (rc *RefundCreate) SetNillableCreatedAt(t *time.Time) *RefundCreate {
	if t != nil {
		rc.SetCreatedAt(*t)
	}
	return rc
}

// SetUpdatedAt sets the "updated_at" field.
func (rc *RefundCreate) SetUpdatedAt(t time.Time) *RefundCreate {
	rc.mutation.SetUpdatedAt(t)
	return rc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (rc *RefundCreate) SetNillableUpdatedAt(t *time.Time) *RefundCreate {
	if t != nil {
		rc.SetUpdatedAt(*t)
	}
	return rc
}

// SetStatus sets the "status" field.
func (rc *RefundCreate) SetStatus(u uint8) *RefundCreate {
	rc.mutation.SetStatus(u)
	return rc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (rc *RefundCreate) SetNillableStatus(u *uint8) *RefundCreate {
	if u != nil {
		rc.SetStatus(*u)
	}
	return rc
}

// SetDeletedAt sets the "deleted_at" field.
func (rc *RefundCreate) SetDeletedAt(t time.Time) *RefundCreate {
	rc.mutation.SetDeletedAt(t)
	return rc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (rc *RefundCreate) SetNillableDeletedAt(t *time.Time) *RefundCreate {
	if t != nil {
		rc.SetDeletedAt(*t)
	}
	return rc
}

// SetNo sets the "no" field.
func (rc *RefundCreate) SetNo(s string) *RefundCreate {
	rc.mutation.SetNo(s)
	return rc
}

// SetChannelCode sets the "channel_code" field.
func (rc *RefundCreate) SetChannelCode(s string) *RefundCreate {
	rc.mutation.SetChannelCode(s)
	return rc
}

// SetOrderID sets the "order_id" field.
func (rc *RefundCreate) SetOrderID(u uint64) *RefundCreate {
	rc.mutation.SetOrderID(u)
	return rc
}

// SetOrderNo sets the "order_no" field.
func (rc *RefundCreate) SetOrderNo(s string) *RefundCreate {
	rc.mutation.SetOrderNo(s)
	return rc
}

// SetMerchantOrderID sets the "merchant_order_id" field.
func (rc *RefundCreate) SetMerchantOrderID(s string) *RefundCreate {
	rc.mutation.SetMerchantOrderID(s)
	return rc
}

// SetMerchantRefundID sets the "merchant_refund_id" field.
func (rc *RefundCreate) SetMerchantRefundID(s string) *RefundCreate {
	rc.mutation.SetMerchantRefundID(s)
	return rc
}

// SetPayPrice sets the "pay_price" field.
func (rc *RefundCreate) SetPayPrice(i int32) *RefundCreate {
	rc.mutation.SetPayPrice(i)
	return rc
}

// SetRefundPrice sets the "refund_price" field.
func (rc *RefundCreate) SetRefundPrice(i int32) *RefundCreate {
	rc.mutation.SetRefundPrice(i)
	return rc
}

// SetReason sets the "reason" field.
func (rc *RefundCreate) SetReason(s string) *RefundCreate {
	rc.mutation.SetReason(s)
	return rc
}

// SetUserIP sets the "user_ip" field.
func (rc *RefundCreate) SetUserIP(s string) *RefundCreate {
	rc.mutation.SetUserIP(s)
	return rc
}

// SetNillableUserIP sets the "user_ip" field if the given value is not nil.
func (rc *RefundCreate) SetNillableUserIP(s *string) *RefundCreate {
	if s != nil {
		rc.SetUserIP(*s)
	}
	return rc
}

// SetChannelOrderNo sets the "channel_order_no" field.
func (rc *RefundCreate) SetChannelOrderNo(s string) *RefundCreate {
	rc.mutation.SetChannelOrderNo(s)
	return rc
}

// SetChannelRefundNo sets the "channel_refund_no" field.
func (rc *RefundCreate) SetChannelRefundNo(s string) *RefundCreate {
	rc.mutation.SetChannelRefundNo(s)
	return rc
}

// SetNillableChannelRefundNo sets the "channel_refund_no" field if the given value is not nil.
func (rc *RefundCreate) SetNillableChannelRefundNo(s *string) *RefundCreate {
	if s != nil {
		rc.SetChannelRefundNo(*s)
	}
	return rc
}

// SetSuccessTime sets the "success_time" field.
func (rc *RefundCreate) SetSuccessTime(t time.Time) *RefundCreate {
	rc.mutation.SetSuccessTime(t)
	return rc
}

// SetNillableSuccessTime sets the "success_time" field if the given value is not nil.
func (rc *RefundCreate) SetNillableSuccessTime(t *time.Time) *RefundCreate {
	if t != nil {
		rc.SetSuccessTime(*t)
	}
	return rc
}

// SetChannelErrorCode sets the "channel_error_code" field.
func (rc *RefundCreate) SetChannelErrorCode(s string) *RefundCreate {
	rc.mutation.SetChannelErrorCode(s)
	return rc
}

// SetNillableChannelErrorCode sets the "channel_error_code" field if the given value is not nil.
func (rc *RefundCreate) SetNillableChannelErrorCode(s *string) *RefundCreate {
	if s != nil {
		rc.SetChannelErrorCode(*s)
	}
	return rc
}

// SetChannelErrorMsg sets the "channel_error_msg" field.
func (rc *RefundCreate) SetChannelErrorMsg(s string) *RefundCreate {
	rc.mutation.SetChannelErrorMsg(s)
	return rc
}

// SetNillableChannelErrorMsg sets the "channel_error_msg" field if the given value is not nil.
func (rc *RefundCreate) SetNillableChannelErrorMsg(s *string) *RefundCreate {
	if s != nil {
		rc.SetChannelErrorMsg(*s)
	}
	return rc
}

// SetChannelNotifyData sets the "channel_notify_data" field.
func (rc *RefundCreate) SetChannelNotifyData(s string) *RefundCreate {
	rc.mutation.SetChannelNotifyData(s)
	return rc
}

// SetNillableChannelNotifyData sets the "channel_notify_data" field if the given value is not nil.
func (rc *RefundCreate) SetNillableChannelNotifyData(s *string) *RefundCreate {
	if s != nil {
		rc.SetChannelNotifyData(*s)
	}
	return rc
}

// SetID sets the "id" field.
func (rc *RefundCreate) SetID(u uint64) *RefundCreate {
	rc.mutation.SetID(u)
	return rc
}

// Mutation returns the RefundMutation object of the builder.
func (rc *RefundCreate) Mutation() *RefundMutation {
	return rc.mutation
}

// Save creates the Refund in the database.
func (rc *RefundCreate) Save(ctx context.Context) (*Refund, error) {
	if err := rc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, rc.sqlSave, rc.mutation, rc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (rc *RefundCreate) SaveX(ctx context.Context) *Refund {
	v, err := rc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rc *RefundCreate) Exec(ctx context.Context) error {
	_, err := rc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rc *RefundCreate) ExecX(ctx context.Context) {
	if err := rc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rc *RefundCreate) defaults() error {
	if _, ok := rc.mutation.CreatedAt(); !ok {
		if refund.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized refund.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := refund.DefaultCreatedAt()
		rc.mutation.SetCreatedAt(v)
	}
	if _, ok := rc.mutation.UpdatedAt(); !ok {
		if refund.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized refund.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := refund.DefaultUpdatedAt()
		rc.mutation.SetUpdatedAt(v)
	}
	if _, ok := rc.mutation.Status(); !ok {
		v := refund.DefaultStatus
		rc.mutation.SetStatus(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (rc *RefundCreate) check() error {
	if _, ok := rc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Refund.created_at"`)}
	}
	if _, ok := rc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Refund.updated_at"`)}
	}
	if _, ok := rc.mutation.No(); !ok {
		return &ValidationError{Name: "no", err: errors.New(`ent: missing required field "Refund.no"`)}
	}
	if _, ok := rc.mutation.ChannelCode(); !ok {
		return &ValidationError{Name: "channel_code", err: errors.New(`ent: missing required field "Refund.channel_code"`)}
	}
	if _, ok := rc.mutation.OrderID(); !ok {
		return &ValidationError{Name: "order_id", err: errors.New(`ent: missing required field "Refund.order_id"`)}
	}
	if _, ok := rc.mutation.OrderNo(); !ok {
		return &ValidationError{Name: "order_no", err: errors.New(`ent: missing required field "Refund.order_no"`)}
	}
	if _, ok := rc.mutation.MerchantOrderID(); !ok {
		return &ValidationError{Name: "merchant_order_id", err: errors.New(`ent: missing required field "Refund.merchant_order_id"`)}
	}
	if _, ok := rc.mutation.MerchantRefundID(); !ok {
		return &ValidationError{Name: "merchant_refund_id", err: errors.New(`ent: missing required field "Refund.merchant_refund_id"`)}
	}
	if _, ok := rc.mutation.PayPrice(); !ok {
		return &ValidationError{Name: "pay_price", err: errors.New(`ent: missing required field "Refund.pay_price"`)}
	}
	if _, ok := rc.mutation.RefundPrice(); !ok {
		return &ValidationError{Name: "refund_price", err: errors.New(`ent: missing required field "Refund.refund_price"`)}
	}
	if _, ok := rc.mutation.Reason(); !ok {
		return &ValidationError{Name: "reason", err: errors.New(`ent: missing required field "Refund.reason"`)}
	}
	if _, ok := rc.mutation.ChannelOrderNo(); !ok {
		return &ValidationError{Name: "channel_order_no", err: errors.New(`ent: missing required field "Refund.channel_order_no"`)}
	}
	return nil
}

func (rc *RefundCreate) sqlSave(ctx context.Context) (*Refund, error) {
	if err := rc.check(); err != nil {
		return nil, err
	}
	_node, _spec := rc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint64(id)
	}
	rc.mutation.id = &_node.ID
	rc.mutation.done = true
	return _node, nil
}

func (rc *RefundCreate) createSpec() (*Refund, *sqlgraph.CreateSpec) {
	var (
		_node = &Refund{config: rc.config}
		_spec = sqlgraph.NewCreateSpec(refund.Table, sqlgraph.NewFieldSpec(refund.FieldID, field.TypeUint64))
	)
	if id, ok := rc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := rc.mutation.CreatedAt(); ok {
		_spec.SetField(refund.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := rc.mutation.UpdatedAt(); ok {
		_spec.SetField(refund.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := rc.mutation.Status(); ok {
		_spec.SetField(refund.FieldStatus, field.TypeUint8, value)
		_node.Status = value
	}
	if value, ok := rc.mutation.DeletedAt(); ok {
		_spec.SetField(refund.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := rc.mutation.No(); ok {
		_spec.SetField(refund.FieldNo, field.TypeString, value)
		_node.No = value
	}
	if value, ok := rc.mutation.ChannelCode(); ok {
		_spec.SetField(refund.FieldChannelCode, field.TypeString, value)
		_node.ChannelCode = value
	}
	if value, ok := rc.mutation.OrderID(); ok {
		_spec.SetField(refund.FieldOrderID, field.TypeUint64, value)
		_node.OrderID = value
	}
	if value, ok := rc.mutation.OrderNo(); ok {
		_spec.SetField(refund.FieldOrderNo, field.TypeString, value)
		_node.OrderNo = value
	}
	if value, ok := rc.mutation.MerchantOrderID(); ok {
		_spec.SetField(refund.FieldMerchantOrderID, field.TypeString, value)
		_node.MerchantOrderID = value
	}
	if value, ok := rc.mutation.MerchantRefundID(); ok {
		_spec.SetField(refund.FieldMerchantRefundID, field.TypeString, value)
		_node.MerchantRefundID = value
	}
	if value, ok := rc.mutation.PayPrice(); ok {
		_spec.SetField(refund.FieldPayPrice, field.TypeInt32, value)
		_node.PayPrice = value
	}
	if value, ok := rc.mutation.RefundPrice(); ok {
		_spec.SetField(refund.FieldRefundPrice, field.TypeInt32, value)
		_node.RefundPrice = value
	}
	if value, ok := rc.mutation.Reason(); ok {
		_spec.SetField(refund.FieldReason, field.TypeString, value)
		_node.Reason = value
	}
	if value, ok := rc.mutation.UserIP(); ok {
		_spec.SetField(refund.FieldUserIP, field.TypeString, value)
		_node.UserIP = value
	}
	if value, ok := rc.mutation.ChannelOrderNo(); ok {
		_spec.SetField(refund.FieldChannelOrderNo, field.TypeString, value)
		_node.ChannelOrderNo = value
	}
	if value, ok := rc.mutation.ChannelRefundNo(); ok {
		_spec.SetField(refund.FieldChannelRefundNo, field.TypeString, value)
		_node.ChannelRefundNo = value
	}
	if value, ok := rc.mutation.SuccessTime(); ok {
		_spec.SetField(refund.FieldSuccessTime, field.TypeTime, value)
		_node.SuccessTime = value
	}
	if value, ok := rc.mutation.ChannelErrorCode(); ok {
		_spec.SetField(refund.FieldChannelErrorCode, field.TypeString, value)
		_node.ChannelErrorCode = value
	}
	if value, ok := rc.mutation.ChannelErrorMsg(); ok {
		_spec.SetField(refund.FieldChannelErrorMsg, field.TypeString, value)
		_node.ChannelErrorMsg = value
	}
	if value, ok := rc.mutation.ChannelNotifyData(); ok {
		_spec.SetField(refund.FieldChannelNotifyData, field.TypeString, value)
		_node.ChannelNotifyData = value
	}
	return _node, _spec
}

// RefundCreateBulk is the builder for creating many Refund entities in bulk.
type RefundCreateBulk struct {
	config
	err      error
	builders []*RefundCreate
}

// Save creates the Refund entities in the database.
func (rcb *RefundCreateBulk) Save(ctx context.Context) ([]*Refund, error) {
	if rcb.err != nil {
		return nil, rcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(rcb.builders))
	nodes := make([]*Refund, len(rcb.builders))
	mutators := make([]Mutator, len(rcb.builders))
	for i := range rcb.builders {
		func(i int, root context.Context) {
			builder := rcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*RefundMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rcb *RefundCreateBulk) SaveX(ctx context.Context) []*Refund {
	v, err := rcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rcb *RefundCreateBulk) Exec(ctx context.Context) error {
	_, err := rcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rcb *RefundCreateBulk) ExecX(ctx context.Context) {
	if err := rcb.Exec(ctx); err != nil {
		panic(err)
	}
}

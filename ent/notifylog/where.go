// Code generated by ent, DO NOT EDIT.

package notifylog

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/agui-coder/simple-admin-pay-rpc/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uint64) predicate.NotifyLog {
	return predicate.NotifyLog(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint64) predicate.NotifyLog {
	return predicate.NotifyLog(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint64) predicate.NotifyLog {
	return predicate.NotifyLog(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint64) predicate.NotifyLog {
	return predicate.NotifyLog(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint64) predicate.NotifyLog {
	return predicate.NotifyLog(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint64) predicate.NotifyLog {
	return predicate.NotifyLog(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint64) predicate.NotifyLog {
	return predicate.NotifyLog(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint64) predicate.NotifyLog {
	return predicate.NotifyLog(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint64) predicate.NotifyLog {
	return predicate.NotifyLog(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.NotifyLog {
	return predicate.NotifyLog(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.NotifyLog {
	return predicate.NotifyLog(sql.FieldEQ(FieldUpdatedAt, v))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v uint8) predicate.NotifyLog {
	return predicate.NotifyLog(sql.FieldEQ(FieldStatus, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.NotifyLog {
	return predicate.NotifyLog(sql.FieldEQ(FieldDeletedAt, v))
}

// TaskID applies equality check predicate on the "task_id" field. It's identical to TaskIDEQ.
func TaskID(v uint64) predicate.NotifyLog {
	return predicate.NotifyLog(sql.FieldEQ(FieldTaskID, v))
}

// NotifyTimes applies equality check predicate on the "notify_times" field. It's identical to NotifyTimesEQ.
func NotifyTimes(v int8) predicate.NotifyLog {
	return predicate.NotifyLog(sql.FieldEQ(FieldNotifyTimes, v))
}

// Response applies equality check predicate on the "response" field. It's identical to ResponseEQ.
func Response(v string) predicate.NotifyLog {
	return predicate.NotifyLog(sql.FieldEQ(FieldResponse, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.NotifyLog {
	return predicate.NotifyLog(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.NotifyLog {
	return predicate.NotifyLog(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.NotifyLog {
	return predicate.NotifyLog(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.NotifyLog {
	return predicate.NotifyLog(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.NotifyLog {
	return predicate.NotifyLog(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.NotifyLog {
	return predicate.NotifyLog(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.NotifyLog {
	return predicate.NotifyLog(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.NotifyLog {
	return predicate.NotifyLog(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.NotifyLog {
	return predicate.NotifyLog(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.NotifyLog {
	return predicate.NotifyLog(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.NotifyLog {
	return predicate.NotifyLog(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.NotifyLog {
	return predicate.NotifyLog(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.NotifyLog {
	return predicate.NotifyLog(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.NotifyLog {
	return predicate.NotifyLog(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.NotifyLog {
	return predicate.NotifyLog(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.NotifyLog {
	return predicate.NotifyLog(sql.FieldLTE(FieldUpdatedAt, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v uint8) predicate.NotifyLog {
	return predicate.NotifyLog(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v uint8) predicate.NotifyLog {
	return predicate.NotifyLog(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...uint8) predicate.NotifyLog {
	return predicate.NotifyLog(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...uint8) predicate.NotifyLog {
	return predicate.NotifyLog(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v uint8) predicate.NotifyLog {
	return predicate.NotifyLog(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v uint8) predicate.NotifyLog {
	return predicate.NotifyLog(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v uint8) predicate.NotifyLog {
	return predicate.NotifyLog(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v uint8) predicate.NotifyLog {
	return predicate.NotifyLog(sql.FieldLTE(FieldStatus, v))
}

// StatusIsNil applies the IsNil predicate on the "status" field.
func StatusIsNil() predicate.NotifyLog {
	return predicate.NotifyLog(sql.FieldIsNull(FieldStatus))
}

// StatusNotNil applies the NotNil predicate on the "status" field.
func StatusNotNil() predicate.NotifyLog {
	return predicate.NotifyLog(sql.FieldNotNull(FieldStatus))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.NotifyLog {
	return predicate.NotifyLog(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.NotifyLog {
	return predicate.NotifyLog(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.NotifyLog {
	return predicate.NotifyLog(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.NotifyLog {
	return predicate.NotifyLog(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.NotifyLog {
	return predicate.NotifyLog(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.NotifyLog {
	return predicate.NotifyLog(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.NotifyLog {
	return predicate.NotifyLog(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.NotifyLog {
	return predicate.NotifyLog(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.NotifyLog {
	return predicate.NotifyLog(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.NotifyLog {
	return predicate.NotifyLog(sql.FieldNotNull(FieldDeletedAt))
}

// TaskIDEQ applies the EQ predicate on the "task_id" field.
func TaskIDEQ(v uint64) predicate.NotifyLog {
	return predicate.NotifyLog(sql.FieldEQ(FieldTaskID, v))
}

// TaskIDNEQ applies the NEQ predicate on the "task_id" field.
func TaskIDNEQ(v uint64) predicate.NotifyLog {
	return predicate.NotifyLog(sql.FieldNEQ(FieldTaskID, v))
}

// TaskIDIn applies the In predicate on the "task_id" field.
func TaskIDIn(vs ...uint64) predicate.NotifyLog {
	return predicate.NotifyLog(sql.FieldIn(FieldTaskID, vs...))
}

// TaskIDNotIn applies the NotIn predicate on the "task_id" field.
func TaskIDNotIn(vs ...uint64) predicate.NotifyLog {
	return predicate.NotifyLog(sql.FieldNotIn(FieldTaskID, vs...))
}

// TaskIDGT applies the GT predicate on the "task_id" field.
func TaskIDGT(v uint64) predicate.NotifyLog {
	return predicate.NotifyLog(sql.FieldGT(FieldTaskID, v))
}

// TaskIDGTE applies the GTE predicate on the "task_id" field.
func TaskIDGTE(v uint64) predicate.NotifyLog {
	return predicate.NotifyLog(sql.FieldGTE(FieldTaskID, v))
}

// TaskIDLT applies the LT predicate on the "task_id" field.
func TaskIDLT(v uint64) predicate.NotifyLog {
	return predicate.NotifyLog(sql.FieldLT(FieldTaskID, v))
}

// TaskIDLTE applies the LTE predicate on the "task_id" field.
func TaskIDLTE(v uint64) predicate.NotifyLog {
	return predicate.NotifyLog(sql.FieldLTE(FieldTaskID, v))
}

// NotifyTimesEQ applies the EQ predicate on the "notify_times" field.
func NotifyTimesEQ(v int8) predicate.NotifyLog {
	return predicate.NotifyLog(sql.FieldEQ(FieldNotifyTimes, v))
}

// NotifyTimesNEQ applies the NEQ predicate on the "notify_times" field.
func NotifyTimesNEQ(v int8) predicate.NotifyLog {
	return predicate.NotifyLog(sql.FieldNEQ(FieldNotifyTimes, v))
}

// NotifyTimesIn applies the In predicate on the "notify_times" field.
func NotifyTimesIn(vs ...int8) predicate.NotifyLog {
	return predicate.NotifyLog(sql.FieldIn(FieldNotifyTimes, vs...))
}

// NotifyTimesNotIn applies the NotIn predicate on the "notify_times" field.
func NotifyTimesNotIn(vs ...int8) predicate.NotifyLog {
	return predicate.NotifyLog(sql.FieldNotIn(FieldNotifyTimes, vs...))
}

// NotifyTimesGT applies the GT predicate on the "notify_times" field.
func NotifyTimesGT(v int8) predicate.NotifyLog {
	return predicate.NotifyLog(sql.FieldGT(FieldNotifyTimes, v))
}

// NotifyTimesGTE applies the GTE predicate on the "notify_times" field.
func NotifyTimesGTE(v int8) predicate.NotifyLog {
	return predicate.NotifyLog(sql.FieldGTE(FieldNotifyTimes, v))
}

// NotifyTimesLT applies the LT predicate on the "notify_times" field.
func NotifyTimesLT(v int8) predicate.NotifyLog {
	return predicate.NotifyLog(sql.FieldLT(FieldNotifyTimes, v))
}

// NotifyTimesLTE applies the LTE predicate on the "notify_times" field.
func NotifyTimesLTE(v int8) predicate.NotifyLog {
	return predicate.NotifyLog(sql.FieldLTE(FieldNotifyTimes, v))
}

// ResponseEQ applies the EQ predicate on the "response" field.
func ResponseEQ(v string) predicate.NotifyLog {
	return predicate.NotifyLog(sql.FieldEQ(FieldResponse, v))
}

// ResponseNEQ applies the NEQ predicate on the "response" field.
func ResponseNEQ(v string) predicate.NotifyLog {
	return predicate.NotifyLog(sql.FieldNEQ(FieldResponse, v))
}

// ResponseIn applies the In predicate on the "response" field.
func ResponseIn(vs ...string) predicate.NotifyLog {
	return predicate.NotifyLog(sql.FieldIn(FieldResponse, vs...))
}

// ResponseNotIn applies the NotIn predicate on the "response" field.
func ResponseNotIn(vs ...string) predicate.NotifyLog {
	return predicate.NotifyLog(sql.FieldNotIn(FieldResponse, vs...))
}

// ResponseGT applies the GT predicate on the "response" field.
func ResponseGT(v string) predicate.NotifyLog {
	return predicate.NotifyLog(sql.FieldGT(FieldResponse, v))
}

// ResponseGTE applies the GTE predicate on the "response" field.
func ResponseGTE(v string) predicate.NotifyLog {
	return predicate.NotifyLog(sql.FieldGTE(FieldResponse, v))
}

// ResponseLT applies the LT predicate on the "response" field.
func ResponseLT(v string) predicate.NotifyLog {
	return predicate.NotifyLog(sql.FieldLT(FieldResponse, v))
}

// ResponseLTE applies the LTE predicate on the "response" field.
func ResponseLTE(v string) predicate.NotifyLog {
	return predicate.NotifyLog(sql.FieldLTE(FieldResponse, v))
}

// ResponseContains applies the Contains predicate on the "response" field.
func ResponseContains(v string) predicate.NotifyLog {
	return predicate.NotifyLog(sql.FieldContains(FieldResponse, v))
}

// ResponseHasPrefix applies the HasPrefix predicate on the "response" field.
func ResponseHasPrefix(v string) predicate.NotifyLog {
	return predicate.NotifyLog(sql.FieldHasPrefix(FieldResponse, v))
}

// ResponseHasSuffix applies the HasSuffix predicate on the "response" field.
func ResponseHasSuffix(v string) predicate.NotifyLog {
	return predicate.NotifyLog(sql.FieldHasSuffix(FieldResponse, v))
}

// ResponseEqualFold applies the EqualFold predicate on the "response" field.
func ResponseEqualFold(v string) predicate.NotifyLog {
	return predicate.NotifyLog(sql.FieldEqualFold(FieldResponse, v))
}

// ResponseContainsFold applies the ContainsFold predicate on the "response" field.
func ResponseContainsFold(v string) predicate.NotifyLog {
	return predicate.NotifyLog(sql.FieldContainsFold(FieldResponse, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.NotifyLog) predicate.NotifyLog {
	return predicate.NotifyLog(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.NotifyLog) predicate.NotifyLog {
	return predicate.NotifyLog(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.NotifyLog) predicate.NotifyLog {
	return predicate.NotifyLog(sql.NotPredicates(p))
}

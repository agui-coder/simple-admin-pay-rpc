// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/agui-coder/simple-admin-pay-rpc/ent/app"
	"github.com/agui-coder/simple-admin-pay-rpc/ent/predicate"
)

// AppUpdate is the builder for updating App entities.
type AppUpdate struct {
	config
	hooks    []Hook
	mutation *AppMutation
}

// Where appends a list predicates to the AppUpdate builder.
func (au *AppUpdate) Where(ps ...predicate.App) *AppUpdate {
	au.mutation.Where(ps...)
	return au
}

// SetUpdatedAt sets the "updated_at" field.
func (au *AppUpdate) SetUpdatedAt(t time.Time) *AppUpdate {
	au.mutation.SetUpdatedAt(t)
	return au
}

// SetStatus sets the "status" field.
func (au *AppUpdate) SetStatus(u uint8) *AppUpdate {
	au.mutation.ResetStatus()
	au.mutation.SetStatus(u)
	return au
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (au *AppUpdate) SetNillableStatus(u *uint8) *AppUpdate {
	if u != nil {
		au.SetStatus(*u)
	}
	return au
}

// AddStatus adds u to the "status" field.
func (au *AppUpdate) AddStatus(u int8) *AppUpdate {
	au.mutation.AddStatus(u)
	return au
}

// ClearStatus clears the value of the "status" field.
func (au *AppUpdate) ClearStatus() *AppUpdate {
	au.mutation.ClearStatus()
	return au
}

// SetDeletedAt sets the "deleted_at" field.
func (au *AppUpdate) SetDeletedAt(t time.Time) *AppUpdate {
	au.mutation.SetDeletedAt(t)
	return au
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (au *AppUpdate) SetNillableDeletedAt(t *time.Time) *AppUpdate {
	if t != nil {
		au.SetDeletedAt(*t)
	}
	return au
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (au *AppUpdate) ClearDeletedAt() *AppUpdate {
	au.mutation.ClearDeletedAt()
	return au
}

// SetName sets the "name" field.
func (au *AppUpdate) SetName(s string) *AppUpdate {
	au.mutation.SetName(s)
	return au
}

// SetNillableName sets the "name" field if the given value is not nil.
func (au *AppUpdate) SetNillableName(s *string) *AppUpdate {
	if s != nil {
		au.SetName(*s)
	}
	return au
}

// SetRemark sets the "remark" field.
func (au *AppUpdate) SetRemark(s string) *AppUpdate {
	au.mutation.SetRemark(s)
	return au
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (au *AppUpdate) SetNillableRemark(s *string) *AppUpdate {
	if s != nil {
		au.SetRemark(*s)
	}
	return au
}

// ClearRemark clears the value of the "remark" field.
func (au *AppUpdate) ClearRemark() *AppUpdate {
	au.mutation.ClearRemark()
	return au
}

// SetOrderNotifyURL sets the "order_notify_url" field.
func (au *AppUpdate) SetOrderNotifyURL(s string) *AppUpdate {
	au.mutation.SetOrderNotifyURL(s)
	return au
}

// SetNillableOrderNotifyURL sets the "order_notify_url" field if the given value is not nil.
func (au *AppUpdate) SetNillableOrderNotifyURL(s *string) *AppUpdate {
	if s != nil {
		au.SetOrderNotifyURL(*s)
	}
	return au
}

// SetRefundNotifyURL sets the "refund_notify_url" field.
func (au *AppUpdate) SetRefundNotifyURL(s string) *AppUpdate {
	au.mutation.SetRefundNotifyURL(s)
	return au
}

// SetNillableRefundNotifyURL sets the "refund_notify_url" field if the given value is not nil.
func (au *AppUpdate) SetNillableRefundNotifyURL(s *string) *AppUpdate {
	if s != nil {
		au.SetRefundNotifyURL(*s)
	}
	return au
}

// Mutation returns the AppMutation object of the builder.
func (au *AppUpdate) Mutation() *AppMutation {
	return au.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (au *AppUpdate) Save(ctx context.Context) (int, error) {
	if err := au.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, au.sqlSave, au.mutation, au.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (au *AppUpdate) SaveX(ctx context.Context) int {
	affected, err := au.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (au *AppUpdate) Exec(ctx context.Context) error {
	_, err := au.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (au *AppUpdate) ExecX(ctx context.Context) {
	if err := au.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (au *AppUpdate) defaults() error {
	if _, ok := au.mutation.UpdatedAt(); !ok {
		if app.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized app.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := app.UpdateDefaultUpdatedAt()
		au.mutation.SetUpdatedAt(v)
	}
	return nil
}

func (au *AppUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(app.Table, app.Columns, sqlgraph.NewFieldSpec(app.FieldID, field.TypeUint64))
	if ps := au.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := au.mutation.UpdatedAt(); ok {
		_spec.SetField(app.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := au.mutation.Status(); ok {
		_spec.SetField(app.FieldStatus, field.TypeUint8, value)
	}
	if value, ok := au.mutation.AddedStatus(); ok {
		_spec.AddField(app.FieldStatus, field.TypeUint8, value)
	}
	if au.mutation.StatusCleared() {
		_spec.ClearField(app.FieldStatus, field.TypeUint8)
	}
	if value, ok := au.mutation.DeletedAt(); ok {
		_spec.SetField(app.FieldDeletedAt, field.TypeTime, value)
	}
	if au.mutation.DeletedAtCleared() {
		_spec.ClearField(app.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := au.mutation.Name(); ok {
		_spec.SetField(app.FieldName, field.TypeString, value)
	}
	if value, ok := au.mutation.Remark(); ok {
		_spec.SetField(app.FieldRemark, field.TypeString, value)
	}
	if au.mutation.RemarkCleared() {
		_spec.ClearField(app.FieldRemark, field.TypeString)
	}
	if value, ok := au.mutation.OrderNotifyURL(); ok {
		_spec.SetField(app.FieldOrderNotifyURL, field.TypeString, value)
	}
	if value, ok := au.mutation.RefundNotifyURL(); ok {
		_spec.SetField(app.FieldRefundNotifyURL, field.TypeString, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, au.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{app.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	au.mutation.done = true
	return n, nil
}

// AppUpdateOne is the builder for updating a single App entity.
type AppUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AppMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (auo *AppUpdateOne) SetUpdatedAt(t time.Time) *AppUpdateOne {
	auo.mutation.SetUpdatedAt(t)
	return auo
}

// SetStatus sets the "status" field.
func (auo *AppUpdateOne) SetStatus(u uint8) *AppUpdateOne {
	auo.mutation.ResetStatus()
	auo.mutation.SetStatus(u)
	return auo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (auo *AppUpdateOne) SetNillableStatus(u *uint8) *AppUpdateOne {
	if u != nil {
		auo.SetStatus(*u)
	}
	return auo
}

// AddStatus adds u to the "status" field.
func (auo *AppUpdateOne) AddStatus(u int8) *AppUpdateOne {
	auo.mutation.AddStatus(u)
	return auo
}

// ClearStatus clears the value of the "status" field.
func (auo *AppUpdateOne) ClearStatus() *AppUpdateOne {
	auo.mutation.ClearStatus()
	return auo
}

// SetDeletedAt sets the "deleted_at" field.
func (auo *AppUpdateOne) SetDeletedAt(t time.Time) *AppUpdateOne {
	auo.mutation.SetDeletedAt(t)
	return auo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (auo *AppUpdateOne) SetNillableDeletedAt(t *time.Time) *AppUpdateOne {
	if t != nil {
		auo.SetDeletedAt(*t)
	}
	return auo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (auo *AppUpdateOne) ClearDeletedAt() *AppUpdateOne {
	auo.mutation.ClearDeletedAt()
	return auo
}

// SetName sets the "name" field.
func (auo *AppUpdateOne) SetName(s string) *AppUpdateOne {
	auo.mutation.SetName(s)
	return auo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (auo *AppUpdateOne) SetNillableName(s *string) *AppUpdateOne {
	if s != nil {
		auo.SetName(*s)
	}
	return auo
}

// SetRemark sets the "remark" field.
func (auo *AppUpdateOne) SetRemark(s string) *AppUpdateOne {
	auo.mutation.SetRemark(s)
	return auo
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (auo *AppUpdateOne) SetNillableRemark(s *string) *AppUpdateOne {
	if s != nil {
		auo.SetRemark(*s)
	}
	return auo
}

// ClearRemark clears the value of the "remark" field.
func (auo *AppUpdateOne) ClearRemark() *AppUpdateOne {
	auo.mutation.ClearRemark()
	return auo
}

// SetOrderNotifyURL sets the "order_notify_url" field.
func (auo *AppUpdateOne) SetOrderNotifyURL(s string) *AppUpdateOne {
	auo.mutation.SetOrderNotifyURL(s)
	return auo
}

// SetNillableOrderNotifyURL sets the "order_notify_url" field if the given value is not nil.
func (auo *AppUpdateOne) SetNillableOrderNotifyURL(s *string) *AppUpdateOne {
	if s != nil {
		auo.SetOrderNotifyURL(*s)
	}
	return auo
}

// SetRefundNotifyURL sets the "refund_notify_url" field.
func (auo *AppUpdateOne) SetRefundNotifyURL(s string) *AppUpdateOne {
	auo.mutation.SetRefundNotifyURL(s)
	return auo
}

// SetNillableRefundNotifyURL sets the "refund_notify_url" field if the given value is not nil.
func (auo *AppUpdateOne) SetNillableRefundNotifyURL(s *string) *AppUpdateOne {
	if s != nil {
		auo.SetRefundNotifyURL(*s)
	}
	return auo
}

// Mutation returns the AppMutation object of the builder.
func (auo *AppUpdateOne) Mutation() *AppMutation {
	return auo.mutation
}

// Where appends a list predicates to the AppUpdate builder.
func (auo *AppUpdateOne) Where(ps ...predicate.App) *AppUpdateOne {
	auo.mutation.Where(ps...)
	return auo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (auo *AppUpdateOne) Select(field string, fields ...string) *AppUpdateOne {
	auo.fields = append([]string{field}, fields...)
	return auo
}

// Save executes the query and returns the updated App entity.
func (auo *AppUpdateOne) Save(ctx context.Context) (*App, error) {
	if err := auo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, auo.sqlSave, auo.mutation, auo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (auo *AppUpdateOne) SaveX(ctx context.Context) *App {
	node, err := auo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (auo *AppUpdateOne) Exec(ctx context.Context) error {
	_, err := auo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auo *AppUpdateOne) ExecX(ctx context.Context) {
	if err := auo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (auo *AppUpdateOne) defaults() error {
	if _, ok := auo.mutation.UpdatedAt(); !ok {
		if app.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized app.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := app.UpdateDefaultUpdatedAt()
		auo.mutation.SetUpdatedAt(v)
	}
	return nil
}

func (auo *AppUpdateOne) sqlSave(ctx context.Context) (_node *App, err error) {
	_spec := sqlgraph.NewUpdateSpec(app.Table, app.Columns, sqlgraph.NewFieldSpec(app.FieldID, field.TypeUint64))
	id, ok := auo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "App.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := auo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, app.FieldID)
		for _, f := range fields {
			if !app.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != app.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := auo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := auo.mutation.UpdatedAt(); ok {
		_spec.SetField(app.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := auo.mutation.Status(); ok {
		_spec.SetField(app.FieldStatus, field.TypeUint8, value)
	}
	if value, ok := auo.mutation.AddedStatus(); ok {
		_spec.AddField(app.FieldStatus, field.TypeUint8, value)
	}
	if auo.mutation.StatusCleared() {
		_spec.ClearField(app.FieldStatus, field.TypeUint8)
	}
	if value, ok := auo.mutation.DeletedAt(); ok {
		_spec.SetField(app.FieldDeletedAt, field.TypeTime, value)
	}
	if auo.mutation.DeletedAtCleared() {
		_spec.ClearField(app.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := auo.mutation.Name(); ok {
		_spec.SetField(app.FieldName, field.TypeString, value)
	}
	if value, ok := auo.mutation.Remark(); ok {
		_spec.SetField(app.FieldRemark, field.TypeString, value)
	}
	if auo.mutation.RemarkCleared() {
		_spec.ClearField(app.FieldRemark, field.TypeString)
	}
	if value, ok := auo.mutation.OrderNotifyURL(); ok {
		_spec.SetField(app.FieldOrderNotifyURL, field.TypeString, value)
	}
	if value, ok := auo.mutation.RefundNotifyURL(); ok {
		_spec.SetField(app.FieldRefundNotifyURL, field.TypeString, value)
	}
	_node = &App{config: auo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, auo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{app.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	auo.mutation.done = true
	return _node, nil
}

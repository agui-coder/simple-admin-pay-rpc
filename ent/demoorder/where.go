// Code generated by ent, DO NOT EDIT.

package demoorder

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/agui-coder/simple-admin-pay-rpc/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uint64) predicate.DemoOrder {
	return predicate.DemoOrder(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint64) predicate.DemoOrder {
	return predicate.DemoOrder(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint64) predicate.DemoOrder {
	return predicate.DemoOrder(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint64) predicate.DemoOrder {
	return predicate.DemoOrder(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint64) predicate.DemoOrder {
	return predicate.DemoOrder(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint64) predicate.DemoOrder {
	return predicate.DemoOrder(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint64) predicate.DemoOrder {
	return predicate.DemoOrder(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint64) predicate.DemoOrder {
	return predicate.DemoOrder(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint64) predicate.DemoOrder {
	return predicate.DemoOrder(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.DemoOrder {
	return predicate.DemoOrder(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.DemoOrder {
	return predicate.DemoOrder(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.DemoOrder {
	return predicate.DemoOrder(sql.FieldEQ(FieldDeletedAt, v))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v string) predicate.DemoOrder {
	return predicate.DemoOrder(sql.FieldEQ(FieldUserID, v))
}

// SpuID applies equality check predicate on the "spu_id" field. It's identical to SpuIDEQ.
func SpuID(v uint64) predicate.DemoOrder {
	return predicate.DemoOrder(sql.FieldEQ(FieldSpuID, v))
}

// SpuName applies equality check predicate on the "spu_name" field. It's identical to SpuNameEQ.
func SpuName(v string) predicate.DemoOrder {
	return predicate.DemoOrder(sql.FieldEQ(FieldSpuName, v))
}

// Price applies equality check predicate on the "price" field. It's identical to PriceEQ.
func Price(v int32) predicate.DemoOrder {
	return predicate.DemoOrder(sql.FieldEQ(FieldPrice, v))
}

// PayStatus applies equality check predicate on the "pay_status" field. It's identical to PayStatusEQ.
func PayStatus(v bool) predicate.DemoOrder {
	return predicate.DemoOrder(sql.FieldEQ(FieldPayStatus, v))
}

// PayOrderId applies equality check predicate on the "pay_orderId" field. It's identical to PayOrderIdEQ.
func PayOrderId(v uint64) predicate.DemoOrder {
	return predicate.DemoOrder(sql.FieldEQ(FieldPayOrderId, v))
}

// PayTime applies equality check predicate on the "pay_time" field. It's identical to PayTimeEQ.
func PayTime(v time.Time) predicate.DemoOrder {
	return predicate.DemoOrder(sql.FieldEQ(FieldPayTime, v))
}

// PayChannelCode applies equality check predicate on the "pay_channel_code" field. It's identical to PayChannelCodeEQ.
func PayChannelCode(v string) predicate.DemoOrder {
	return predicate.DemoOrder(sql.FieldEQ(FieldPayChannelCode, v))
}

// PayRefundID applies equality check predicate on the "pay_refund_id" field. It's identical to PayRefundIDEQ.
func PayRefundID(v uint64) predicate.DemoOrder {
	return predicate.DemoOrder(sql.FieldEQ(FieldPayRefundID, v))
}

// RefundPrice applies equality check predicate on the "refund_price" field. It's identical to RefundPriceEQ.
func RefundPrice(v int32) predicate.DemoOrder {
	return predicate.DemoOrder(sql.FieldEQ(FieldRefundPrice, v))
}

// RefundTime applies equality check predicate on the "refund_time" field. It's identical to RefundTimeEQ.
func RefundTime(v time.Time) predicate.DemoOrder {
	return predicate.DemoOrder(sql.FieldEQ(FieldRefundTime, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.DemoOrder {
	return predicate.DemoOrder(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.DemoOrder {
	return predicate.DemoOrder(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.DemoOrder {
	return predicate.DemoOrder(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.DemoOrder {
	return predicate.DemoOrder(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.DemoOrder {
	return predicate.DemoOrder(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.DemoOrder {
	return predicate.DemoOrder(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.DemoOrder {
	return predicate.DemoOrder(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.DemoOrder {
	return predicate.DemoOrder(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.DemoOrder {
	return predicate.DemoOrder(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.DemoOrder {
	return predicate.DemoOrder(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.DemoOrder {
	return predicate.DemoOrder(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.DemoOrder {
	return predicate.DemoOrder(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.DemoOrder {
	return predicate.DemoOrder(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.DemoOrder {
	return predicate.DemoOrder(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.DemoOrder {
	return predicate.DemoOrder(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.DemoOrder {
	return predicate.DemoOrder(sql.FieldLTE(FieldUpdatedAt, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.DemoOrder {
	return predicate.DemoOrder(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.DemoOrder {
	return predicate.DemoOrder(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.DemoOrder {
	return predicate.DemoOrder(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.DemoOrder {
	return predicate.DemoOrder(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.DemoOrder {
	return predicate.DemoOrder(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.DemoOrder {
	return predicate.DemoOrder(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.DemoOrder {
	return predicate.DemoOrder(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.DemoOrder {
	return predicate.DemoOrder(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.DemoOrder {
	return predicate.DemoOrder(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.DemoOrder {
	return predicate.DemoOrder(sql.FieldNotNull(FieldDeletedAt))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v string) predicate.DemoOrder {
	return predicate.DemoOrder(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v string) predicate.DemoOrder {
	return predicate.DemoOrder(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...string) predicate.DemoOrder {
	return predicate.DemoOrder(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...string) predicate.DemoOrder {
	return predicate.DemoOrder(sql.FieldNotIn(FieldUserID, vs...))
}

// UserIDGT applies the GT predicate on the "user_id" field.
func UserIDGT(v string) predicate.DemoOrder {
	return predicate.DemoOrder(sql.FieldGT(FieldUserID, v))
}

// UserIDGTE applies the GTE predicate on the "user_id" field.
func UserIDGTE(v string) predicate.DemoOrder {
	return predicate.DemoOrder(sql.FieldGTE(FieldUserID, v))
}

// UserIDLT applies the LT predicate on the "user_id" field.
func UserIDLT(v string) predicate.DemoOrder {
	return predicate.DemoOrder(sql.FieldLT(FieldUserID, v))
}

// UserIDLTE applies the LTE predicate on the "user_id" field.
func UserIDLTE(v string) predicate.DemoOrder {
	return predicate.DemoOrder(sql.FieldLTE(FieldUserID, v))
}

// UserIDContains applies the Contains predicate on the "user_id" field.
func UserIDContains(v string) predicate.DemoOrder {
	return predicate.DemoOrder(sql.FieldContains(FieldUserID, v))
}

// UserIDHasPrefix applies the HasPrefix predicate on the "user_id" field.
func UserIDHasPrefix(v string) predicate.DemoOrder {
	return predicate.DemoOrder(sql.FieldHasPrefix(FieldUserID, v))
}

// UserIDHasSuffix applies the HasSuffix predicate on the "user_id" field.
func UserIDHasSuffix(v string) predicate.DemoOrder {
	return predicate.DemoOrder(sql.FieldHasSuffix(FieldUserID, v))
}

// UserIDEqualFold applies the EqualFold predicate on the "user_id" field.
func UserIDEqualFold(v string) predicate.DemoOrder {
	return predicate.DemoOrder(sql.FieldEqualFold(FieldUserID, v))
}

// UserIDContainsFold applies the ContainsFold predicate on the "user_id" field.
func UserIDContainsFold(v string) predicate.DemoOrder {
	return predicate.DemoOrder(sql.FieldContainsFold(FieldUserID, v))
}

// SpuIDEQ applies the EQ predicate on the "spu_id" field.
func SpuIDEQ(v uint64) predicate.DemoOrder {
	return predicate.DemoOrder(sql.FieldEQ(FieldSpuID, v))
}

// SpuIDNEQ applies the NEQ predicate on the "spu_id" field.
func SpuIDNEQ(v uint64) predicate.DemoOrder {
	return predicate.DemoOrder(sql.FieldNEQ(FieldSpuID, v))
}

// SpuIDIn applies the In predicate on the "spu_id" field.
func SpuIDIn(vs ...uint64) predicate.DemoOrder {
	return predicate.DemoOrder(sql.FieldIn(FieldSpuID, vs...))
}

// SpuIDNotIn applies the NotIn predicate on the "spu_id" field.
func SpuIDNotIn(vs ...uint64) predicate.DemoOrder {
	return predicate.DemoOrder(sql.FieldNotIn(FieldSpuID, vs...))
}

// SpuIDGT applies the GT predicate on the "spu_id" field.
func SpuIDGT(v uint64) predicate.DemoOrder {
	return predicate.DemoOrder(sql.FieldGT(FieldSpuID, v))
}

// SpuIDGTE applies the GTE predicate on the "spu_id" field.
func SpuIDGTE(v uint64) predicate.DemoOrder {
	return predicate.DemoOrder(sql.FieldGTE(FieldSpuID, v))
}

// SpuIDLT applies the LT predicate on the "spu_id" field.
func SpuIDLT(v uint64) predicate.DemoOrder {
	return predicate.DemoOrder(sql.FieldLT(FieldSpuID, v))
}

// SpuIDLTE applies the LTE predicate on the "spu_id" field.
func SpuIDLTE(v uint64) predicate.DemoOrder {
	return predicate.DemoOrder(sql.FieldLTE(FieldSpuID, v))
}

// SpuNameEQ applies the EQ predicate on the "spu_name" field.
func SpuNameEQ(v string) predicate.DemoOrder {
	return predicate.DemoOrder(sql.FieldEQ(FieldSpuName, v))
}

// SpuNameNEQ applies the NEQ predicate on the "spu_name" field.
func SpuNameNEQ(v string) predicate.DemoOrder {
	return predicate.DemoOrder(sql.FieldNEQ(FieldSpuName, v))
}

// SpuNameIn applies the In predicate on the "spu_name" field.
func SpuNameIn(vs ...string) predicate.DemoOrder {
	return predicate.DemoOrder(sql.FieldIn(FieldSpuName, vs...))
}

// SpuNameNotIn applies the NotIn predicate on the "spu_name" field.
func SpuNameNotIn(vs ...string) predicate.DemoOrder {
	return predicate.DemoOrder(sql.FieldNotIn(FieldSpuName, vs...))
}

// SpuNameGT applies the GT predicate on the "spu_name" field.
func SpuNameGT(v string) predicate.DemoOrder {
	return predicate.DemoOrder(sql.FieldGT(FieldSpuName, v))
}

// SpuNameGTE applies the GTE predicate on the "spu_name" field.
func SpuNameGTE(v string) predicate.DemoOrder {
	return predicate.DemoOrder(sql.FieldGTE(FieldSpuName, v))
}

// SpuNameLT applies the LT predicate on the "spu_name" field.
func SpuNameLT(v string) predicate.DemoOrder {
	return predicate.DemoOrder(sql.FieldLT(FieldSpuName, v))
}

// SpuNameLTE applies the LTE predicate on the "spu_name" field.
func SpuNameLTE(v string) predicate.DemoOrder {
	return predicate.DemoOrder(sql.FieldLTE(FieldSpuName, v))
}

// SpuNameContains applies the Contains predicate on the "spu_name" field.
func SpuNameContains(v string) predicate.DemoOrder {
	return predicate.DemoOrder(sql.FieldContains(FieldSpuName, v))
}

// SpuNameHasPrefix applies the HasPrefix predicate on the "spu_name" field.
func SpuNameHasPrefix(v string) predicate.DemoOrder {
	return predicate.DemoOrder(sql.FieldHasPrefix(FieldSpuName, v))
}

// SpuNameHasSuffix applies the HasSuffix predicate on the "spu_name" field.
func SpuNameHasSuffix(v string) predicate.DemoOrder {
	return predicate.DemoOrder(sql.FieldHasSuffix(FieldSpuName, v))
}

// SpuNameEqualFold applies the EqualFold predicate on the "spu_name" field.
func SpuNameEqualFold(v string) predicate.DemoOrder {
	return predicate.DemoOrder(sql.FieldEqualFold(FieldSpuName, v))
}

// SpuNameContainsFold applies the ContainsFold predicate on the "spu_name" field.
func SpuNameContainsFold(v string) predicate.DemoOrder {
	return predicate.DemoOrder(sql.FieldContainsFold(FieldSpuName, v))
}

// PriceEQ applies the EQ predicate on the "price" field.
func PriceEQ(v int32) predicate.DemoOrder {
	return predicate.DemoOrder(sql.FieldEQ(FieldPrice, v))
}

// PriceNEQ applies the NEQ predicate on the "price" field.
func PriceNEQ(v int32) predicate.DemoOrder {
	return predicate.DemoOrder(sql.FieldNEQ(FieldPrice, v))
}

// PriceIn applies the In predicate on the "price" field.
func PriceIn(vs ...int32) predicate.DemoOrder {
	return predicate.DemoOrder(sql.FieldIn(FieldPrice, vs...))
}

// PriceNotIn applies the NotIn predicate on the "price" field.
func PriceNotIn(vs ...int32) predicate.DemoOrder {
	return predicate.DemoOrder(sql.FieldNotIn(FieldPrice, vs...))
}

// PriceGT applies the GT predicate on the "price" field.
func PriceGT(v int32) predicate.DemoOrder {
	return predicate.DemoOrder(sql.FieldGT(FieldPrice, v))
}

// PriceGTE applies the GTE predicate on the "price" field.
func PriceGTE(v int32) predicate.DemoOrder {
	return predicate.DemoOrder(sql.FieldGTE(FieldPrice, v))
}

// PriceLT applies the LT predicate on the "price" field.
func PriceLT(v int32) predicate.DemoOrder {
	return predicate.DemoOrder(sql.FieldLT(FieldPrice, v))
}

// PriceLTE applies the LTE predicate on the "price" field.
func PriceLTE(v int32) predicate.DemoOrder {
	return predicate.DemoOrder(sql.FieldLTE(FieldPrice, v))
}

// PayStatusEQ applies the EQ predicate on the "pay_status" field.
func PayStatusEQ(v bool) predicate.DemoOrder {
	return predicate.DemoOrder(sql.FieldEQ(FieldPayStatus, v))
}

// PayStatusNEQ applies the NEQ predicate on the "pay_status" field.
func PayStatusNEQ(v bool) predicate.DemoOrder {
	return predicate.DemoOrder(sql.FieldNEQ(FieldPayStatus, v))
}

// PayOrderIdEQ applies the EQ predicate on the "pay_orderId" field.
func PayOrderIdEQ(v uint64) predicate.DemoOrder {
	return predicate.DemoOrder(sql.FieldEQ(FieldPayOrderId, v))
}

// PayOrderIdNEQ applies the NEQ predicate on the "pay_orderId" field.
func PayOrderIdNEQ(v uint64) predicate.DemoOrder {
	return predicate.DemoOrder(sql.FieldNEQ(FieldPayOrderId, v))
}

// PayOrderIdIn applies the In predicate on the "pay_orderId" field.
func PayOrderIdIn(vs ...uint64) predicate.DemoOrder {
	return predicate.DemoOrder(sql.FieldIn(FieldPayOrderId, vs...))
}

// PayOrderIdNotIn applies the NotIn predicate on the "pay_orderId" field.
func PayOrderIdNotIn(vs ...uint64) predicate.DemoOrder {
	return predicate.DemoOrder(sql.FieldNotIn(FieldPayOrderId, vs...))
}

// PayOrderIdGT applies the GT predicate on the "pay_orderId" field.
func PayOrderIdGT(v uint64) predicate.DemoOrder {
	return predicate.DemoOrder(sql.FieldGT(FieldPayOrderId, v))
}

// PayOrderIdGTE applies the GTE predicate on the "pay_orderId" field.
func PayOrderIdGTE(v uint64) predicate.DemoOrder {
	return predicate.DemoOrder(sql.FieldGTE(FieldPayOrderId, v))
}

// PayOrderIdLT applies the LT predicate on the "pay_orderId" field.
func PayOrderIdLT(v uint64) predicate.DemoOrder {
	return predicate.DemoOrder(sql.FieldLT(FieldPayOrderId, v))
}

// PayOrderIdLTE applies the LTE predicate on the "pay_orderId" field.
func PayOrderIdLTE(v uint64) predicate.DemoOrder {
	return predicate.DemoOrder(sql.FieldLTE(FieldPayOrderId, v))
}

// PayOrderIdIsNil applies the IsNil predicate on the "pay_orderId" field.
func PayOrderIdIsNil() predicate.DemoOrder {
	return predicate.DemoOrder(sql.FieldIsNull(FieldPayOrderId))
}

// PayOrderIdNotNil applies the NotNil predicate on the "pay_orderId" field.
func PayOrderIdNotNil() predicate.DemoOrder {
	return predicate.DemoOrder(sql.FieldNotNull(FieldPayOrderId))
}

// PayTimeEQ applies the EQ predicate on the "pay_time" field.
func PayTimeEQ(v time.Time) predicate.DemoOrder {
	return predicate.DemoOrder(sql.FieldEQ(FieldPayTime, v))
}

// PayTimeNEQ applies the NEQ predicate on the "pay_time" field.
func PayTimeNEQ(v time.Time) predicate.DemoOrder {
	return predicate.DemoOrder(sql.FieldNEQ(FieldPayTime, v))
}

// PayTimeIn applies the In predicate on the "pay_time" field.
func PayTimeIn(vs ...time.Time) predicate.DemoOrder {
	return predicate.DemoOrder(sql.FieldIn(FieldPayTime, vs...))
}

// PayTimeNotIn applies the NotIn predicate on the "pay_time" field.
func PayTimeNotIn(vs ...time.Time) predicate.DemoOrder {
	return predicate.DemoOrder(sql.FieldNotIn(FieldPayTime, vs...))
}

// PayTimeGT applies the GT predicate on the "pay_time" field.
func PayTimeGT(v time.Time) predicate.DemoOrder {
	return predicate.DemoOrder(sql.FieldGT(FieldPayTime, v))
}

// PayTimeGTE applies the GTE predicate on the "pay_time" field.
func PayTimeGTE(v time.Time) predicate.DemoOrder {
	return predicate.DemoOrder(sql.FieldGTE(FieldPayTime, v))
}

// PayTimeLT applies the LT predicate on the "pay_time" field.
func PayTimeLT(v time.Time) predicate.DemoOrder {
	return predicate.DemoOrder(sql.FieldLT(FieldPayTime, v))
}

// PayTimeLTE applies the LTE predicate on the "pay_time" field.
func PayTimeLTE(v time.Time) predicate.DemoOrder {
	return predicate.DemoOrder(sql.FieldLTE(FieldPayTime, v))
}

// PayTimeIsNil applies the IsNil predicate on the "pay_time" field.
func PayTimeIsNil() predicate.DemoOrder {
	return predicate.DemoOrder(sql.FieldIsNull(FieldPayTime))
}

// PayTimeNotNil applies the NotNil predicate on the "pay_time" field.
func PayTimeNotNil() predicate.DemoOrder {
	return predicate.DemoOrder(sql.FieldNotNull(FieldPayTime))
}

// PayChannelCodeEQ applies the EQ predicate on the "pay_channel_code" field.
func PayChannelCodeEQ(v string) predicate.DemoOrder {
	return predicate.DemoOrder(sql.FieldEQ(FieldPayChannelCode, v))
}

// PayChannelCodeNEQ applies the NEQ predicate on the "pay_channel_code" field.
func PayChannelCodeNEQ(v string) predicate.DemoOrder {
	return predicate.DemoOrder(sql.FieldNEQ(FieldPayChannelCode, v))
}

// PayChannelCodeIn applies the In predicate on the "pay_channel_code" field.
func PayChannelCodeIn(vs ...string) predicate.DemoOrder {
	return predicate.DemoOrder(sql.FieldIn(FieldPayChannelCode, vs...))
}

// PayChannelCodeNotIn applies the NotIn predicate on the "pay_channel_code" field.
func PayChannelCodeNotIn(vs ...string) predicate.DemoOrder {
	return predicate.DemoOrder(sql.FieldNotIn(FieldPayChannelCode, vs...))
}

// PayChannelCodeGT applies the GT predicate on the "pay_channel_code" field.
func PayChannelCodeGT(v string) predicate.DemoOrder {
	return predicate.DemoOrder(sql.FieldGT(FieldPayChannelCode, v))
}

// PayChannelCodeGTE applies the GTE predicate on the "pay_channel_code" field.
func PayChannelCodeGTE(v string) predicate.DemoOrder {
	return predicate.DemoOrder(sql.FieldGTE(FieldPayChannelCode, v))
}

// PayChannelCodeLT applies the LT predicate on the "pay_channel_code" field.
func PayChannelCodeLT(v string) predicate.DemoOrder {
	return predicate.DemoOrder(sql.FieldLT(FieldPayChannelCode, v))
}

// PayChannelCodeLTE applies the LTE predicate on the "pay_channel_code" field.
func PayChannelCodeLTE(v string) predicate.DemoOrder {
	return predicate.DemoOrder(sql.FieldLTE(FieldPayChannelCode, v))
}

// PayChannelCodeContains applies the Contains predicate on the "pay_channel_code" field.
func PayChannelCodeContains(v string) predicate.DemoOrder {
	return predicate.DemoOrder(sql.FieldContains(FieldPayChannelCode, v))
}

// PayChannelCodeHasPrefix applies the HasPrefix predicate on the "pay_channel_code" field.
func PayChannelCodeHasPrefix(v string) predicate.DemoOrder {
	return predicate.DemoOrder(sql.FieldHasPrefix(FieldPayChannelCode, v))
}

// PayChannelCodeHasSuffix applies the HasSuffix predicate on the "pay_channel_code" field.
func PayChannelCodeHasSuffix(v string) predicate.DemoOrder {
	return predicate.DemoOrder(sql.FieldHasSuffix(FieldPayChannelCode, v))
}

// PayChannelCodeIsNil applies the IsNil predicate on the "pay_channel_code" field.
func PayChannelCodeIsNil() predicate.DemoOrder {
	return predicate.DemoOrder(sql.FieldIsNull(FieldPayChannelCode))
}

// PayChannelCodeNotNil applies the NotNil predicate on the "pay_channel_code" field.
func PayChannelCodeNotNil() predicate.DemoOrder {
	return predicate.DemoOrder(sql.FieldNotNull(FieldPayChannelCode))
}

// PayChannelCodeEqualFold applies the EqualFold predicate on the "pay_channel_code" field.
func PayChannelCodeEqualFold(v string) predicate.DemoOrder {
	return predicate.DemoOrder(sql.FieldEqualFold(FieldPayChannelCode, v))
}

// PayChannelCodeContainsFold applies the ContainsFold predicate on the "pay_channel_code" field.
func PayChannelCodeContainsFold(v string) predicate.DemoOrder {
	return predicate.DemoOrder(sql.FieldContainsFold(FieldPayChannelCode, v))
}

// PayRefundIDEQ applies the EQ predicate on the "pay_refund_id" field.
func PayRefundIDEQ(v uint64) predicate.DemoOrder {
	return predicate.DemoOrder(sql.FieldEQ(FieldPayRefundID, v))
}

// PayRefundIDNEQ applies the NEQ predicate on the "pay_refund_id" field.
func PayRefundIDNEQ(v uint64) predicate.DemoOrder {
	return predicate.DemoOrder(sql.FieldNEQ(FieldPayRefundID, v))
}

// PayRefundIDIn applies the In predicate on the "pay_refund_id" field.
func PayRefundIDIn(vs ...uint64) predicate.DemoOrder {
	return predicate.DemoOrder(sql.FieldIn(FieldPayRefundID, vs...))
}

// PayRefundIDNotIn applies the NotIn predicate on the "pay_refund_id" field.
func PayRefundIDNotIn(vs ...uint64) predicate.DemoOrder {
	return predicate.DemoOrder(sql.FieldNotIn(FieldPayRefundID, vs...))
}

// PayRefundIDGT applies the GT predicate on the "pay_refund_id" field.
func PayRefundIDGT(v uint64) predicate.DemoOrder {
	return predicate.DemoOrder(sql.FieldGT(FieldPayRefundID, v))
}

// PayRefundIDGTE applies the GTE predicate on the "pay_refund_id" field.
func PayRefundIDGTE(v uint64) predicate.DemoOrder {
	return predicate.DemoOrder(sql.FieldGTE(FieldPayRefundID, v))
}

// PayRefundIDLT applies the LT predicate on the "pay_refund_id" field.
func PayRefundIDLT(v uint64) predicate.DemoOrder {
	return predicate.DemoOrder(sql.FieldLT(FieldPayRefundID, v))
}

// PayRefundIDLTE applies the LTE predicate on the "pay_refund_id" field.
func PayRefundIDLTE(v uint64) predicate.DemoOrder {
	return predicate.DemoOrder(sql.FieldLTE(FieldPayRefundID, v))
}

// PayRefundIDIsNil applies the IsNil predicate on the "pay_refund_id" field.
func PayRefundIDIsNil() predicate.DemoOrder {
	return predicate.DemoOrder(sql.FieldIsNull(FieldPayRefundID))
}

// PayRefundIDNotNil applies the NotNil predicate on the "pay_refund_id" field.
func PayRefundIDNotNil() predicate.DemoOrder {
	return predicate.DemoOrder(sql.FieldNotNull(FieldPayRefundID))
}

// RefundPriceEQ applies the EQ predicate on the "refund_price" field.
func RefundPriceEQ(v int32) predicate.DemoOrder {
	return predicate.DemoOrder(sql.FieldEQ(FieldRefundPrice, v))
}

// RefundPriceNEQ applies the NEQ predicate on the "refund_price" field.
func RefundPriceNEQ(v int32) predicate.DemoOrder {
	return predicate.DemoOrder(sql.FieldNEQ(FieldRefundPrice, v))
}

// RefundPriceIn applies the In predicate on the "refund_price" field.
func RefundPriceIn(vs ...int32) predicate.DemoOrder {
	return predicate.DemoOrder(sql.FieldIn(FieldRefundPrice, vs...))
}

// RefundPriceNotIn applies the NotIn predicate on the "refund_price" field.
func RefundPriceNotIn(vs ...int32) predicate.DemoOrder {
	return predicate.DemoOrder(sql.FieldNotIn(FieldRefundPrice, vs...))
}

// RefundPriceGT applies the GT predicate on the "refund_price" field.
func RefundPriceGT(v int32) predicate.DemoOrder {
	return predicate.DemoOrder(sql.FieldGT(FieldRefundPrice, v))
}

// RefundPriceGTE applies the GTE predicate on the "refund_price" field.
func RefundPriceGTE(v int32) predicate.DemoOrder {
	return predicate.DemoOrder(sql.FieldGTE(FieldRefundPrice, v))
}

// RefundPriceLT applies the LT predicate on the "refund_price" field.
func RefundPriceLT(v int32) predicate.DemoOrder {
	return predicate.DemoOrder(sql.FieldLT(FieldRefundPrice, v))
}

// RefundPriceLTE applies the LTE predicate on the "refund_price" field.
func RefundPriceLTE(v int32) predicate.DemoOrder {
	return predicate.DemoOrder(sql.FieldLTE(FieldRefundPrice, v))
}

// RefundPriceIsNil applies the IsNil predicate on the "refund_price" field.
func RefundPriceIsNil() predicate.DemoOrder {
	return predicate.DemoOrder(sql.FieldIsNull(FieldRefundPrice))
}

// RefundPriceNotNil applies the NotNil predicate on the "refund_price" field.
func RefundPriceNotNil() predicate.DemoOrder {
	return predicate.DemoOrder(sql.FieldNotNull(FieldRefundPrice))
}

// RefundTimeEQ applies the EQ predicate on the "refund_time" field.
func RefundTimeEQ(v time.Time) predicate.DemoOrder {
	return predicate.DemoOrder(sql.FieldEQ(FieldRefundTime, v))
}

// RefundTimeNEQ applies the NEQ predicate on the "refund_time" field.
func RefundTimeNEQ(v time.Time) predicate.DemoOrder {
	return predicate.DemoOrder(sql.FieldNEQ(FieldRefundTime, v))
}

// RefundTimeIn applies the In predicate on the "refund_time" field.
func RefundTimeIn(vs ...time.Time) predicate.DemoOrder {
	return predicate.DemoOrder(sql.FieldIn(FieldRefundTime, vs...))
}

// RefundTimeNotIn applies the NotIn predicate on the "refund_time" field.
func RefundTimeNotIn(vs ...time.Time) predicate.DemoOrder {
	return predicate.DemoOrder(sql.FieldNotIn(FieldRefundTime, vs...))
}

// RefundTimeGT applies the GT predicate on the "refund_time" field.
func RefundTimeGT(v time.Time) predicate.DemoOrder {
	return predicate.DemoOrder(sql.FieldGT(FieldRefundTime, v))
}

// RefundTimeGTE applies the GTE predicate on the "refund_time" field.
func RefundTimeGTE(v time.Time) predicate.DemoOrder {
	return predicate.DemoOrder(sql.FieldGTE(FieldRefundTime, v))
}

// RefundTimeLT applies the LT predicate on the "refund_time" field.
func RefundTimeLT(v time.Time) predicate.DemoOrder {
	return predicate.DemoOrder(sql.FieldLT(FieldRefundTime, v))
}

// RefundTimeLTE applies the LTE predicate on the "refund_time" field.
func RefundTimeLTE(v time.Time) predicate.DemoOrder {
	return predicate.DemoOrder(sql.FieldLTE(FieldRefundTime, v))
}

// RefundTimeIsNil applies the IsNil predicate on the "refund_time" field.
func RefundTimeIsNil() predicate.DemoOrder {
	return predicate.DemoOrder(sql.FieldIsNull(FieldRefundTime))
}

// RefundTimeNotNil applies the NotNil predicate on the "refund_time" field.
func RefundTimeNotNil() predicate.DemoOrder {
	return predicate.DemoOrder(sql.FieldNotNull(FieldRefundTime))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.DemoOrder) predicate.DemoOrder {
	return predicate.DemoOrder(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.DemoOrder) predicate.DemoOrder {
	return predicate.DemoOrder(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.DemoOrder) predicate.DemoOrder {
	return predicate.DemoOrder(sql.NotPredicates(p))
}

// Code generated by ent, DO NOT EDIT.

package demoorder

import (
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the demoorder type in the database.
	Label = "demo_order"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// FieldSpuID holds the string denoting the spu_id field in the database.
	FieldSpuID = "spu_id"
	// FieldSpuName holds the string denoting the spu_name field in the database.
	FieldSpuName = "spu_name"
	// FieldPrice holds the string denoting the price field in the database.
	FieldPrice = "price"
	// FieldPayStatus holds the string denoting the pay_status field in the database.
	FieldPayStatus = "pay_status"
	// FieldPayOrderId holds the string denoting the pay_orderid field in the database.
	FieldPayOrderId = "pay_order_id"
	// FieldPayTime holds the string denoting the pay_time field in the database.
	FieldPayTime = "pay_time"
	// FieldPayChannelCode holds the string denoting the pay_channel_code field in the database.
	FieldPayChannelCode = "pay_channel_code"
	// FieldPayRefundID holds the string denoting the pay_refund_id field in the database.
	FieldPayRefundID = "pay_refund_id"
	// FieldRefundPrice holds the string denoting the refund_price field in the database.
	FieldRefundPrice = "refund_price"
	// FieldRefundTime holds the string denoting the refund_time field in the database.
	FieldRefundTime = "refund_time"
	// Table holds the table name of the demoorder in the database.
	Table = "pay_demo_order"
)

// Columns holds all SQL columns for demoorder fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
	FieldUserID,
	FieldSpuID,
	FieldSpuName,
	FieldPrice,
	FieldPayStatus,
	FieldPayOrderId,
	FieldPayTime,
	FieldPayChannelCode,
	FieldPayRefundID,
	FieldRefundPrice,
	FieldRefundTime,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "github.com/agui-coder/simple-admin-pay-rpc/ent/runtime"
var (
	Hooks        [1]ent.Hook
	Interceptors [1]ent.Interceptor
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
)

// OrderOption defines the ordering options for the DemoOrder queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByUserID orders the results by the user_id field.
func ByUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserID, opts...).ToFunc()
}

// BySpuID orders the results by the spu_id field.
func BySpuID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSpuID, opts...).ToFunc()
}

// BySpuName orders the results by the spu_name field.
func BySpuName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSpuName, opts...).ToFunc()
}

// ByPrice orders the results by the price field.
func ByPrice(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPrice, opts...).ToFunc()
}

// ByPayStatus orders the results by the pay_status field.
func ByPayStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPayStatus, opts...).ToFunc()
}

// ByPayOrderId orders the results by the pay_orderId field.
func ByPayOrderId(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPayOrderId, opts...).ToFunc()
}

// ByPayTime orders the results by the pay_time field.
func ByPayTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPayTime, opts...).ToFunc()
}

// ByPayChannelCode orders the results by the pay_channel_code field.
func ByPayChannelCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPayChannelCode, opts...).ToFunc()
}

// ByPayRefundID orders the results by the pay_refund_id field.
func ByPayRefundID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPayRefundID, opts...).ToFunc()
}

// ByRefundPrice orders the results by the refund_price field.
func ByRefundPrice(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRefundPrice, opts...).ToFunc()
}

// ByRefundTime orders the results by the refund_time field.
func ByRefundTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRefundTime, opts...).ToFunc()
}

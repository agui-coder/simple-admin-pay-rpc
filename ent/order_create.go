// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/agui-coder/simple-admin-pay-rpc/ent/order"
)

// OrderCreate is the builder for creating a Order entity.
type OrderCreate struct {
	config
	mutation *OrderMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (oc *OrderCreate) SetCreatedAt(t time.Time) *OrderCreate {
	oc.mutation.SetCreatedAt(t)
	return oc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (oc *OrderCreate) SetNillableCreatedAt(t *time.Time) *OrderCreate {
	if t != nil {
		oc.SetCreatedAt(*t)
	}
	return oc
}

// SetUpdatedAt sets the "updated_at" field.
func (oc *OrderCreate) SetUpdatedAt(t time.Time) *OrderCreate {
	oc.mutation.SetUpdatedAt(t)
	return oc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (oc *OrderCreate) SetNillableUpdatedAt(t *time.Time) *OrderCreate {
	if t != nil {
		oc.SetUpdatedAt(*t)
	}
	return oc
}

// SetStatus sets the "status" field.
func (oc *OrderCreate) SetStatus(u uint8) *OrderCreate {
	oc.mutation.SetStatus(u)
	return oc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (oc *OrderCreate) SetNillableStatus(u *uint8) *OrderCreate {
	if u != nil {
		oc.SetStatus(*u)
	}
	return oc
}

// SetDeletedAt sets the "deleted_at" field.
func (oc *OrderCreate) SetDeletedAt(t time.Time) *OrderCreate {
	oc.mutation.SetDeletedAt(t)
	return oc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (oc *OrderCreate) SetNillableDeletedAt(t *time.Time) *OrderCreate {
	if t != nil {
		oc.SetDeletedAt(*t)
	}
	return oc
}

// SetChannelCode sets the "channel_code" field.
func (oc *OrderCreate) SetChannelCode(s string) *OrderCreate {
	oc.mutation.SetChannelCode(s)
	return oc
}

// SetNillableChannelCode sets the "channel_code" field if the given value is not nil.
func (oc *OrderCreate) SetNillableChannelCode(s *string) *OrderCreate {
	if s != nil {
		oc.SetChannelCode(*s)
	}
	return oc
}

// SetMerchantOrderID sets the "merchant_order_id" field.
func (oc *OrderCreate) SetMerchantOrderID(s string) *OrderCreate {
	oc.mutation.SetMerchantOrderID(s)
	return oc
}

// SetSubject sets the "subject" field.
func (oc *OrderCreate) SetSubject(s string) *OrderCreate {
	oc.mutation.SetSubject(s)
	return oc
}

// SetBody sets the "body" field.
func (oc *OrderCreate) SetBody(s string) *OrderCreate {
	oc.mutation.SetBody(s)
	return oc
}

// SetPrice sets the "price" field.
func (oc *OrderCreate) SetPrice(i int32) *OrderCreate {
	oc.mutation.SetPrice(i)
	return oc
}

// SetChannelFeeRate sets the "channel_fee_rate" field.
func (oc *OrderCreate) SetChannelFeeRate(f float64) *OrderCreate {
	oc.mutation.SetChannelFeeRate(f)
	return oc
}

// SetNillableChannelFeeRate sets the "channel_fee_rate" field if the given value is not nil.
func (oc *OrderCreate) SetNillableChannelFeeRate(f *float64) *OrderCreate {
	if f != nil {
		oc.SetChannelFeeRate(*f)
	}
	return oc
}

// SetChannelFeePrice sets the "channel_fee_price" field.
func (oc *OrderCreate) SetChannelFeePrice(i int32) *OrderCreate {
	oc.mutation.SetChannelFeePrice(i)
	return oc
}

// SetNillableChannelFeePrice sets the "channel_fee_price" field if the given value is not nil.
func (oc *OrderCreate) SetNillableChannelFeePrice(i *int32) *OrderCreate {
	if i != nil {
		oc.SetChannelFeePrice(*i)
	}
	return oc
}

// SetUserIP sets the "user_ip" field.
func (oc *OrderCreate) SetUserIP(s string) *OrderCreate {
	oc.mutation.SetUserIP(s)
	return oc
}

// SetExpireTime sets the "expire_time" field.
func (oc *OrderCreate) SetExpireTime(t time.Time) *OrderCreate {
	oc.mutation.SetExpireTime(t)
	return oc
}

// SetSuccessTime sets the "success_time" field.
func (oc *OrderCreate) SetSuccessTime(t time.Time) *OrderCreate {
	oc.mutation.SetSuccessTime(t)
	return oc
}

// SetNillableSuccessTime sets the "success_time" field if the given value is not nil.
func (oc *OrderCreate) SetNillableSuccessTime(t *time.Time) *OrderCreate {
	if t != nil {
		oc.SetSuccessTime(*t)
	}
	return oc
}

// SetNotifyTime sets the "notify_time" field.
func (oc *OrderCreate) SetNotifyTime(t time.Time) *OrderCreate {
	oc.mutation.SetNotifyTime(t)
	return oc
}

// SetNillableNotifyTime sets the "notify_time" field if the given value is not nil.
func (oc *OrderCreate) SetNillableNotifyTime(t *time.Time) *OrderCreate {
	if t != nil {
		oc.SetNotifyTime(*t)
	}
	return oc
}

// SetExtensionID sets the "extension_id" field.
func (oc *OrderCreate) SetExtensionID(u uint64) *OrderCreate {
	oc.mutation.SetExtensionID(u)
	return oc
}

// SetNillableExtensionID sets the "extension_id" field if the given value is not nil.
func (oc *OrderCreate) SetNillableExtensionID(u *uint64) *OrderCreate {
	if u != nil {
		oc.SetExtensionID(*u)
	}
	return oc
}

// SetNo sets the "no" field.
func (oc *OrderCreate) SetNo(s string) *OrderCreate {
	oc.mutation.SetNo(s)
	return oc
}

// SetNillableNo sets the "no" field if the given value is not nil.
func (oc *OrderCreate) SetNillableNo(s *string) *OrderCreate {
	if s != nil {
		oc.SetNo(*s)
	}
	return oc
}

// SetRefundPrice sets the "refund_price" field.
func (oc *OrderCreate) SetRefundPrice(i int32) *OrderCreate {
	oc.mutation.SetRefundPrice(i)
	return oc
}

// SetChannelUserID sets the "channel_user_id" field.
func (oc *OrderCreate) SetChannelUserID(s string) *OrderCreate {
	oc.mutation.SetChannelUserID(s)
	return oc
}

// SetNillableChannelUserID sets the "channel_user_id" field if the given value is not nil.
func (oc *OrderCreate) SetNillableChannelUserID(s *string) *OrderCreate {
	if s != nil {
		oc.SetChannelUserID(*s)
	}
	return oc
}

// SetChannelOrderNo sets the "channel_order_no" field.
func (oc *OrderCreate) SetChannelOrderNo(s string) *OrderCreate {
	oc.mutation.SetChannelOrderNo(s)
	return oc
}

// SetNillableChannelOrderNo sets the "channel_order_no" field if the given value is not nil.
func (oc *OrderCreate) SetNillableChannelOrderNo(s *string) *OrderCreate {
	if s != nil {
		oc.SetChannelOrderNo(*s)
	}
	return oc
}

// SetID sets the "id" field.
func (oc *OrderCreate) SetID(u uint64) *OrderCreate {
	oc.mutation.SetID(u)
	return oc
}

// Mutation returns the OrderMutation object of the builder.
func (oc *OrderCreate) Mutation() *OrderMutation {
	return oc.mutation
}

// Save creates the Order in the database.
func (oc *OrderCreate) Save(ctx context.Context) (*Order, error) {
	if err := oc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, oc.sqlSave, oc.mutation, oc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (oc *OrderCreate) SaveX(ctx context.Context) *Order {
	v, err := oc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (oc *OrderCreate) Exec(ctx context.Context) error {
	_, err := oc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oc *OrderCreate) ExecX(ctx context.Context) {
	if err := oc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (oc *OrderCreate) defaults() error {
	if _, ok := oc.mutation.CreatedAt(); !ok {
		if order.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized order.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := order.DefaultCreatedAt()
		oc.mutation.SetCreatedAt(v)
	}
	if _, ok := oc.mutation.UpdatedAt(); !ok {
		if order.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized order.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := order.DefaultUpdatedAt()
		oc.mutation.SetUpdatedAt(v)
	}
	if _, ok := oc.mutation.Status(); !ok {
		v := order.DefaultStatus
		oc.mutation.SetStatus(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (oc *OrderCreate) check() error {
	if _, ok := oc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Order.created_at"`)}
	}
	if _, ok := oc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Order.updated_at"`)}
	}
	if _, ok := oc.mutation.MerchantOrderID(); !ok {
		return &ValidationError{Name: "merchant_order_id", err: errors.New(`ent: missing required field "Order.merchant_order_id"`)}
	}
	if _, ok := oc.mutation.Subject(); !ok {
		return &ValidationError{Name: "subject", err: errors.New(`ent: missing required field "Order.subject"`)}
	}
	if _, ok := oc.mutation.Body(); !ok {
		return &ValidationError{Name: "body", err: errors.New(`ent: missing required field "Order.body"`)}
	}
	if _, ok := oc.mutation.Price(); !ok {
		return &ValidationError{Name: "price", err: errors.New(`ent: missing required field "Order.price"`)}
	}
	if _, ok := oc.mutation.UserIP(); !ok {
		return &ValidationError{Name: "user_ip", err: errors.New(`ent: missing required field "Order.user_ip"`)}
	}
	if _, ok := oc.mutation.ExpireTime(); !ok {
		return &ValidationError{Name: "expire_time", err: errors.New(`ent: missing required field "Order.expire_time"`)}
	}
	if _, ok := oc.mutation.RefundPrice(); !ok {
		return &ValidationError{Name: "refund_price", err: errors.New(`ent: missing required field "Order.refund_price"`)}
	}
	return nil
}

func (oc *OrderCreate) sqlSave(ctx context.Context) (*Order, error) {
	if err := oc.check(); err != nil {
		return nil, err
	}
	_node, _spec := oc.createSpec()
	if err := sqlgraph.CreateNode(ctx, oc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint64(id)
	}
	oc.mutation.id = &_node.ID
	oc.mutation.done = true
	return _node, nil
}

func (oc *OrderCreate) createSpec() (*Order, *sqlgraph.CreateSpec) {
	var (
		_node = &Order{config: oc.config}
		_spec = sqlgraph.NewCreateSpec(order.Table, sqlgraph.NewFieldSpec(order.FieldID, field.TypeUint64))
	)
	if id, ok := oc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := oc.mutation.CreatedAt(); ok {
		_spec.SetField(order.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := oc.mutation.UpdatedAt(); ok {
		_spec.SetField(order.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := oc.mutation.Status(); ok {
		_spec.SetField(order.FieldStatus, field.TypeUint8, value)
		_node.Status = value
	}
	if value, ok := oc.mutation.DeletedAt(); ok {
		_spec.SetField(order.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := oc.mutation.ChannelCode(); ok {
		_spec.SetField(order.FieldChannelCode, field.TypeString, value)
		_node.ChannelCode = value
	}
	if value, ok := oc.mutation.MerchantOrderID(); ok {
		_spec.SetField(order.FieldMerchantOrderID, field.TypeString, value)
		_node.MerchantOrderID = value
	}
	if value, ok := oc.mutation.Subject(); ok {
		_spec.SetField(order.FieldSubject, field.TypeString, value)
		_node.Subject = value
	}
	if value, ok := oc.mutation.Body(); ok {
		_spec.SetField(order.FieldBody, field.TypeString, value)
		_node.Body = value
	}
	if value, ok := oc.mutation.Price(); ok {
		_spec.SetField(order.FieldPrice, field.TypeInt32, value)
		_node.Price = value
	}
	if value, ok := oc.mutation.ChannelFeeRate(); ok {
		_spec.SetField(order.FieldChannelFeeRate, field.TypeFloat64, value)
		_node.ChannelFeeRate = value
	}
	if value, ok := oc.mutation.ChannelFeePrice(); ok {
		_spec.SetField(order.FieldChannelFeePrice, field.TypeInt32, value)
		_node.ChannelFeePrice = value
	}
	if value, ok := oc.mutation.UserIP(); ok {
		_spec.SetField(order.FieldUserIP, field.TypeString, value)
		_node.UserIP = value
	}
	if value, ok := oc.mutation.ExpireTime(); ok {
		_spec.SetField(order.FieldExpireTime, field.TypeTime, value)
		_node.ExpireTime = value
	}
	if value, ok := oc.mutation.SuccessTime(); ok {
		_spec.SetField(order.FieldSuccessTime, field.TypeTime, value)
		_node.SuccessTime = value
	}
	if value, ok := oc.mutation.NotifyTime(); ok {
		_spec.SetField(order.FieldNotifyTime, field.TypeTime, value)
		_node.NotifyTime = value
	}
	if value, ok := oc.mutation.ExtensionID(); ok {
		_spec.SetField(order.FieldExtensionID, field.TypeUint64, value)
		_node.ExtensionID = value
	}
	if value, ok := oc.mutation.No(); ok {
		_spec.SetField(order.FieldNo, field.TypeString, value)
		_node.No = value
	}
	if value, ok := oc.mutation.RefundPrice(); ok {
		_spec.SetField(order.FieldRefundPrice, field.TypeInt32, value)
		_node.RefundPrice = value
	}
	if value, ok := oc.mutation.ChannelUserID(); ok {
		_spec.SetField(order.FieldChannelUserID, field.TypeString, value)
		_node.ChannelUserID = value
	}
	if value, ok := oc.mutation.ChannelOrderNo(); ok {
		_spec.SetField(order.FieldChannelOrderNo, field.TypeString, value)
		_node.ChannelOrderNo = value
	}
	return _node, _spec
}

// OrderCreateBulk is the builder for creating many Order entities in bulk.
type OrderCreateBulk struct {
	config
	err      error
	builders []*OrderCreate
}

// Save creates the Order entities in the database.
func (ocb *OrderCreateBulk) Save(ctx context.Context) ([]*Order, error) {
	if ocb.err != nil {
		return nil, ocb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ocb.builders))
	nodes := make([]*Order, len(ocb.builders))
	mutators := make([]Mutator, len(ocb.builders))
	for i := range ocb.builders {
		func(i int, root context.Context) {
			builder := ocb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*OrderMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ocb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ocb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ocb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ocb *OrderCreateBulk) SaveX(ctx context.Context) []*Order {
	v, err := ocb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ocb *OrderCreateBulk) Exec(ctx context.Context) error {
	_, err := ocb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ocb *OrderCreateBulk) ExecX(ctx context.Context) {
	if err := ocb.Exec(ctx); err != nil {
		panic(err)
	}
}

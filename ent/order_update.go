// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/agui-coder/simple-admin-pay-rpc/ent/order"
	"github.com/agui-coder/simple-admin-pay-rpc/ent/predicate"
)

// OrderUpdate is the builder for updating Order entities.
type OrderUpdate struct {
	config
	hooks    []Hook
	mutation *OrderMutation
}

// Where appends a list predicates to the OrderUpdate builder.
func (ou *OrderUpdate) Where(ps ...predicate.Order) *OrderUpdate {
	ou.mutation.Where(ps...)
	return ou
}

// SetUpdatedAt sets the "updated_at" field.
func (ou *OrderUpdate) SetUpdatedAt(t time.Time) *OrderUpdate {
	ou.mutation.SetUpdatedAt(t)
	return ou
}

// SetStatus sets the "status" field.
func (ou *OrderUpdate) SetStatus(u uint8) *OrderUpdate {
	ou.mutation.ResetStatus()
	ou.mutation.SetStatus(u)
	return ou
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableStatus(u *uint8) *OrderUpdate {
	if u != nil {
		ou.SetStatus(*u)
	}
	return ou
}

// AddStatus adds u to the "status" field.
func (ou *OrderUpdate) AddStatus(u int8) *OrderUpdate {
	ou.mutation.AddStatus(u)
	return ou
}

// ClearStatus clears the value of the "status" field.
func (ou *OrderUpdate) ClearStatus() *OrderUpdate {
	ou.mutation.ClearStatus()
	return ou
}

// SetDeletedAt sets the "deleted_at" field.
func (ou *OrderUpdate) SetDeletedAt(t time.Time) *OrderUpdate {
	ou.mutation.SetDeletedAt(t)
	return ou
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableDeletedAt(t *time.Time) *OrderUpdate {
	if t != nil {
		ou.SetDeletedAt(*t)
	}
	return ou
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (ou *OrderUpdate) ClearDeletedAt() *OrderUpdate {
	ou.mutation.ClearDeletedAt()
	return ou
}

// SetAppID sets the "app_id" field.
func (ou *OrderUpdate) SetAppID(u uint64) *OrderUpdate {
	ou.mutation.ResetAppID()
	ou.mutation.SetAppID(u)
	return ou
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableAppID(u *uint64) *OrderUpdate {
	if u != nil {
		ou.SetAppID(*u)
	}
	return ou
}

// AddAppID adds u to the "app_id" field.
func (ou *OrderUpdate) AddAppID(u int64) *OrderUpdate {
	ou.mutation.AddAppID(u)
	return ou
}

// SetChannelID sets the "channel_id" field.
func (ou *OrderUpdate) SetChannelID(u uint64) *OrderUpdate {
	ou.mutation.ResetChannelID()
	ou.mutation.SetChannelID(u)
	return ou
}

// SetNillableChannelID sets the "channel_id" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableChannelID(u *uint64) *OrderUpdate {
	if u != nil {
		ou.SetChannelID(*u)
	}
	return ou
}

// AddChannelID adds u to the "channel_id" field.
func (ou *OrderUpdate) AddChannelID(u int64) *OrderUpdate {
	ou.mutation.AddChannelID(u)
	return ou
}

// ClearChannelID clears the value of the "channel_id" field.
func (ou *OrderUpdate) ClearChannelID() *OrderUpdate {
	ou.mutation.ClearChannelID()
	return ou
}

// SetChannelCode sets the "channel_code" field.
func (ou *OrderUpdate) SetChannelCode(s string) *OrderUpdate {
	ou.mutation.SetChannelCode(s)
	return ou
}

// SetNillableChannelCode sets the "channel_code" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableChannelCode(s *string) *OrderUpdate {
	if s != nil {
		ou.SetChannelCode(*s)
	}
	return ou
}

// ClearChannelCode clears the value of the "channel_code" field.
func (ou *OrderUpdate) ClearChannelCode() *OrderUpdate {
	ou.mutation.ClearChannelCode()
	return ou
}

// SetMerchantOrderID sets the "merchant_order_id" field.
func (ou *OrderUpdate) SetMerchantOrderID(s string) *OrderUpdate {
	ou.mutation.SetMerchantOrderID(s)
	return ou
}

// SetNillableMerchantOrderID sets the "merchant_order_id" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableMerchantOrderID(s *string) *OrderUpdate {
	if s != nil {
		ou.SetMerchantOrderID(*s)
	}
	return ou
}

// SetSubject sets the "subject" field.
func (ou *OrderUpdate) SetSubject(s string) *OrderUpdate {
	ou.mutation.SetSubject(s)
	return ou
}

// SetNillableSubject sets the "subject" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableSubject(s *string) *OrderUpdate {
	if s != nil {
		ou.SetSubject(*s)
	}
	return ou
}

// SetBody sets the "body" field.
func (ou *OrderUpdate) SetBody(s string) *OrderUpdate {
	ou.mutation.SetBody(s)
	return ou
}

// SetNillableBody sets the "body" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableBody(s *string) *OrderUpdate {
	if s != nil {
		ou.SetBody(*s)
	}
	return ou
}

// SetNotifyURL sets the "notify_url" field.
func (ou *OrderUpdate) SetNotifyURL(s string) *OrderUpdate {
	ou.mutation.SetNotifyURL(s)
	return ou
}

// SetNillableNotifyURL sets the "notify_url" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableNotifyURL(s *string) *OrderUpdate {
	if s != nil {
		ou.SetNotifyURL(*s)
	}
	return ou
}

// SetPrice sets the "price" field.
func (ou *OrderUpdate) SetPrice(i int32) *OrderUpdate {
	ou.mutation.ResetPrice()
	ou.mutation.SetPrice(i)
	return ou
}

// SetNillablePrice sets the "price" field if the given value is not nil.
func (ou *OrderUpdate) SetNillablePrice(i *int32) *OrderUpdate {
	if i != nil {
		ou.SetPrice(*i)
	}
	return ou
}

// AddPrice adds i to the "price" field.
func (ou *OrderUpdate) AddPrice(i int32) *OrderUpdate {
	ou.mutation.AddPrice(i)
	return ou
}

// SetChannelFeeRate sets the "channel_fee_rate" field.
func (ou *OrderUpdate) SetChannelFeeRate(f float64) *OrderUpdate {
	ou.mutation.ResetChannelFeeRate()
	ou.mutation.SetChannelFeeRate(f)
	return ou
}

// SetNillableChannelFeeRate sets the "channel_fee_rate" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableChannelFeeRate(f *float64) *OrderUpdate {
	if f != nil {
		ou.SetChannelFeeRate(*f)
	}
	return ou
}

// AddChannelFeeRate adds f to the "channel_fee_rate" field.
func (ou *OrderUpdate) AddChannelFeeRate(f float64) *OrderUpdate {
	ou.mutation.AddChannelFeeRate(f)
	return ou
}

// ClearChannelFeeRate clears the value of the "channel_fee_rate" field.
func (ou *OrderUpdate) ClearChannelFeeRate() *OrderUpdate {
	ou.mutation.ClearChannelFeeRate()
	return ou
}

// SetChannelFeePrice sets the "channel_fee_price" field.
func (ou *OrderUpdate) SetChannelFeePrice(i int32) *OrderUpdate {
	ou.mutation.ResetChannelFeePrice()
	ou.mutation.SetChannelFeePrice(i)
	return ou
}

// SetNillableChannelFeePrice sets the "channel_fee_price" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableChannelFeePrice(i *int32) *OrderUpdate {
	if i != nil {
		ou.SetChannelFeePrice(*i)
	}
	return ou
}

// AddChannelFeePrice adds i to the "channel_fee_price" field.
func (ou *OrderUpdate) AddChannelFeePrice(i int32) *OrderUpdate {
	ou.mutation.AddChannelFeePrice(i)
	return ou
}

// ClearChannelFeePrice clears the value of the "channel_fee_price" field.
func (ou *OrderUpdate) ClearChannelFeePrice() *OrderUpdate {
	ou.mutation.ClearChannelFeePrice()
	return ou
}

// SetUserIP sets the "user_ip" field.
func (ou *OrderUpdate) SetUserIP(s string) *OrderUpdate {
	ou.mutation.SetUserIP(s)
	return ou
}

// SetNillableUserIP sets the "user_ip" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableUserIP(s *string) *OrderUpdate {
	if s != nil {
		ou.SetUserIP(*s)
	}
	return ou
}

// SetExpireTime sets the "expire_time" field.
func (ou *OrderUpdate) SetExpireTime(t time.Time) *OrderUpdate {
	ou.mutation.SetExpireTime(t)
	return ou
}

// SetNillableExpireTime sets the "expire_time" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableExpireTime(t *time.Time) *OrderUpdate {
	if t != nil {
		ou.SetExpireTime(*t)
	}
	return ou
}

// SetSuccessTime sets the "success_time" field.
func (ou *OrderUpdate) SetSuccessTime(t time.Time) *OrderUpdate {
	ou.mutation.SetSuccessTime(t)
	return ou
}

// SetNillableSuccessTime sets the "success_time" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableSuccessTime(t *time.Time) *OrderUpdate {
	if t != nil {
		ou.SetSuccessTime(*t)
	}
	return ou
}

// ClearSuccessTime clears the value of the "success_time" field.
func (ou *OrderUpdate) ClearSuccessTime() *OrderUpdate {
	ou.mutation.ClearSuccessTime()
	return ou
}

// SetNotifyTime sets the "notify_time" field.
func (ou *OrderUpdate) SetNotifyTime(t time.Time) *OrderUpdate {
	ou.mutation.SetNotifyTime(t)
	return ou
}

// SetNillableNotifyTime sets the "notify_time" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableNotifyTime(t *time.Time) *OrderUpdate {
	if t != nil {
		ou.SetNotifyTime(*t)
	}
	return ou
}

// ClearNotifyTime clears the value of the "notify_time" field.
func (ou *OrderUpdate) ClearNotifyTime() *OrderUpdate {
	ou.mutation.ClearNotifyTime()
	return ou
}

// SetExtensionID sets the "extension_id" field.
func (ou *OrderUpdate) SetExtensionID(u uint64) *OrderUpdate {
	ou.mutation.ResetExtensionID()
	ou.mutation.SetExtensionID(u)
	return ou
}

// SetNillableExtensionID sets the "extension_id" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableExtensionID(u *uint64) *OrderUpdate {
	if u != nil {
		ou.SetExtensionID(*u)
	}
	return ou
}

// AddExtensionID adds u to the "extension_id" field.
func (ou *OrderUpdate) AddExtensionID(u int64) *OrderUpdate {
	ou.mutation.AddExtensionID(u)
	return ou
}

// ClearExtensionID clears the value of the "extension_id" field.
func (ou *OrderUpdate) ClearExtensionID() *OrderUpdate {
	ou.mutation.ClearExtensionID()
	return ou
}

// SetNo sets the "no" field.
func (ou *OrderUpdate) SetNo(s string) *OrderUpdate {
	ou.mutation.SetNo(s)
	return ou
}

// SetNillableNo sets the "no" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableNo(s *string) *OrderUpdate {
	if s != nil {
		ou.SetNo(*s)
	}
	return ou
}

// ClearNo clears the value of the "no" field.
func (ou *OrderUpdate) ClearNo() *OrderUpdate {
	ou.mutation.ClearNo()
	return ou
}

// SetRefundPrice sets the "refund_price" field.
func (ou *OrderUpdate) SetRefundPrice(i int32) *OrderUpdate {
	ou.mutation.ResetRefundPrice()
	ou.mutation.SetRefundPrice(i)
	return ou
}

// SetNillableRefundPrice sets the "refund_price" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableRefundPrice(i *int32) *OrderUpdate {
	if i != nil {
		ou.SetRefundPrice(*i)
	}
	return ou
}

// AddRefundPrice adds i to the "refund_price" field.
func (ou *OrderUpdate) AddRefundPrice(i int32) *OrderUpdate {
	ou.mutation.AddRefundPrice(i)
	return ou
}

// SetChannelUserID sets the "channel_user_id" field.
func (ou *OrderUpdate) SetChannelUserID(s string) *OrderUpdate {
	ou.mutation.SetChannelUserID(s)
	return ou
}

// SetNillableChannelUserID sets the "channel_user_id" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableChannelUserID(s *string) *OrderUpdate {
	if s != nil {
		ou.SetChannelUserID(*s)
	}
	return ou
}

// ClearChannelUserID clears the value of the "channel_user_id" field.
func (ou *OrderUpdate) ClearChannelUserID() *OrderUpdate {
	ou.mutation.ClearChannelUserID()
	return ou
}

// SetChannelOrderNo sets the "channel_order_no" field.
func (ou *OrderUpdate) SetChannelOrderNo(s string) *OrderUpdate {
	ou.mutation.SetChannelOrderNo(s)
	return ou
}

// SetNillableChannelOrderNo sets the "channel_order_no" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableChannelOrderNo(s *string) *OrderUpdate {
	if s != nil {
		ou.SetChannelOrderNo(*s)
	}
	return ou
}

// ClearChannelOrderNo clears the value of the "channel_order_no" field.
func (ou *OrderUpdate) ClearChannelOrderNo() *OrderUpdate {
	ou.mutation.ClearChannelOrderNo()
	return ou
}

// Mutation returns the OrderMutation object of the builder.
func (ou *OrderUpdate) Mutation() *OrderMutation {
	return ou.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ou *OrderUpdate) Save(ctx context.Context) (int, error) {
	if err := ou.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, ou.sqlSave, ou.mutation, ou.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ou *OrderUpdate) SaveX(ctx context.Context) int {
	affected, err := ou.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ou *OrderUpdate) Exec(ctx context.Context) error {
	_, err := ou.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ou *OrderUpdate) ExecX(ctx context.Context) {
	if err := ou.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ou *OrderUpdate) defaults() error {
	if _, ok := ou.mutation.UpdatedAt(); !ok {
		if order.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized order.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := order.UpdateDefaultUpdatedAt()
		ou.mutation.SetUpdatedAt(v)
	}
	return nil
}

func (ou *OrderUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(order.Table, order.Columns, sqlgraph.NewFieldSpec(order.FieldID, field.TypeUint64))
	if ps := ou.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ou.mutation.UpdatedAt(); ok {
		_spec.SetField(order.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ou.mutation.Status(); ok {
		_spec.SetField(order.FieldStatus, field.TypeUint8, value)
	}
	if value, ok := ou.mutation.AddedStatus(); ok {
		_spec.AddField(order.FieldStatus, field.TypeUint8, value)
	}
	if ou.mutation.StatusCleared() {
		_spec.ClearField(order.FieldStatus, field.TypeUint8)
	}
	if value, ok := ou.mutation.DeletedAt(); ok {
		_spec.SetField(order.FieldDeletedAt, field.TypeTime, value)
	}
	if ou.mutation.DeletedAtCleared() {
		_spec.ClearField(order.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := ou.mutation.AppID(); ok {
		_spec.SetField(order.FieldAppID, field.TypeUint64, value)
	}
	if value, ok := ou.mutation.AddedAppID(); ok {
		_spec.AddField(order.FieldAppID, field.TypeUint64, value)
	}
	if value, ok := ou.mutation.ChannelID(); ok {
		_spec.SetField(order.FieldChannelID, field.TypeUint64, value)
	}
	if value, ok := ou.mutation.AddedChannelID(); ok {
		_spec.AddField(order.FieldChannelID, field.TypeUint64, value)
	}
	if ou.mutation.ChannelIDCleared() {
		_spec.ClearField(order.FieldChannelID, field.TypeUint64)
	}
	if value, ok := ou.mutation.ChannelCode(); ok {
		_spec.SetField(order.FieldChannelCode, field.TypeString, value)
	}
	if ou.mutation.ChannelCodeCleared() {
		_spec.ClearField(order.FieldChannelCode, field.TypeString)
	}
	if value, ok := ou.mutation.MerchantOrderID(); ok {
		_spec.SetField(order.FieldMerchantOrderID, field.TypeString, value)
	}
	if value, ok := ou.mutation.Subject(); ok {
		_spec.SetField(order.FieldSubject, field.TypeString, value)
	}
	if value, ok := ou.mutation.Body(); ok {
		_spec.SetField(order.FieldBody, field.TypeString, value)
	}
	if value, ok := ou.mutation.NotifyURL(); ok {
		_spec.SetField(order.FieldNotifyURL, field.TypeString, value)
	}
	if value, ok := ou.mutation.Price(); ok {
		_spec.SetField(order.FieldPrice, field.TypeInt32, value)
	}
	if value, ok := ou.mutation.AddedPrice(); ok {
		_spec.AddField(order.FieldPrice, field.TypeInt32, value)
	}
	if value, ok := ou.mutation.ChannelFeeRate(); ok {
		_spec.SetField(order.FieldChannelFeeRate, field.TypeFloat64, value)
	}
	if value, ok := ou.mutation.AddedChannelFeeRate(); ok {
		_spec.AddField(order.FieldChannelFeeRate, field.TypeFloat64, value)
	}
	if ou.mutation.ChannelFeeRateCleared() {
		_spec.ClearField(order.FieldChannelFeeRate, field.TypeFloat64)
	}
	if value, ok := ou.mutation.ChannelFeePrice(); ok {
		_spec.SetField(order.FieldChannelFeePrice, field.TypeInt32, value)
	}
	if value, ok := ou.mutation.AddedChannelFeePrice(); ok {
		_spec.AddField(order.FieldChannelFeePrice, field.TypeInt32, value)
	}
	if ou.mutation.ChannelFeePriceCleared() {
		_spec.ClearField(order.FieldChannelFeePrice, field.TypeInt32)
	}
	if value, ok := ou.mutation.UserIP(); ok {
		_spec.SetField(order.FieldUserIP, field.TypeString, value)
	}
	if value, ok := ou.mutation.ExpireTime(); ok {
		_spec.SetField(order.FieldExpireTime, field.TypeTime, value)
	}
	if value, ok := ou.mutation.SuccessTime(); ok {
		_spec.SetField(order.FieldSuccessTime, field.TypeTime, value)
	}
	if ou.mutation.SuccessTimeCleared() {
		_spec.ClearField(order.FieldSuccessTime, field.TypeTime)
	}
	if value, ok := ou.mutation.NotifyTime(); ok {
		_spec.SetField(order.FieldNotifyTime, field.TypeTime, value)
	}
	if ou.mutation.NotifyTimeCleared() {
		_spec.ClearField(order.FieldNotifyTime, field.TypeTime)
	}
	if value, ok := ou.mutation.ExtensionID(); ok {
		_spec.SetField(order.FieldExtensionID, field.TypeUint64, value)
	}
	if value, ok := ou.mutation.AddedExtensionID(); ok {
		_spec.AddField(order.FieldExtensionID, field.TypeUint64, value)
	}
	if ou.mutation.ExtensionIDCleared() {
		_spec.ClearField(order.FieldExtensionID, field.TypeUint64)
	}
	if value, ok := ou.mutation.No(); ok {
		_spec.SetField(order.FieldNo, field.TypeString, value)
	}
	if ou.mutation.NoCleared() {
		_spec.ClearField(order.FieldNo, field.TypeString)
	}
	if value, ok := ou.mutation.RefundPrice(); ok {
		_spec.SetField(order.FieldRefundPrice, field.TypeInt32, value)
	}
	if value, ok := ou.mutation.AddedRefundPrice(); ok {
		_spec.AddField(order.FieldRefundPrice, field.TypeInt32, value)
	}
	if value, ok := ou.mutation.ChannelUserID(); ok {
		_spec.SetField(order.FieldChannelUserID, field.TypeString, value)
	}
	if ou.mutation.ChannelUserIDCleared() {
		_spec.ClearField(order.FieldChannelUserID, field.TypeString)
	}
	if value, ok := ou.mutation.ChannelOrderNo(); ok {
		_spec.SetField(order.FieldChannelOrderNo, field.TypeString, value)
	}
	if ou.mutation.ChannelOrderNoCleared() {
		_spec.ClearField(order.FieldChannelOrderNo, field.TypeString)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ou.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{order.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ou.mutation.done = true
	return n, nil
}

// OrderUpdateOne is the builder for updating a single Order entity.
type OrderUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *OrderMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (ouo *OrderUpdateOne) SetUpdatedAt(t time.Time) *OrderUpdateOne {
	ouo.mutation.SetUpdatedAt(t)
	return ouo
}

// SetStatus sets the "status" field.
func (ouo *OrderUpdateOne) SetStatus(u uint8) *OrderUpdateOne {
	ouo.mutation.ResetStatus()
	ouo.mutation.SetStatus(u)
	return ouo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableStatus(u *uint8) *OrderUpdateOne {
	if u != nil {
		ouo.SetStatus(*u)
	}
	return ouo
}

// AddStatus adds u to the "status" field.
func (ouo *OrderUpdateOne) AddStatus(u int8) *OrderUpdateOne {
	ouo.mutation.AddStatus(u)
	return ouo
}

// ClearStatus clears the value of the "status" field.
func (ouo *OrderUpdateOne) ClearStatus() *OrderUpdateOne {
	ouo.mutation.ClearStatus()
	return ouo
}

// SetDeletedAt sets the "deleted_at" field.
func (ouo *OrderUpdateOne) SetDeletedAt(t time.Time) *OrderUpdateOne {
	ouo.mutation.SetDeletedAt(t)
	return ouo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableDeletedAt(t *time.Time) *OrderUpdateOne {
	if t != nil {
		ouo.SetDeletedAt(*t)
	}
	return ouo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (ouo *OrderUpdateOne) ClearDeletedAt() *OrderUpdateOne {
	ouo.mutation.ClearDeletedAt()
	return ouo
}

// SetAppID sets the "app_id" field.
func (ouo *OrderUpdateOne) SetAppID(u uint64) *OrderUpdateOne {
	ouo.mutation.ResetAppID()
	ouo.mutation.SetAppID(u)
	return ouo
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableAppID(u *uint64) *OrderUpdateOne {
	if u != nil {
		ouo.SetAppID(*u)
	}
	return ouo
}

// AddAppID adds u to the "app_id" field.
func (ouo *OrderUpdateOne) AddAppID(u int64) *OrderUpdateOne {
	ouo.mutation.AddAppID(u)
	return ouo
}

// SetChannelID sets the "channel_id" field.
func (ouo *OrderUpdateOne) SetChannelID(u uint64) *OrderUpdateOne {
	ouo.mutation.ResetChannelID()
	ouo.mutation.SetChannelID(u)
	return ouo
}

// SetNillableChannelID sets the "channel_id" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableChannelID(u *uint64) *OrderUpdateOne {
	if u != nil {
		ouo.SetChannelID(*u)
	}
	return ouo
}

// AddChannelID adds u to the "channel_id" field.
func (ouo *OrderUpdateOne) AddChannelID(u int64) *OrderUpdateOne {
	ouo.mutation.AddChannelID(u)
	return ouo
}

// ClearChannelID clears the value of the "channel_id" field.
func (ouo *OrderUpdateOne) ClearChannelID() *OrderUpdateOne {
	ouo.mutation.ClearChannelID()
	return ouo
}

// SetChannelCode sets the "channel_code" field.
func (ouo *OrderUpdateOne) SetChannelCode(s string) *OrderUpdateOne {
	ouo.mutation.SetChannelCode(s)
	return ouo
}

// SetNillableChannelCode sets the "channel_code" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableChannelCode(s *string) *OrderUpdateOne {
	if s != nil {
		ouo.SetChannelCode(*s)
	}
	return ouo
}

// ClearChannelCode clears the value of the "channel_code" field.
func (ouo *OrderUpdateOne) ClearChannelCode() *OrderUpdateOne {
	ouo.mutation.ClearChannelCode()
	return ouo
}

// SetMerchantOrderID sets the "merchant_order_id" field.
func (ouo *OrderUpdateOne) SetMerchantOrderID(s string) *OrderUpdateOne {
	ouo.mutation.SetMerchantOrderID(s)
	return ouo
}

// SetNillableMerchantOrderID sets the "merchant_order_id" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableMerchantOrderID(s *string) *OrderUpdateOne {
	if s != nil {
		ouo.SetMerchantOrderID(*s)
	}
	return ouo
}

// SetSubject sets the "subject" field.
func (ouo *OrderUpdateOne) SetSubject(s string) *OrderUpdateOne {
	ouo.mutation.SetSubject(s)
	return ouo
}

// SetNillableSubject sets the "subject" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableSubject(s *string) *OrderUpdateOne {
	if s != nil {
		ouo.SetSubject(*s)
	}
	return ouo
}

// SetBody sets the "body" field.
func (ouo *OrderUpdateOne) SetBody(s string) *OrderUpdateOne {
	ouo.mutation.SetBody(s)
	return ouo
}

// SetNillableBody sets the "body" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableBody(s *string) *OrderUpdateOne {
	if s != nil {
		ouo.SetBody(*s)
	}
	return ouo
}

// SetNotifyURL sets the "notify_url" field.
func (ouo *OrderUpdateOne) SetNotifyURL(s string) *OrderUpdateOne {
	ouo.mutation.SetNotifyURL(s)
	return ouo
}

// SetNillableNotifyURL sets the "notify_url" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableNotifyURL(s *string) *OrderUpdateOne {
	if s != nil {
		ouo.SetNotifyURL(*s)
	}
	return ouo
}

// SetPrice sets the "price" field.
func (ouo *OrderUpdateOne) SetPrice(i int32) *OrderUpdateOne {
	ouo.mutation.ResetPrice()
	ouo.mutation.SetPrice(i)
	return ouo
}

// SetNillablePrice sets the "price" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillablePrice(i *int32) *OrderUpdateOne {
	if i != nil {
		ouo.SetPrice(*i)
	}
	return ouo
}

// AddPrice adds i to the "price" field.
func (ouo *OrderUpdateOne) AddPrice(i int32) *OrderUpdateOne {
	ouo.mutation.AddPrice(i)
	return ouo
}

// SetChannelFeeRate sets the "channel_fee_rate" field.
func (ouo *OrderUpdateOne) SetChannelFeeRate(f float64) *OrderUpdateOne {
	ouo.mutation.ResetChannelFeeRate()
	ouo.mutation.SetChannelFeeRate(f)
	return ouo
}

// SetNillableChannelFeeRate sets the "channel_fee_rate" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableChannelFeeRate(f *float64) *OrderUpdateOne {
	if f != nil {
		ouo.SetChannelFeeRate(*f)
	}
	return ouo
}

// AddChannelFeeRate adds f to the "channel_fee_rate" field.
func (ouo *OrderUpdateOne) AddChannelFeeRate(f float64) *OrderUpdateOne {
	ouo.mutation.AddChannelFeeRate(f)
	return ouo
}

// ClearChannelFeeRate clears the value of the "channel_fee_rate" field.
func (ouo *OrderUpdateOne) ClearChannelFeeRate() *OrderUpdateOne {
	ouo.mutation.ClearChannelFeeRate()
	return ouo
}

// SetChannelFeePrice sets the "channel_fee_price" field.
func (ouo *OrderUpdateOne) SetChannelFeePrice(i int32) *OrderUpdateOne {
	ouo.mutation.ResetChannelFeePrice()
	ouo.mutation.SetChannelFeePrice(i)
	return ouo
}

// SetNillableChannelFeePrice sets the "channel_fee_price" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableChannelFeePrice(i *int32) *OrderUpdateOne {
	if i != nil {
		ouo.SetChannelFeePrice(*i)
	}
	return ouo
}

// AddChannelFeePrice adds i to the "channel_fee_price" field.
func (ouo *OrderUpdateOne) AddChannelFeePrice(i int32) *OrderUpdateOne {
	ouo.mutation.AddChannelFeePrice(i)
	return ouo
}

// ClearChannelFeePrice clears the value of the "channel_fee_price" field.
func (ouo *OrderUpdateOne) ClearChannelFeePrice() *OrderUpdateOne {
	ouo.mutation.ClearChannelFeePrice()
	return ouo
}

// SetUserIP sets the "user_ip" field.
func (ouo *OrderUpdateOne) SetUserIP(s string) *OrderUpdateOne {
	ouo.mutation.SetUserIP(s)
	return ouo
}

// SetNillableUserIP sets the "user_ip" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableUserIP(s *string) *OrderUpdateOne {
	if s != nil {
		ouo.SetUserIP(*s)
	}
	return ouo
}

// SetExpireTime sets the "expire_time" field.
func (ouo *OrderUpdateOne) SetExpireTime(t time.Time) *OrderUpdateOne {
	ouo.mutation.SetExpireTime(t)
	return ouo
}

// SetNillableExpireTime sets the "expire_time" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableExpireTime(t *time.Time) *OrderUpdateOne {
	if t != nil {
		ouo.SetExpireTime(*t)
	}
	return ouo
}

// SetSuccessTime sets the "success_time" field.
func (ouo *OrderUpdateOne) SetSuccessTime(t time.Time) *OrderUpdateOne {
	ouo.mutation.SetSuccessTime(t)
	return ouo
}

// SetNillableSuccessTime sets the "success_time" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableSuccessTime(t *time.Time) *OrderUpdateOne {
	if t != nil {
		ouo.SetSuccessTime(*t)
	}
	return ouo
}

// ClearSuccessTime clears the value of the "success_time" field.
func (ouo *OrderUpdateOne) ClearSuccessTime() *OrderUpdateOne {
	ouo.mutation.ClearSuccessTime()
	return ouo
}

// SetNotifyTime sets the "notify_time" field.
func (ouo *OrderUpdateOne) SetNotifyTime(t time.Time) *OrderUpdateOne {
	ouo.mutation.SetNotifyTime(t)
	return ouo
}

// SetNillableNotifyTime sets the "notify_time" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableNotifyTime(t *time.Time) *OrderUpdateOne {
	if t != nil {
		ouo.SetNotifyTime(*t)
	}
	return ouo
}

// ClearNotifyTime clears the value of the "notify_time" field.
func (ouo *OrderUpdateOne) ClearNotifyTime() *OrderUpdateOne {
	ouo.mutation.ClearNotifyTime()
	return ouo
}

// SetExtensionID sets the "extension_id" field.
func (ouo *OrderUpdateOne) SetExtensionID(u uint64) *OrderUpdateOne {
	ouo.mutation.ResetExtensionID()
	ouo.mutation.SetExtensionID(u)
	return ouo
}

// SetNillableExtensionID sets the "extension_id" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableExtensionID(u *uint64) *OrderUpdateOne {
	if u != nil {
		ouo.SetExtensionID(*u)
	}
	return ouo
}

// AddExtensionID adds u to the "extension_id" field.
func (ouo *OrderUpdateOne) AddExtensionID(u int64) *OrderUpdateOne {
	ouo.mutation.AddExtensionID(u)
	return ouo
}

// ClearExtensionID clears the value of the "extension_id" field.
func (ouo *OrderUpdateOne) ClearExtensionID() *OrderUpdateOne {
	ouo.mutation.ClearExtensionID()
	return ouo
}

// SetNo sets the "no" field.
func (ouo *OrderUpdateOne) SetNo(s string) *OrderUpdateOne {
	ouo.mutation.SetNo(s)
	return ouo
}

// SetNillableNo sets the "no" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableNo(s *string) *OrderUpdateOne {
	if s != nil {
		ouo.SetNo(*s)
	}
	return ouo
}

// ClearNo clears the value of the "no" field.
func (ouo *OrderUpdateOne) ClearNo() *OrderUpdateOne {
	ouo.mutation.ClearNo()
	return ouo
}

// SetRefundPrice sets the "refund_price" field.
func (ouo *OrderUpdateOne) SetRefundPrice(i int32) *OrderUpdateOne {
	ouo.mutation.ResetRefundPrice()
	ouo.mutation.SetRefundPrice(i)
	return ouo
}

// SetNillableRefundPrice sets the "refund_price" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableRefundPrice(i *int32) *OrderUpdateOne {
	if i != nil {
		ouo.SetRefundPrice(*i)
	}
	return ouo
}

// AddRefundPrice adds i to the "refund_price" field.
func (ouo *OrderUpdateOne) AddRefundPrice(i int32) *OrderUpdateOne {
	ouo.mutation.AddRefundPrice(i)
	return ouo
}

// SetChannelUserID sets the "channel_user_id" field.
func (ouo *OrderUpdateOne) SetChannelUserID(s string) *OrderUpdateOne {
	ouo.mutation.SetChannelUserID(s)
	return ouo
}

// SetNillableChannelUserID sets the "channel_user_id" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableChannelUserID(s *string) *OrderUpdateOne {
	if s != nil {
		ouo.SetChannelUserID(*s)
	}
	return ouo
}

// ClearChannelUserID clears the value of the "channel_user_id" field.
func (ouo *OrderUpdateOne) ClearChannelUserID() *OrderUpdateOne {
	ouo.mutation.ClearChannelUserID()
	return ouo
}

// SetChannelOrderNo sets the "channel_order_no" field.
func (ouo *OrderUpdateOne) SetChannelOrderNo(s string) *OrderUpdateOne {
	ouo.mutation.SetChannelOrderNo(s)
	return ouo
}

// SetNillableChannelOrderNo sets the "channel_order_no" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableChannelOrderNo(s *string) *OrderUpdateOne {
	if s != nil {
		ouo.SetChannelOrderNo(*s)
	}
	return ouo
}

// ClearChannelOrderNo clears the value of the "channel_order_no" field.
func (ouo *OrderUpdateOne) ClearChannelOrderNo() *OrderUpdateOne {
	ouo.mutation.ClearChannelOrderNo()
	return ouo
}

// Mutation returns the OrderMutation object of the builder.
func (ouo *OrderUpdateOne) Mutation() *OrderMutation {
	return ouo.mutation
}

// Where appends a list predicates to the OrderUpdate builder.
func (ouo *OrderUpdateOne) Where(ps ...predicate.Order) *OrderUpdateOne {
	ouo.mutation.Where(ps...)
	return ouo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ouo *OrderUpdateOne) Select(field string, fields ...string) *OrderUpdateOne {
	ouo.fields = append([]string{field}, fields...)
	return ouo
}

// Save executes the query and returns the updated Order entity.
func (ouo *OrderUpdateOne) Save(ctx context.Context) (*Order, error) {
	if err := ouo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, ouo.sqlSave, ouo.mutation, ouo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ouo *OrderUpdateOne) SaveX(ctx context.Context) *Order {
	node, err := ouo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ouo *OrderUpdateOne) Exec(ctx context.Context) error {
	_, err := ouo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ouo *OrderUpdateOne) ExecX(ctx context.Context) {
	if err := ouo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ouo *OrderUpdateOne) defaults() error {
	if _, ok := ouo.mutation.UpdatedAt(); !ok {
		if order.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized order.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := order.UpdateDefaultUpdatedAt()
		ouo.mutation.SetUpdatedAt(v)
	}
	return nil
}

func (ouo *OrderUpdateOne) sqlSave(ctx context.Context) (_node *Order, err error) {
	_spec := sqlgraph.NewUpdateSpec(order.Table, order.Columns, sqlgraph.NewFieldSpec(order.FieldID, field.TypeUint64))
	id, ok := ouo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Order.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ouo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, order.FieldID)
		for _, f := range fields {
			if !order.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != order.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ouo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ouo.mutation.UpdatedAt(); ok {
		_spec.SetField(order.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ouo.mutation.Status(); ok {
		_spec.SetField(order.FieldStatus, field.TypeUint8, value)
	}
	if value, ok := ouo.mutation.AddedStatus(); ok {
		_spec.AddField(order.FieldStatus, field.TypeUint8, value)
	}
	if ouo.mutation.StatusCleared() {
		_spec.ClearField(order.FieldStatus, field.TypeUint8)
	}
	if value, ok := ouo.mutation.DeletedAt(); ok {
		_spec.SetField(order.FieldDeletedAt, field.TypeTime, value)
	}
	if ouo.mutation.DeletedAtCleared() {
		_spec.ClearField(order.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := ouo.mutation.AppID(); ok {
		_spec.SetField(order.FieldAppID, field.TypeUint64, value)
	}
	if value, ok := ouo.mutation.AddedAppID(); ok {
		_spec.AddField(order.FieldAppID, field.TypeUint64, value)
	}
	if value, ok := ouo.mutation.ChannelID(); ok {
		_spec.SetField(order.FieldChannelID, field.TypeUint64, value)
	}
	if value, ok := ouo.mutation.AddedChannelID(); ok {
		_spec.AddField(order.FieldChannelID, field.TypeUint64, value)
	}
	if ouo.mutation.ChannelIDCleared() {
		_spec.ClearField(order.FieldChannelID, field.TypeUint64)
	}
	if value, ok := ouo.mutation.ChannelCode(); ok {
		_spec.SetField(order.FieldChannelCode, field.TypeString, value)
	}
	if ouo.mutation.ChannelCodeCleared() {
		_spec.ClearField(order.FieldChannelCode, field.TypeString)
	}
	if value, ok := ouo.mutation.MerchantOrderID(); ok {
		_spec.SetField(order.FieldMerchantOrderID, field.TypeString, value)
	}
	if value, ok := ouo.mutation.Subject(); ok {
		_spec.SetField(order.FieldSubject, field.TypeString, value)
	}
	if value, ok := ouo.mutation.Body(); ok {
		_spec.SetField(order.FieldBody, field.TypeString, value)
	}
	if value, ok := ouo.mutation.NotifyURL(); ok {
		_spec.SetField(order.FieldNotifyURL, field.TypeString, value)
	}
	if value, ok := ouo.mutation.Price(); ok {
		_spec.SetField(order.FieldPrice, field.TypeInt32, value)
	}
	if value, ok := ouo.mutation.AddedPrice(); ok {
		_spec.AddField(order.FieldPrice, field.TypeInt32, value)
	}
	if value, ok := ouo.mutation.ChannelFeeRate(); ok {
		_spec.SetField(order.FieldChannelFeeRate, field.TypeFloat64, value)
	}
	if value, ok := ouo.mutation.AddedChannelFeeRate(); ok {
		_spec.AddField(order.FieldChannelFeeRate, field.TypeFloat64, value)
	}
	if ouo.mutation.ChannelFeeRateCleared() {
		_spec.ClearField(order.FieldChannelFeeRate, field.TypeFloat64)
	}
	if value, ok := ouo.mutation.ChannelFeePrice(); ok {
		_spec.SetField(order.FieldChannelFeePrice, field.TypeInt32, value)
	}
	if value, ok := ouo.mutation.AddedChannelFeePrice(); ok {
		_spec.AddField(order.FieldChannelFeePrice, field.TypeInt32, value)
	}
	if ouo.mutation.ChannelFeePriceCleared() {
		_spec.ClearField(order.FieldChannelFeePrice, field.TypeInt32)
	}
	if value, ok := ouo.mutation.UserIP(); ok {
		_spec.SetField(order.FieldUserIP, field.TypeString, value)
	}
	if value, ok := ouo.mutation.ExpireTime(); ok {
		_spec.SetField(order.FieldExpireTime, field.TypeTime, value)
	}
	if value, ok := ouo.mutation.SuccessTime(); ok {
		_spec.SetField(order.FieldSuccessTime, field.TypeTime, value)
	}
	if ouo.mutation.SuccessTimeCleared() {
		_spec.ClearField(order.FieldSuccessTime, field.TypeTime)
	}
	if value, ok := ouo.mutation.NotifyTime(); ok {
		_spec.SetField(order.FieldNotifyTime, field.TypeTime, value)
	}
	if ouo.mutation.NotifyTimeCleared() {
		_spec.ClearField(order.FieldNotifyTime, field.TypeTime)
	}
	if value, ok := ouo.mutation.ExtensionID(); ok {
		_spec.SetField(order.FieldExtensionID, field.TypeUint64, value)
	}
	if value, ok := ouo.mutation.AddedExtensionID(); ok {
		_spec.AddField(order.FieldExtensionID, field.TypeUint64, value)
	}
	if ouo.mutation.ExtensionIDCleared() {
		_spec.ClearField(order.FieldExtensionID, field.TypeUint64)
	}
	if value, ok := ouo.mutation.No(); ok {
		_spec.SetField(order.FieldNo, field.TypeString, value)
	}
	if ouo.mutation.NoCleared() {
		_spec.ClearField(order.FieldNo, field.TypeString)
	}
	if value, ok := ouo.mutation.RefundPrice(); ok {
		_spec.SetField(order.FieldRefundPrice, field.TypeInt32, value)
	}
	if value, ok := ouo.mutation.AddedRefundPrice(); ok {
		_spec.AddField(order.FieldRefundPrice, field.TypeInt32, value)
	}
	if value, ok := ouo.mutation.ChannelUserID(); ok {
		_spec.SetField(order.FieldChannelUserID, field.TypeString, value)
	}
	if ouo.mutation.ChannelUserIDCleared() {
		_spec.ClearField(order.FieldChannelUserID, field.TypeString)
	}
	if value, ok := ouo.mutation.ChannelOrderNo(); ok {
		_spec.SetField(order.FieldChannelOrderNo, field.TypeString, value)
	}
	if ouo.mutation.ChannelOrderNoCleared() {
		_spec.ClearField(order.FieldChannelOrderNo, field.TypeString)
	}
	_node = &Order{config: ouo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ouo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{order.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ouo.mutation.done = true
	return _node, nil
}

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/agui-coder/simple-admin-pay-rpc/ent/notifylog"
	"github.com/agui-coder/simple-admin-pay-rpc/ent/predicate"
)

// NotifyLogUpdate is the builder for updating NotifyLog entities.
type NotifyLogUpdate struct {
	config
	hooks    []Hook
	mutation *NotifyLogMutation
}

// Where appends a list predicates to the NotifyLogUpdate builder.
func (nlu *NotifyLogUpdate) Where(ps ...predicate.NotifyLog) *NotifyLogUpdate {
	nlu.mutation.Where(ps...)
	return nlu
}

// SetUpdatedAt sets the "updated_at" field.
func (nlu *NotifyLogUpdate) SetUpdatedAt(t time.Time) *NotifyLogUpdate {
	nlu.mutation.SetUpdatedAt(t)
	return nlu
}

// SetStatus sets the "status" field.
func (nlu *NotifyLogUpdate) SetStatus(u uint8) *NotifyLogUpdate {
	nlu.mutation.ResetStatus()
	nlu.mutation.SetStatus(u)
	return nlu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (nlu *NotifyLogUpdate) SetNillableStatus(u *uint8) *NotifyLogUpdate {
	if u != nil {
		nlu.SetStatus(*u)
	}
	return nlu
}

// AddStatus adds u to the "status" field.
func (nlu *NotifyLogUpdate) AddStatus(u int8) *NotifyLogUpdate {
	nlu.mutation.AddStatus(u)
	return nlu
}

// ClearStatus clears the value of the "status" field.
func (nlu *NotifyLogUpdate) ClearStatus() *NotifyLogUpdate {
	nlu.mutation.ClearStatus()
	return nlu
}

// SetDeletedAt sets the "deleted_at" field.
func (nlu *NotifyLogUpdate) SetDeletedAt(t time.Time) *NotifyLogUpdate {
	nlu.mutation.SetDeletedAt(t)
	return nlu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (nlu *NotifyLogUpdate) SetNillableDeletedAt(t *time.Time) *NotifyLogUpdate {
	if t != nil {
		nlu.SetDeletedAt(*t)
	}
	return nlu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (nlu *NotifyLogUpdate) ClearDeletedAt() *NotifyLogUpdate {
	nlu.mutation.ClearDeletedAt()
	return nlu
}

// SetTaskID sets the "task_id" field.
func (nlu *NotifyLogUpdate) SetTaskID(u uint64) *NotifyLogUpdate {
	nlu.mutation.ResetTaskID()
	nlu.mutation.SetTaskID(u)
	return nlu
}

// SetNillableTaskID sets the "task_id" field if the given value is not nil.
func (nlu *NotifyLogUpdate) SetNillableTaskID(u *uint64) *NotifyLogUpdate {
	if u != nil {
		nlu.SetTaskID(*u)
	}
	return nlu
}

// AddTaskID adds u to the "task_id" field.
func (nlu *NotifyLogUpdate) AddTaskID(u int64) *NotifyLogUpdate {
	nlu.mutation.AddTaskID(u)
	return nlu
}

// SetNotifyTimes sets the "notify_times" field.
func (nlu *NotifyLogUpdate) SetNotifyTimes(i int8) *NotifyLogUpdate {
	nlu.mutation.ResetNotifyTimes()
	nlu.mutation.SetNotifyTimes(i)
	return nlu
}

// SetNillableNotifyTimes sets the "notify_times" field if the given value is not nil.
func (nlu *NotifyLogUpdate) SetNillableNotifyTimes(i *int8) *NotifyLogUpdate {
	if i != nil {
		nlu.SetNotifyTimes(*i)
	}
	return nlu
}

// AddNotifyTimes adds i to the "notify_times" field.
func (nlu *NotifyLogUpdate) AddNotifyTimes(i int8) *NotifyLogUpdate {
	nlu.mutation.AddNotifyTimes(i)
	return nlu
}

// SetResponse sets the "response" field.
func (nlu *NotifyLogUpdate) SetResponse(s string) *NotifyLogUpdate {
	nlu.mutation.SetResponse(s)
	return nlu
}

// SetNillableResponse sets the "response" field if the given value is not nil.
func (nlu *NotifyLogUpdate) SetNillableResponse(s *string) *NotifyLogUpdate {
	if s != nil {
		nlu.SetResponse(*s)
	}
	return nlu
}

// Mutation returns the NotifyLogMutation object of the builder.
func (nlu *NotifyLogUpdate) Mutation() *NotifyLogMutation {
	return nlu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (nlu *NotifyLogUpdate) Save(ctx context.Context) (int, error) {
	if err := nlu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, nlu.sqlSave, nlu.mutation, nlu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (nlu *NotifyLogUpdate) SaveX(ctx context.Context) int {
	affected, err := nlu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (nlu *NotifyLogUpdate) Exec(ctx context.Context) error {
	_, err := nlu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nlu *NotifyLogUpdate) ExecX(ctx context.Context) {
	if err := nlu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (nlu *NotifyLogUpdate) defaults() error {
	if _, ok := nlu.mutation.UpdatedAt(); !ok {
		if notifylog.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized notifylog.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := notifylog.UpdateDefaultUpdatedAt()
		nlu.mutation.SetUpdatedAt(v)
	}
	return nil
}

func (nlu *NotifyLogUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(notifylog.Table, notifylog.Columns, sqlgraph.NewFieldSpec(notifylog.FieldID, field.TypeUint64))
	if ps := nlu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := nlu.mutation.UpdatedAt(); ok {
		_spec.SetField(notifylog.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := nlu.mutation.Status(); ok {
		_spec.SetField(notifylog.FieldStatus, field.TypeUint8, value)
	}
	if value, ok := nlu.mutation.AddedStatus(); ok {
		_spec.AddField(notifylog.FieldStatus, field.TypeUint8, value)
	}
	if nlu.mutation.StatusCleared() {
		_spec.ClearField(notifylog.FieldStatus, field.TypeUint8)
	}
	if value, ok := nlu.mutation.DeletedAt(); ok {
		_spec.SetField(notifylog.FieldDeletedAt, field.TypeTime, value)
	}
	if nlu.mutation.DeletedAtCleared() {
		_spec.ClearField(notifylog.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := nlu.mutation.TaskID(); ok {
		_spec.SetField(notifylog.FieldTaskID, field.TypeUint64, value)
	}
	if value, ok := nlu.mutation.AddedTaskID(); ok {
		_spec.AddField(notifylog.FieldTaskID, field.TypeUint64, value)
	}
	if value, ok := nlu.mutation.NotifyTimes(); ok {
		_spec.SetField(notifylog.FieldNotifyTimes, field.TypeInt8, value)
	}
	if value, ok := nlu.mutation.AddedNotifyTimes(); ok {
		_spec.AddField(notifylog.FieldNotifyTimes, field.TypeInt8, value)
	}
	if value, ok := nlu.mutation.Response(); ok {
		_spec.SetField(notifylog.FieldResponse, field.TypeString, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, nlu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{notifylog.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	nlu.mutation.done = true
	return n, nil
}

// NotifyLogUpdateOne is the builder for updating a single NotifyLog entity.
type NotifyLogUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *NotifyLogMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (nluo *NotifyLogUpdateOne) SetUpdatedAt(t time.Time) *NotifyLogUpdateOne {
	nluo.mutation.SetUpdatedAt(t)
	return nluo
}

// SetStatus sets the "status" field.
func (nluo *NotifyLogUpdateOne) SetStatus(u uint8) *NotifyLogUpdateOne {
	nluo.mutation.ResetStatus()
	nluo.mutation.SetStatus(u)
	return nluo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (nluo *NotifyLogUpdateOne) SetNillableStatus(u *uint8) *NotifyLogUpdateOne {
	if u != nil {
		nluo.SetStatus(*u)
	}
	return nluo
}

// AddStatus adds u to the "status" field.
func (nluo *NotifyLogUpdateOne) AddStatus(u int8) *NotifyLogUpdateOne {
	nluo.mutation.AddStatus(u)
	return nluo
}

// ClearStatus clears the value of the "status" field.
func (nluo *NotifyLogUpdateOne) ClearStatus() *NotifyLogUpdateOne {
	nluo.mutation.ClearStatus()
	return nluo
}

// SetDeletedAt sets the "deleted_at" field.
func (nluo *NotifyLogUpdateOne) SetDeletedAt(t time.Time) *NotifyLogUpdateOne {
	nluo.mutation.SetDeletedAt(t)
	return nluo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (nluo *NotifyLogUpdateOne) SetNillableDeletedAt(t *time.Time) *NotifyLogUpdateOne {
	if t != nil {
		nluo.SetDeletedAt(*t)
	}
	return nluo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (nluo *NotifyLogUpdateOne) ClearDeletedAt() *NotifyLogUpdateOne {
	nluo.mutation.ClearDeletedAt()
	return nluo
}

// SetTaskID sets the "task_id" field.
func (nluo *NotifyLogUpdateOne) SetTaskID(u uint64) *NotifyLogUpdateOne {
	nluo.mutation.ResetTaskID()
	nluo.mutation.SetTaskID(u)
	return nluo
}

// SetNillableTaskID sets the "task_id" field if the given value is not nil.
func (nluo *NotifyLogUpdateOne) SetNillableTaskID(u *uint64) *NotifyLogUpdateOne {
	if u != nil {
		nluo.SetTaskID(*u)
	}
	return nluo
}

// AddTaskID adds u to the "task_id" field.
func (nluo *NotifyLogUpdateOne) AddTaskID(u int64) *NotifyLogUpdateOne {
	nluo.mutation.AddTaskID(u)
	return nluo
}

// SetNotifyTimes sets the "notify_times" field.
func (nluo *NotifyLogUpdateOne) SetNotifyTimes(i int8) *NotifyLogUpdateOne {
	nluo.mutation.ResetNotifyTimes()
	nluo.mutation.SetNotifyTimes(i)
	return nluo
}

// SetNillableNotifyTimes sets the "notify_times" field if the given value is not nil.
func (nluo *NotifyLogUpdateOne) SetNillableNotifyTimes(i *int8) *NotifyLogUpdateOne {
	if i != nil {
		nluo.SetNotifyTimes(*i)
	}
	return nluo
}

// AddNotifyTimes adds i to the "notify_times" field.
func (nluo *NotifyLogUpdateOne) AddNotifyTimes(i int8) *NotifyLogUpdateOne {
	nluo.mutation.AddNotifyTimes(i)
	return nluo
}

// SetResponse sets the "response" field.
func (nluo *NotifyLogUpdateOne) SetResponse(s string) *NotifyLogUpdateOne {
	nluo.mutation.SetResponse(s)
	return nluo
}

// SetNillableResponse sets the "response" field if the given value is not nil.
func (nluo *NotifyLogUpdateOne) SetNillableResponse(s *string) *NotifyLogUpdateOne {
	if s != nil {
		nluo.SetResponse(*s)
	}
	return nluo
}

// Mutation returns the NotifyLogMutation object of the builder.
func (nluo *NotifyLogUpdateOne) Mutation() *NotifyLogMutation {
	return nluo.mutation
}

// Where appends a list predicates to the NotifyLogUpdate builder.
func (nluo *NotifyLogUpdateOne) Where(ps ...predicate.NotifyLog) *NotifyLogUpdateOne {
	nluo.mutation.Where(ps...)
	return nluo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (nluo *NotifyLogUpdateOne) Select(field string, fields ...string) *NotifyLogUpdateOne {
	nluo.fields = append([]string{field}, fields...)
	return nluo
}

// Save executes the query and returns the updated NotifyLog entity.
func (nluo *NotifyLogUpdateOne) Save(ctx context.Context) (*NotifyLog, error) {
	if err := nluo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, nluo.sqlSave, nluo.mutation, nluo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (nluo *NotifyLogUpdateOne) SaveX(ctx context.Context) *NotifyLog {
	node, err := nluo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (nluo *NotifyLogUpdateOne) Exec(ctx context.Context) error {
	_, err := nluo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nluo *NotifyLogUpdateOne) ExecX(ctx context.Context) {
	if err := nluo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (nluo *NotifyLogUpdateOne) defaults() error {
	if _, ok := nluo.mutation.UpdatedAt(); !ok {
		if notifylog.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized notifylog.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := notifylog.UpdateDefaultUpdatedAt()
		nluo.mutation.SetUpdatedAt(v)
	}
	return nil
}

func (nluo *NotifyLogUpdateOne) sqlSave(ctx context.Context) (_node *NotifyLog, err error) {
	_spec := sqlgraph.NewUpdateSpec(notifylog.Table, notifylog.Columns, sqlgraph.NewFieldSpec(notifylog.FieldID, field.TypeUint64))
	id, ok := nluo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "NotifyLog.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := nluo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, notifylog.FieldID)
		for _, f := range fields {
			if !notifylog.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != notifylog.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := nluo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := nluo.mutation.UpdatedAt(); ok {
		_spec.SetField(notifylog.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := nluo.mutation.Status(); ok {
		_spec.SetField(notifylog.FieldStatus, field.TypeUint8, value)
	}
	if value, ok := nluo.mutation.AddedStatus(); ok {
		_spec.AddField(notifylog.FieldStatus, field.TypeUint8, value)
	}
	if nluo.mutation.StatusCleared() {
		_spec.ClearField(notifylog.FieldStatus, field.TypeUint8)
	}
	if value, ok := nluo.mutation.DeletedAt(); ok {
		_spec.SetField(notifylog.FieldDeletedAt, field.TypeTime, value)
	}
	if nluo.mutation.DeletedAtCleared() {
		_spec.ClearField(notifylog.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := nluo.mutation.TaskID(); ok {
		_spec.SetField(notifylog.FieldTaskID, field.TypeUint64, value)
	}
	if value, ok := nluo.mutation.AddedTaskID(); ok {
		_spec.AddField(notifylog.FieldTaskID, field.TypeUint64, value)
	}
	if value, ok := nluo.mutation.NotifyTimes(); ok {
		_spec.SetField(notifylog.FieldNotifyTimes, field.TypeInt8, value)
	}
	if value, ok := nluo.mutation.AddedNotifyTimes(); ok {
		_spec.AddField(notifylog.FieldNotifyTimes, field.TypeInt8, value)
	}
	if value, ok := nluo.mutation.Response(); ok {
		_spec.SetField(notifylog.FieldResponse, field.TypeString, value)
	}
	_node = &NotifyLog{config: nluo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, nluo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{notifylog.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	nluo.mutation.done = true
	return _node, nil
}

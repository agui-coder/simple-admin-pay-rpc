// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"github.com/agui-coder/simple-admin-pay-rpc/ent/orderextension"
	"github.com/agui-coder/simple-admin-pay-rpc/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// OrderExtensionUpdate is the builder for updating OrderExtension entities.
type OrderExtensionUpdate struct {
	config
	hooks    []Hook
	mutation *OrderExtensionMutation
}

// Where appends a list predicates to the OrderExtensionUpdate builder.
func (oeu *OrderExtensionUpdate) Where(ps ...predicate.OrderExtension) *OrderExtensionUpdate {
	oeu.mutation.Where(ps...)
	return oeu
}

// SetUpdatedAt sets the "updated_at" field.
func (oeu *OrderExtensionUpdate) SetUpdatedAt(t time.Time) *OrderExtensionUpdate {
	oeu.mutation.SetUpdatedAt(t)
	return oeu
}

// SetStatus sets the "status" field.
func (oeu *OrderExtensionUpdate) SetStatus(u uint8) *OrderExtensionUpdate {
	oeu.mutation.ResetStatus()
	oeu.mutation.SetStatus(u)
	return oeu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (oeu *OrderExtensionUpdate) SetNillableStatus(u *uint8) *OrderExtensionUpdate {
	if u != nil {
		oeu.SetStatus(*u)
	}
	return oeu
}

// AddStatus adds u to the "status" field.
func (oeu *OrderExtensionUpdate) AddStatus(u int8) *OrderExtensionUpdate {
	oeu.mutation.AddStatus(u)
	return oeu
}

// ClearStatus clears the value of the "status" field.
func (oeu *OrderExtensionUpdate) ClearStatus() *OrderExtensionUpdate {
	oeu.mutation.ClearStatus()
	return oeu
}

// SetDeletedAt sets the "deleted_at" field.
func (oeu *OrderExtensionUpdate) SetDeletedAt(t time.Time) *OrderExtensionUpdate {
	oeu.mutation.SetDeletedAt(t)
	return oeu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (oeu *OrderExtensionUpdate) SetNillableDeletedAt(t *time.Time) *OrderExtensionUpdate {
	if t != nil {
		oeu.SetDeletedAt(*t)
	}
	return oeu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (oeu *OrderExtensionUpdate) ClearDeletedAt() *OrderExtensionUpdate {
	oeu.mutation.ClearDeletedAt()
	return oeu
}

// SetNo sets the "no" field.
func (oeu *OrderExtensionUpdate) SetNo(s string) *OrderExtensionUpdate {
	oeu.mutation.SetNo(s)
	return oeu
}

// SetOrderID sets the "order_id" field.
func (oeu *OrderExtensionUpdate) SetOrderID(u uint64) *OrderExtensionUpdate {
	oeu.mutation.ResetOrderID()
	oeu.mutation.SetOrderID(u)
	return oeu
}

// AddOrderID adds u to the "order_id" field.
func (oeu *OrderExtensionUpdate) AddOrderID(u int64) *OrderExtensionUpdate {
	oeu.mutation.AddOrderID(u)
	return oeu
}

// SetChannelID sets the "channel_id" field.
func (oeu *OrderExtensionUpdate) SetChannelID(u uint64) *OrderExtensionUpdate {
	oeu.mutation.ResetChannelID()
	oeu.mutation.SetChannelID(u)
	return oeu
}

// AddChannelID adds u to the "channel_id" field.
func (oeu *OrderExtensionUpdate) AddChannelID(u int64) *OrderExtensionUpdate {
	oeu.mutation.AddChannelID(u)
	return oeu
}

// SetChannelCode sets the "channel_code" field.
func (oeu *OrderExtensionUpdate) SetChannelCode(s string) *OrderExtensionUpdate {
	oeu.mutation.SetChannelCode(s)
	return oeu
}

// SetUserIP sets the "user_ip" field.
func (oeu *OrderExtensionUpdate) SetUserIP(s string) *OrderExtensionUpdate {
	oeu.mutation.SetUserIP(s)
	return oeu
}

// SetChannelExtras sets the "channel_extras" field.
func (oeu *OrderExtensionUpdate) SetChannelExtras(m map[string]string) *OrderExtensionUpdate {
	oeu.mutation.SetChannelExtras(m)
	return oeu
}

// ClearChannelExtras clears the value of the "channel_extras" field.
func (oeu *OrderExtensionUpdate) ClearChannelExtras() *OrderExtensionUpdate {
	oeu.mutation.ClearChannelExtras()
	return oeu
}

// SetChannelErrorCode sets the "channel_error_code" field.
func (oeu *OrderExtensionUpdate) SetChannelErrorCode(s string) *OrderExtensionUpdate {
	oeu.mutation.SetChannelErrorCode(s)
	return oeu
}

// SetNillableChannelErrorCode sets the "channel_error_code" field if the given value is not nil.
func (oeu *OrderExtensionUpdate) SetNillableChannelErrorCode(s *string) *OrderExtensionUpdate {
	if s != nil {
		oeu.SetChannelErrorCode(*s)
	}
	return oeu
}

// ClearChannelErrorCode clears the value of the "channel_error_code" field.
func (oeu *OrderExtensionUpdate) ClearChannelErrorCode() *OrderExtensionUpdate {
	oeu.mutation.ClearChannelErrorCode()
	return oeu
}

// SetChannelErrorMsg sets the "channel_error_msg" field.
func (oeu *OrderExtensionUpdate) SetChannelErrorMsg(s string) *OrderExtensionUpdate {
	oeu.mutation.SetChannelErrorMsg(s)
	return oeu
}

// SetNillableChannelErrorMsg sets the "channel_error_msg" field if the given value is not nil.
func (oeu *OrderExtensionUpdate) SetNillableChannelErrorMsg(s *string) *OrderExtensionUpdate {
	if s != nil {
		oeu.SetChannelErrorMsg(*s)
	}
	return oeu
}

// ClearChannelErrorMsg clears the value of the "channel_error_msg" field.
func (oeu *OrderExtensionUpdate) ClearChannelErrorMsg() *OrderExtensionUpdate {
	oeu.mutation.ClearChannelErrorMsg()
	return oeu
}

// SetChannelNotifyData sets the "channel_notify_data" field.
func (oeu *OrderExtensionUpdate) SetChannelNotifyData(s string) *OrderExtensionUpdate {
	oeu.mutation.SetChannelNotifyData(s)
	return oeu
}

// SetNillableChannelNotifyData sets the "channel_notify_data" field if the given value is not nil.
func (oeu *OrderExtensionUpdate) SetNillableChannelNotifyData(s *string) *OrderExtensionUpdate {
	if s != nil {
		oeu.SetChannelNotifyData(*s)
	}
	return oeu
}

// ClearChannelNotifyData clears the value of the "channel_notify_data" field.
func (oeu *OrderExtensionUpdate) ClearChannelNotifyData() *OrderExtensionUpdate {
	oeu.mutation.ClearChannelNotifyData()
	return oeu
}

// Mutation returns the OrderExtensionMutation object of the builder.
func (oeu *OrderExtensionUpdate) Mutation() *OrderExtensionMutation {
	return oeu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (oeu *OrderExtensionUpdate) Save(ctx context.Context) (int, error) {
	if err := oeu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, oeu.sqlSave, oeu.mutation, oeu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (oeu *OrderExtensionUpdate) SaveX(ctx context.Context) int {
	affected, err := oeu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (oeu *OrderExtensionUpdate) Exec(ctx context.Context) error {
	_, err := oeu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oeu *OrderExtensionUpdate) ExecX(ctx context.Context) {
	if err := oeu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (oeu *OrderExtensionUpdate) defaults() error {
	if _, ok := oeu.mutation.UpdatedAt(); !ok {
		if orderextension.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized orderextension.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := orderextension.UpdateDefaultUpdatedAt()
		oeu.mutation.SetUpdatedAt(v)
	}
	return nil
}

func (oeu *OrderExtensionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(orderextension.Table, orderextension.Columns, sqlgraph.NewFieldSpec(orderextension.FieldID, field.TypeUint64))
	if ps := oeu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := oeu.mutation.UpdatedAt(); ok {
		_spec.SetField(orderextension.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := oeu.mutation.Status(); ok {
		_spec.SetField(orderextension.FieldStatus, field.TypeUint8, value)
	}
	if value, ok := oeu.mutation.AddedStatus(); ok {
		_spec.AddField(orderextension.FieldStatus, field.TypeUint8, value)
	}
	if oeu.mutation.StatusCleared() {
		_spec.ClearField(orderextension.FieldStatus, field.TypeUint8)
	}
	if value, ok := oeu.mutation.DeletedAt(); ok {
		_spec.SetField(orderextension.FieldDeletedAt, field.TypeTime, value)
	}
	if oeu.mutation.DeletedAtCleared() {
		_spec.ClearField(orderextension.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := oeu.mutation.No(); ok {
		_spec.SetField(orderextension.FieldNo, field.TypeString, value)
	}
	if value, ok := oeu.mutation.OrderID(); ok {
		_spec.SetField(orderextension.FieldOrderID, field.TypeUint64, value)
	}
	if value, ok := oeu.mutation.AddedOrderID(); ok {
		_spec.AddField(orderextension.FieldOrderID, field.TypeUint64, value)
	}
	if value, ok := oeu.mutation.ChannelID(); ok {
		_spec.SetField(orderextension.FieldChannelID, field.TypeUint64, value)
	}
	if value, ok := oeu.mutation.AddedChannelID(); ok {
		_spec.AddField(orderextension.FieldChannelID, field.TypeUint64, value)
	}
	if value, ok := oeu.mutation.ChannelCode(); ok {
		_spec.SetField(orderextension.FieldChannelCode, field.TypeString, value)
	}
	if value, ok := oeu.mutation.UserIP(); ok {
		_spec.SetField(orderextension.FieldUserIP, field.TypeString, value)
	}
	if value, ok := oeu.mutation.ChannelExtras(); ok {
		_spec.SetField(orderextension.FieldChannelExtras, field.TypeJSON, value)
	}
	if oeu.mutation.ChannelExtrasCleared() {
		_spec.ClearField(orderextension.FieldChannelExtras, field.TypeJSON)
	}
	if value, ok := oeu.mutation.ChannelErrorCode(); ok {
		_spec.SetField(orderextension.FieldChannelErrorCode, field.TypeString, value)
	}
	if oeu.mutation.ChannelErrorCodeCleared() {
		_spec.ClearField(orderextension.FieldChannelErrorCode, field.TypeString)
	}
	if value, ok := oeu.mutation.ChannelErrorMsg(); ok {
		_spec.SetField(orderextension.FieldChannelErrorMsg, field.TypeString, value)
	}
	if oeu.mutation.ChannelErrorMsgCleared() {
		_spec.ClearField(orderextension.FieldChannelErrorMsg, field.TypeString)
	}
	if value, ok := oeu.mutation.ChannelNotifyData(); ok {
		_spec.SetField(orderextension.FieldChannelNotifyData, field.TypeString, value)
	}
	if oeu.mutation.ChannelNotifyDataCleared() {
		_spec.ClearField(orderextension.FieldChannelNotifyData, field.TypeString)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, oeu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{orderextension.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	oeu.mutation.done = true
	return n, nil
}

// OrderExtensionUpdateOne is the builder for updating a single OrderExtension entity.
type OrderExtensionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *OrderExtensionMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (oeuo *OrderExtensionUpdateOne) SetUpdatedAt(t time.Time) *OrderExtensionUpdateOne {
	oeuo.mutation.SetUpdatedAt(t)
	return oeuo
}

// SetStatus sets the "status" field.
func (oeuo *OrderExtensionUpdateOne) SetStatus(u uint8) *OrderExtensionUpdateOne {
	oeuo.mutation.ResetStatus()
	oeuo.mutation.SetStatus(u)
	return oeuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (oeuo *OrderExtensionUpdateOne) SetNillableStatus(u *uint8) *OrderExtensionUpdateOne {
	if u != nil {
		oeuo.SetStatus(*u)
	}
	return oeuo
}

// AddStatus adds u to the "status" field.
func (oeuo *OrderExtensionUpdateOne) AddStatus(u int8) *OrderExtensionUpdateOne {
	oeuo.mutation.AddStatus(u)
	return oeuo
}

// ClearStatus clears the value of the "status" field.
func (oeuo *OrderExtensionUpdateOne) ClearStatus() *OrderExtensionUpdateOne {
	oeuo.mutation.ClearStatus()
	return oeuo
}

// SetDeletedAt sets the "deleted_at" field.
func (oeuo *OrderExtensionUpdateOne) SetDeletedAt(t time.Time) *OrderExtensionUpdateOne {
	oeuo.mutation.SetDeletedAt(t)
	return oeuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (oeuo *OrderExtensionUpdateOne) SetNillableDeletedAt(t *time.Time) *OrderExtensionUpdateOne {
	if t != nil {
		oeuo.SetDeletedAt(*t)
	}
	return oeuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (oeuo *OrderExtensionUpdateOne) ClearDeletedAt() *OrderExtensionUpdateOne {
	oeuo.mutation.ClearDeletedAt()
	return oeuo
}

// SetNo sets the "no" field.
func (oeuo *OrderExtensionUpdateOne) SetNo(s string) *OrderExtensionUpdateOne {
	oeuo.mutation.SetNo(s)
	return oeuo
}

// SetOrderID sets the "order_id" field.
func (oeuo *OrderExtensionUpdateOne) SetOrderID(u uint64) *OrderExtensionUpdateOne {
	oeuo.mutation.ResetOrderID()
	oeuo.mutation.SetOrderID(u)
	return oeuo
}

// AddOrderID adds u to the "order_id" field.
func (oeuo *OrderExtensionUpdateOne) AddOrderID(u int64) *OrderExtensionUpdateOne {
	oeuo.mutation.AddOrderID(u)
	return oeuo
}

// SetChannelID sets the "channel_id" field.
func (oeuo *OrderExtensionUpdateOne) SetChannelID(u uint64) *OrderExtensionUpdateOne {
	oeuo.mutation.ResetChannelID()
	oeuo.mutation.SetChannelID(u)
	return oeuo
}

// AddChannelID adds u to the "channel_id" field.
func (oeuo *OrderExtensionUpdateOne) AddChannelID(u int64) *OrderExtensionUpdateOne {
	oeuo.mutation.AddChannelID(u)
	return oeuo
}

// SetChannelCode sets the "channel_code" field.
func (oeuo *OrderExtensionUpdateOne) SetChannelCode(s string) *OrderExtensionUpdateOne {
	oeuo.mutation.SetChannelCode(s)
	return oeuo
}

// SetUserIP sets the "user_ip" field.
func (oeuo *OrderExtensionUpdateOne) SetUserIP(s string) *OrderExtensionUpdateOne {
	oeuo.mutation.SetUserIP(s)
	return oeuo
}

// SetChannelExtras sets the "channel_extras" field.
func (oeuo *OrderExtensionUpdateOne) SetChannelExtras(m map[string]string) *OrderExtensionUpdateOne {
	oeuo.mutation.SetChannelExtras(m)
	return oeuo
}

// ClearChannelExtras clears the value of the "channel_extras" field.
func (oeuo *OrderExtensionUpdateOne) ClearChannelExtras() *OrderExtensionUpdateOne {
	oeuo.mutation.ClearChannelExtras()
	return oeuo
}

// SetChannelErrorCode sets the "channel_error_code" field.
func (oeuo *OrderExtensionUpdateOne) SetChannelErrorCode(s string) *OrderExtensionUpdateOne {
	oeuo.mutation.SetChannelErrorCode(s)
	return oeuo
}

// SetNillableChannelErrorCode sets the "channel_error_code" field if the given value is not nil.
func (oeuo *OrderExtensionUpdateOne) SetNillableChannelErrorCode(s *string) *OrderExtensionUpdateOne {
	if s != nil {
		oeuo.SetChannelErrorCode(*s)
	}
	return oeuo
}

// ClearChannelErrorCode clears the value of the "channel_error_code" field.
func (oeuo *OrderExtensionUpdateOne) ClearChannelErrorCode() *OrderExtensionUpdateOne {
	oeuo.mutation.ClearChannelErrorCode()
	return oeuo
}

// SetChannelErrorMsg sets the "channel_error_msg" field.
func (oeuo *OrderExtensionUpdateOne) SetChannelErrorMsg(s string) *OrderExtensionUpdateOne {
	oeuo.mutation.SetChannelErrorMsg(s)
	return oeuo
}

// SetNillableChannelErrorMsg sets the "channel_error_msg" field if the given value is not nil.
func (oeuo *OrderExtensionUpdateOne) SetNillableChannelErrorMsg(s *string) *OrderExtensionUpdateOne {
	if s != nil {
		oeuo.SetChannelErrorMsg(*s)
	}
	return oeuo
}

// ClearChannelErrorMsg clears the value of the "channel_error_msg" field.
func (oeuo *OrderExtensionUpdateOne) ClearChannelErrorMsg() *OrderExtensionUpdateOne {
	oeuo.mutation.ClearChannelErrorMsg()
	return oeuo
}

// SetChannelNotifyData sets the "channel_notify_data" field.
func (oeuo *OrderExtensionUpdateOne) SetChannelNotifyData(s string) *OrderExtensionUpdateOne {
	oeuo.mutation.SetChannelNotifyData(s)
	return oeuo
}

// SetNillableChannelNotifyData sets the "channel_notify_data" field if the given value is not nil.
func (oeuo *OrderExtensionUpdateOne) SetNillableChannelNotifyData(s *string) *OrderExtensionUpdateOne {
	if s != nil {
		oeuo.SetChannelNotifyData(*s)
	}
	return oeuo
}

// ClearChannelNotifyData clears the value of the "channel_notify_data" field.
func (oeuo *OrderExtensionUpdateOne) ClearChannelNotifyData() *OrderExtensionUpdateOne {
	oeuo.mutation.ClearChannelNotifyData()
	return oeuo
}

// Mutation returns the OrderExtensionMutation object of the builder.
func (oeuo *OrderExtensionUpdateOne) Mutation() *OrderExtensionMutation {
	return oeuo.mutation
}

// Where appends a list predicates to the OrderExtensionUpdate builder.
func (oeuo *OrderExtensionUpdateOne) Where(ps ...predicate.OrderExtension) *OrderExtensionUpdateOne {
	oeuo.mutation.Where(ps...)
	return oeuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (oeuo *OrderExtensionUpdateOne) Select(field string, fields ...string) *OrderExtensionUpdateOne {
	oeuo.fields = append([]string{field}, fields...)
	return oeuo
}

// Save executes the query and returns the updated OrderExtension entity.
func (oeuo *OrderExtensionUpdateOne) Save(ctx context.Context) (*OrderExtension, error) {
	if err := oeuo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, oeuo.sqlSave, oeuo.mutation, oeuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (oeuo *OrderExtensionUpdateOne) SaveX(ctx context.Context) *OrderExtension {
	node, err := oeuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (oeuo *OrderExtensionUpdateOne) Exec(ctx context.Context) error {
	_, err := oeuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oeuo *OrderExtensionUpdateOne) ExecX(ctx context.Context) {
	if err := oeuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (oeuo *OrderExtensionUpdateOne) defaults() error {
	if _, ok := oeuo.mutation.UpdatedAt(); !ok {
		if orderextension.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized orderextension.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := orderextension.UpdateDefaultUpdatedAt()
		oeuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

func (oeuo *OrderExtensionUpdateOne) sqlSave(ctx context.Context) (_node *OrderExtension, err error) {
	_spec := sqlgraph.NewUpdateSpec(orderextension.Table, orderextension.Columns, sqlgraph.NewFieldSpec(orderextension.FieldID, field.TypeUint64))
	id, ok := oeuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "OrderExtension.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := oeuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, orderextension.FieldID)
		for _, f := range fields {
			if !orderextension.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != orderextension.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := oeuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := oeuo.mutation.UpdatedAt(); ok {
		_spec.SetField(orderextension.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := oeuo.mutation.Status(); ok {
		_spec.SetField(orderextension.FieldStatus, field.TypeUint8, value)
	}
	if value, ok := oeuo.mutation.AddedStatus(); ok {
		_spec.AddField(orderextension.FieldStatus, field.TypeUint8, value)
	}
	if oeuo.mutation.StatusCleared() {
		_spec.ClearField(orderextension.FieldStatus, field.TypeUint8)
	}
	if value, ok := oeuo.mutation.DeletedAt(); ok {
		_spec.SetField(orderextension.FieldDeletedAt, field.TypeTime, value)
	}
	if oeuo.mutation.DeletedAtCleared() {
		_spec.ClearField(orderextension.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := oeuo.mutation.No(); ok {
		_spec.SetField(orderextension.FieldNo, field.TypeString, value)
	}
	if value, ok := oeuo.mutation.OrderID(); ok {
		_spec.SetField(orderextension.FieldOrderID, field.TypeUint64, value)
	}
	if value, ok := oeuo.mutation.AddedOrderID(); ok {
		_spec.AddField(orderextension.FieldOrderID, field.TypeUint64, value)
	}
	if value, ok := oeuo.mutation.ChannelID(); ok {
		_spec.SetField(orderextension.FieldChannelID, field.TypeUint64, value)
	}
	if value, ok := oeuo.mutation.AddedChannelID(); ok {
		_spec.AddField(orderextension.FieldChannelID, field.TypeUint64, value)
	}
	if value, ok := oeuo.mutation.ChannelCode(); ok {
		_spec.SetField(orderextension.FieldChannelCode, field.TypeString, value)
	}
	if value, ok := oeuo.mutation.UserIP(); ok {
		_spec.SetField(orderextension.FieldUserIP, field.TypeString, value)
	}
	if value, ok := oeuo.mutation.ChannelExtras(); ok {
		_spec.SetField(orderextension.FieldChannelExtras, field.TypeJSON, value)
	}
	if oeuo.mutation.ChannelExtrasCleared() {
		_spec.ClearField(orderextension.FieldChannelExtras, field.TypeJSON)
	}
	if value, ok := oeuo.mutation.ChannelErrorCode(); ok {
		_spec.SetField(orderextension.FieldChannelErrorCode, field.TypeString, value)
	}
	if oeuo.mutation.ChannelErrorCodeCleared() {
		_spec.ClearField(orderextension.FieldChannelErrorCode, field.TypeString)
	}
	if value, ok := oeuo.mutation.ChannelErrorMsg(); ok {
		_spec.SetField(orderextension.FieldChannelErrorMsg, field.TypeString, value)
	}
	if oeuo.mutation.ChannelErrorMsgCleared() {
		_spec.ClearField(orderextension.FieldChannelErrorMsg, field.TypeString)
	}
	if value, ok := oeuo.mutation.ChannelNotifyData(); ok {
		_spec.SetField(orderextension.FieldChannelNotifyData, field.TypeString, value)
	}
	if oeuo.mutation.ChannelNotifyDataCleared() {
		_spec.ClearField(orderextension.FieldChannelNotifyData, field.TypeString)
	}
	_node = &OrderExtension{config: oeuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, oeuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{orderextension.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	oeuo.mutation.done = true
	return _node, nil
}

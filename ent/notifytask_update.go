// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"github.com/agui-coder/simple-admin-pay-rpc/ent/notifytask"
	"github.com/agui-coder/simple-admin-pay-rpc/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// NotifyTaskUpdate is the builder for updating NotifyTask entities.
type NotifyTaskUpdate struct {
	config
	hooks    []Hook
	mutation *NotifyTaskMutation
}

// Where appends a list predicates to the NotifyTaskUpdate builder.
func (ntu *NotifyTaskUpdate) Where(ps ...predicate.NotifyTask) *NotifyTaskUpdate {
	ntu.mutation.Where(ps...)
	return ntu
}

// SetUpdatedAt sets the "updated_at" field.
func (ntu *NotifyTaskUpdate) SetUpdatedAt(t time.Time) *NotifyTaskUpdate {
	ntu.mutation.SetUpdatedAt(t)
	return ntu
}

// SetStatus sets the "status" field.
func (ntu *NotifyTaskUpdate) SetStatus(u uint8) *NotifyTaskUpdate {
	ntu.mutation.ResetStatus()
	ntu.mutation.SetStatus(u)
	return ntu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ntu *NotifyTaskUpdate) SetNillableStatus(u *uint8) *NotifyTaskUpdate {
	if u != nil {
		ntu.SetStatus(*u)
	}
	return ntu
}

// AddStatus adds u to the "status" field.
func (ntu *NotifyTaskUpdate) AddStatus(u int8) *NotifyTaskUpdate {
	ntu.mutation.AddStatus(u)
	return ntu
}

// ClearStatus clears the value of the "status" field.
func (ntu *NotifyTaskUpdate) ClearStatus() *NotifyTaskUpdate {
	ntu.mutation.ClearStatus()
	return ntu
}

// SetDeletedAt sets the "deleted_at" field.
func (ntu *NotifyTaskUpdate) SetDeletedAt(t time.Time) *NotifyTaskUpdate {
	ntu.mutation.SetDeletedAt(t)
	return ntu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ntu *NotifyTaskUpdate) SetNillableDeletedAt(t *time.Time) *NotifyTaskUpdate {
	if t != nil {
		ntu.SetDeletedAt(*t)
	}
	return ntu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (ntu *NotifyTaskUpdate) ClearDeletedAt() *NotifyTaskUpdate {
	ntu.mutation.ClearDeletedAt()
	return ntu
}

// SetAppID sets the "app_id" field.
func (ntu *NotifyTaskUpdate) SetAppID(u uint64) *NotifyTaskUpdate {
	ntu.mutation.ResetAppID()
	ntu.mutation.SetAppID(u)
	return ntu
}

// AddAppID adds u to the "app_id" field.
func (ntu *NotifyTaskUpdate) AddAppID(u int64) *NotifyTaskUpdate {
	ntu.mutation.AddAppID(u)
	return ntu
}

// SetType sets the "type" field.
func (ntu *NotifyTaskUpdate) SetType(i int) *NotifyTaskUpdate {
	ntu.mutation.ResetType()
	ntu.mutation.SetType(i)
	return ntu
}

// AddType adds i to the "type" field.
func (ntu *NotifyTaskUpdate) AddType(i int) *NotifyTaskUpdate {
	ntu.mutation.AddType(i)
	return ntu
}

// SetDataID sets the "data_id" field.
func (ntu *NotifyTaskUpdate) SetDataID(u uint64) *NotifyTaskUpdate {
	ntu.mutation.ResetDataID()
	ntu.mutation.SetDataID(u)
	return ntu
}

// AddDataID adds u to the "data_id" field.
func (ntu *NotifyTaskUpdate) AddDataID(u int64) *NotifyTaskUpdate {
	ntu.mutation.AddDataID(u)
	return ntu
}

// SetMerchantOrderID sets the "merchant_order_id" field.
func (ntu *NotifyTaskUpdate) SetMerchantOrderID(s string) *NotifyTaskUpdate {
	ntu.mutation.SetMerchantOrderID(s)
	return ntu
}

// SetNextNotifyTime sets the "next_notify_time" field.
func (ntu *NotifyTaskUpdate) SetNextNotifyTime(t time.Time) *NotifyTaskUpdate {
	ntu.mutation.SetNextNotifyTime(t)
	return ntu
}

// SetLastExecuteTime sets the "last_execute_time" field.
func (ntu *NotifyTaskUpdate) SetLastExecuteTime(t time.Time) *NotifyTaskUpdate {
	ntu.mutation.SetLastExecuteTime(t)
	return ntu
}

// SetNotifyTimes sets the "notify_times" field.
func (ntu *NotifyTaskUpdate) SetNotifyTimes(i int8) *NotifyTaskUpdate {
	ntu.mutation.ResetNotifyTimes()
	ntu.mutation.SetNotifyTimes(i)
	return ntu
}

// AddNotifyTimes adds i to the "notify_times" field.
func (ntu *NotifyTaskUpdate) AddNotifyTimes(i int8) *NotifyTaskUpdate {
	ntu.mutation.AddNotifyTimes(i)
	return ntu
}

// SetMaxNotifyTimes sets the "max_notify_times" field.
func (ntu *NotifyTaskUpdate) SetMaxNotifyTimes(i int8) *NotifyTaskUpdate {
	ntu.mutation.ResetMaxNotifyTimes()
	ntu.mutation.SetMaxNotifyTimes(i)
	return ntu
}

// AddMaxNotifyTimes adds i to the "max_notify_times" field.
func (ntu *NotifyTaskUpdate) AddMaxNotifyTimes(i int8) *NotifyTaskUpdate {
	ntu.mutation.AddMaxNotifyTimes(i)
	return ntu
}

// SetNotifyURL sets the "notify_url" field.
func (ntu *NotifyTaskUpdate) SetNotifyURL(s string) *NotifyTaskUpdate {
	ntu.mutation.SetNotifyURL(s)
	return ntu
}

// Mutation returns the NotifyTaskMutation object of the builder.
func (ntu *NotifyTaskUpdate) Mutation() *NotifyTaskMutation {
	return ntu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ntu *NotifyTaskUpdate) Save(ctx context.Context) (int, error) {
	if err := ntu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, ntu.sqlSave, ntu.mutation, ntu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ntu *NotifyTaskUpdate) SaveX(ctx context.Context) int {
	affected, err := ntu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ntu *NotifyTaskUpdate) Exec(ctx context.Context) error {
	_, err := ntu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ntu *NotifyTaskUpdate) ExecX(ctx context.Context) {
	if err := ntu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ntu *NotifyTaskUpdate) defaults() error {
	if _, ok := ntu.mutation.UpdatedAt(); !ok {
		if notifytask.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized notifytask.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := notifytask.UpdateDefaultUpdatedAt()
		ntu.mutation.SetUpdatedAt(v)
	}
	return nil
}

func (ntu *NotifyTaskUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(notifytask.Table, notifytask.Columns, sqlgraph.NewFieldSpec(notifytask.FieldID, field.TypeUint64))
	if ps := ntu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ntu.mutation.UpdatedAt(); ok {
		_spec.SetField(notifytask.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ntu.mutation.Status(); ok {
		_spec.SetField(notifytask.FieldStatus, field.TypeUint8, value)
	}
	if value, ok := ntu.mutation.AddedStatus(); ok {
		_spec.AddField(notifytask.FieldStatus, field.TypeUint8, value)
	}
	if ntu.mutation.StatusCleared() {
		_spec.ClearField(notifytask.FieldStatus, field.TypeUint8)
	}
	if value, ok := ntu.mutation.DeletedAt(); ok {
		_spec.SetField(notifytask.FieldDeletedAt, field.TypeTime, value)
	}
	if ntu.mutation.DeletedAtCleared() {
		_spec.ClearField(notifytask.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := ntu.mutation.AppID(); ok {
		_spec.SetField(notifytask.FieldAppID, field.TypeUint64, value)
	}
	if value, ok := ntu.mutation.AddedAppID(); ok {
		_spec.AddField(notifytask.FieldAppID, field.TypeUint64, value)
	}
	if value, ok := ntu.mutation.GetType(); ok {
		_spec.SetField(notifytask.FieldType, field.TypeInt, value)
	}
	if value, ok := ntu.mutation.AddedType(); ok {
		_spec.AddField(notifytask.FieldType, field.TypeInt, value)
	}
	if value, ok := ntu.mutation.DataID(); ok {
		_spec.SetField(notifytask.FieldDataID, field.TypeUint64, value)
	}
	if value, ok := ntu.mutation.AddedDataID(); ok {
		_spec.AddField(notifytask.FieldDataID, field.TypeUint64, value)
	}
	if value, ok := ntu.mutation.MerchantOrderID(); ok {
		_spec.SetField(notifytask.FieldMerchantOrderID, field.TypeString, value)
	}
	if value, ok := ntu.mutation.NextNotifyTime(); ok {
		_spec.SetField(notifytask.FieldNextNotifyTime, field.TypeTime, value)
	}
	if value, ok := ntu.mutation.LastExecuteTime(); ok {
		_spec.SetField(notifytask.FieldLastExecuteTime, field.TypeTime, value)
	}
	if value, ok := ntu.mutation.NotifyTimes(); ok {
		_spec.SetField(notifytask.FieldNotifyTimes, field.TypeInt8, value)
	}
	if value, ok := ntu.mutation.AddedNotifyTimes(); ok {
		_spec.AddField(notifytask.FieldNotifyTimes, field.TypeInt8, value)
	}
	if value, ok := ntu.mutation.MaxNotifyTimes(); ok {
		_spec.SetField(notifytask.FieldMaxNotifyTimes, field.TypeInt8, value)
	}
	if value, ok := ntu.mutation.AddedMaxNotifyTimes(); ok {
		_spec.AddField(notifytask.FieldMaxNotifyTimes, field.TypeInt8, value)
	}
	if value, ok := ntu.mutation.NotifyURL(); ok {
		_spec.SetField(notifytask.FieldNotifyURL, field.TypeString, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ntu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{notifytask.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ntu.mutation.done = true
	return n, nil
}

// NotifyTaskUpdateOne is the builder for updating a single NotifyTask entity.
type NotifyTaskUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *NotifyTaskMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (ntuo *NotifyTaskUpdateOne) SetUpdatedAt(t time.Time) *NotifyTaskUpdateOne {
	ntuo.mutation.SetUpdatedAt(t)
	return ntuo
}

// SetStatus sets the "status" field.
func (ntuo *NotifyTaskUpdateOne) SetStatus(u uint8) *NotifyTaskUpdateOne {
	ntuo.mutation.ResetStatus()
	ntuo.mutation.SetStatus(u)
	return ntuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ntuo *NotifyTaskUpdateOne) SetNillableStatus(u *uint8) *NotifyTaskUpdateOne {
	if u != nil {
		ntuo.SetStatus(*u)
	}
	return ntuo
}

// AddStatus adds u to the "status" field.
func (ntuo *NotifyTaskUpdateOne) AddStatus(u int8) *NotifyTaskUpdateOne {
	ntuo.mutation.AddStatus(u)
	return ntuo
}

// ClearStatus clears the value of the "status" field.
func (ntuo *NotifyTaskUpdateOne) ClearStatus() *NotifyTaskUpdateOne {
	ntuo.mutation.ClearStatus()
	return ntuo
}

// SetDeletedAt sets the "deleted_at" field.
func (ntuo *NotifyTaskUpdateOne) SetDeletedAt(t time.Time) *NotifyTaskUpdateOne {
	ntuo.mutation.SetDeletedAt(t)
	return ntuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ntuo *NotifyTaskUpdateOne) SetNillableDeletedAt(t *time.Time) *NotifyTaskUpdateOne {
	if t != nil {
		ntuo.SetDeletedAt(*t)
	}
	return ntuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (ntuo *NotifyTaskUpdateOne) ClearDeletedAt() *NotifyTaskUpdateOne {
	ntuo.mutation.ClearDeletedAt()
	return ntuo
}

// SetAppID sets the "app_id" field.
func (ntuo *NotifyTaskUpdateOne) SetAppID(u uint64) *NotifyTaskUpdateOne {
	ntuo.mutation.ResetAppID()
	ntuo.mutation.SetAppID(u)
	return ntuo
}

// AddAppID adds u to the "app_id" field.
func (ntuo *NotifyTaskUpdateOne) AddAppID(u int64) *NotifyTaskUpdateOne {
	ntuo.mutation.AddAppID(u)
	return ntuo
}

// SetType sets the "type" field.
func (ntuo *NotifyTaskUpdateOne) SetType(i int) *NotifyTaskUpdateOne {
	ntuo.mutation.ResetType()
	ntuo.mutation.SetType(i)
	return ntuo
}

// AddType adds i to the "type" field.
func (ntuo *NotifyTaskUpdateOne) AddType(i int) *NotifyTaskUpdateOne {
	ntuo.mutation.AddType(i)
	return ntuo
}

// SetDataID sets the "data_id" field.
func (ntuo *NotifyTaskUpdateOne) SetDataID(u uint64) *NotifyTaskUpdateOne {
	ntuo.mutation.ResetDataID()
	ntuo.mutation.SetDataID(u)
	return ntuo
}

// AddDataID adds u to the "data_id" field.
func (ntuo *NotifyTaskUpdateOne) AddDataID(u int64) *NotifyTaskUpdateOne {
	ntuo.mutation.AddDataID(u)
	return ntuo
}

// SetMerchantOrderID sets the "merchant_order_id" field.
func (ntuo *NotifyTaskUpdateOne) SetMerchantOrderID(s string) *NotifyTaskUpdateOne {
	ntuo.mutation.SetMerchantOrderID(s)
	return ntuo
}

// SetNextNotifyTime sets the "next_notify_time" field.
func (ntuo *NotifyTaskUpdateOne) SetNextNotifyTime(t time.Time) *NotifyTaskUpdateOne {
	ntuo.mutation.SetNextNotifyTime(t)
	return ntuo
}

// SetLastExecuteTime sets the "last_execute_time" field.
func (ntuo *NotifyTaskUpdateOne) SetLastExecuteTime(t time.Time) *NotifyTaskUpdateOne {
	ntuo.mutation.SetLastExecuteTime(t)
	return ntuo
}

// SetNotifyTimes sets the "notify_times" field.
func (ntuo *NotifyTaskUpdateOne) SetNotifyTimes(i int8) *NotifyTaskUpdateOne {
	ntuo.mutation.ResetNotifyTimes()
	ntuo.mutation.SetNotifyTimes(i)
	return ntuo
}

// AddNotifyTimes adds i to the "notify_times" field.
func (ntuo *NotifyTaskUpdateOne) AddNotifyTimes(i int8) *NotifyTaskUpdateOne {
	ntuo.mutation.AddNotifyTimes(i)
	return ntuo
}

// SetMaxNotifyTimes sets the "max_notify_times" field.
func (ntuo *NotifyTaskUpdateOne) SetMaxNotifyTimes(i int8) *NotifyTaskUpdateOne {
	ntuo.mutation.ResetMaxNotifyTimes()
	ntuo.mutation.SetMaxNotifyTimes(i)
	return ntuo
}

// AddMaxNotifyTimes adds i to the "max_notify_times" field.
func (ntuo *NotifyTaskUpdateOne) AddMaxNotifyTimes(i int8) *NotifyTaskUpdateOne {
	ntuo.mutation.AddMaxNotifyTimes(i)
	return ntuo
}

// SetNotifyURL sets the "notify_url" field.
func (ntuo *NotifyTaskUpdateOne) SetNotifyURL(s string) *NotifyTaskUpdateOne {
	ntuo.mutation.SetNotifyURL(s)
	return ntuo
}

// Mutation returns the NotifyTaskMutation object of the builder.
func (ntuo *NotifyTaskUpdateOne) Mutation() *NotifyTaskMutation {
	return ntuo.mutation
}

// Where appends a list predicates to the NotifyTaskUpdate builder.
func (ntuo *NotifyTaskUpdateOne) Where(ps ...predicate.NotifyTask) *NotifyTaskUpdateOne {
	ntuo.mutation.Where(ps...)
	return ntuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ntuo *NotifyTaskUpdateOne) Select(field string, fields ...string) *NotifyTaskUpdateOne {
	ntuo.fields = append([]string{field}, fields...)
	return ntuo
}

// Save executes the query and returns the updated NotifyTask entity.
func (ntuo *NotifyTaskUpdateOne) Save(ctx context.Context) (*NotifyTask, error) {
	if err := ntuo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, ntuo.sqlSave, ntuo.mutation, ntuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ntuo *NotifyTaskUpdateOne) SaveX(ctx context.Context) *NotifyTask {
	node, err := ntuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ntuo *NotifyTaskUpdateOne) Exec(ctx context.Context) error {
	_, err := ntuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ntuo *NotifyTaskUpdateOne) ExecX(ctx context.Context) {
	if err := ntuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ntuo *NotifyTaskUpdateOne) defaults() error {
	if _, ok := ntuo.mutation.UpdatedAt(); !ok {
		if notifytask.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized notifytask.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := notifytask.UpdateDefaultUpdatedAt()
		ntuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

func (ntuo *NotifyTaskUpdateOne) sqlSave(ctx context.Context) (_node *NotifyTask, err error) {
	_spec := sqlgraph.NewUpdateSpec(notifytask.Table, notifytask.Columns, sqlgraph.NewFieldSpec(notifytask.FieldID, field.TypeUint64))
	id, ok := ntuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "NotifyTask.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ntuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, notifytask.FieldID)
		for _, f := range fields {
			if !notifytask.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != notifytask.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ntuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ntuo.mutation.UpdatedAt(); ok {
		_spec.SetField(notifytask.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ntuo.mutation.Status(); ok {
		_spec.SetField(notifytask.FieldStatus, field.TypeUint8, value)
	}
	if value, ok := ntuo.mutation.AddedStatus(); ok {
		_spec.AddField(notifytask.FieldStatus, field.TypeUint8, value)
	}
	if ntuo.mutation.StatusCleared() {
		_spec.ClearField(notifytask.FieldStatus, field.TypeUint8)
	}
	if value, ok := ntuo.mutation.DeletedAt(); ok {
		_spec.SetField(notifytask.FieldDeletedAt, field.TypeTime, value)
	}
	if ntuo.mutation.DeletedAtCleared() {
		_spec.ClearField(notifytask.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := ntuo.mutation.AppID(); ok {
		_spec.SetField(notifytask.FieldAppID, field.TypeUint64, value)
	}
	if value, ok := ntuo.mutation.AddedAppID(); ok {
		_spec.AddField(notifytask.FieldAppID, field.TypeUint64, value)
	}
	if value, ok := ntuo.mutation.GetType(); ok {
		_spec.SetField(notifytask.FieldType, field.TypeInt, value)
	}
	if value, ok := ntuo.mutation.AddedType(); ok {
		_spec.AddField(notifytask.FieldType, field.TypeInt, value)
	}
	if value, ok := ntuo.mutation.DataID(); ok {
		_spec.SetField(notifytask.FieldDataID, field.TypeUint64, value)
	}
	if value, ok := ntuo.mutation.AddedDataID(); ok {
		_spec.AddField(notifytask.FieldDataID, field.TypeUint64, value)
	}
	if value, ok := ntuo.mutation.MerchantOrderID(); ok {
		_spec.SetField(notifytask.FieldMerchantOrderID, field.TypeString, value)
	}
	if value, ok := ntuo.mutation.NextNotifyTime(); ok {
		_spec.SetField(notifytask.FieldNextNotifyTime, field.TypeTime, value)
	}
	if value, ok := ntuo.mutation.LastExecuteTime(); ok {
		_spec.SetField(notifytask.FieldLastExecuteTime, field.TypeTime, value)
	}
	if value, ok := ntuo.mutation.NotifyTimes(); ok {
		_spec.SetField(notifytask.FieldNotifyTimes, field.TypeInt8, value)
	}
	if value, ok := ntuo.mutation.AddedNotifyTimes(); ok {
		_spec.AddField(notifytask.FieldNotifyTimes, field.TypeInt8, value)
	}
	if value, ok := ntuo.mutation.MaxNotifyTimes(); ok {
		_spec.SetField(notifytask.FieldMaxNotifyTimes, field.TypeInt8, value)
	}
	if value, ok := ntuo.mutation.AddedMaxNotifyTimes(); ok {
		_spec.AddField(notifytask.FieldMaxNotifyTimes, field.TypeInt8, value)
	}
	if value, ok := ntuo.mutation.NotifyURL(); ok {
		_spec.SetField(notifytask.FieldNotifyURL, field.TypeString, value)
	}
	_node = &NotifyTask{config: ntuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ntuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{notifytask.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ntuo.mutation.done = true
	return _node, nil
}

// Code generated by goctl. DO NOT EDIT.
// Source: pay.proto

package payclient

import (
	"context"

	"github.com/agui-coder/simple-admin-pay-rpc/pay"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	BaseIDResp              = pay.BaseIDResp
	BaseMsg                 = pay.BaseMsg
	BaseResp                = pay.BaseResp
	BaseUUIDResp            = pay.BaseUUIDResp
	DemoOrderInfo           = pay.DemoOrderInfo
	DemoOrderListResp       = pay.DemoOrderListResp
	DemoOrderPageReq        = pay.DemoOrderPageReq
	Empty                   = pay.Empty
	IDReq                   = pay.IDReq
	IDsReq                  = pay.IDsReq
	NoReq                   = pay.NoReq
	NotifyOrderReq          = pay.NotifyOrderReq
	NotifyRefundReq         = pay.NotifyRefundReq
	OrderCreateExtensionReq = pay.OrderCreateExtensionReq
	OrderCreateReq          = pay.OrderCreateReq
	OrderExtensionInfo      = pay.OrderExtensionInfo
	OrderInfo               = pay.OrderInfo
	OrderListResp           = pay.OrderListResp
	OrderPageReq            = pay.OrderPageReq
	OrderSubmitReq          = pay.OrderSubmitReq
	OrderSubmitResp         = pay.OrderSubmitResp
	PageInfoReq             = pay.PageInfoReq
	PayDemoOrderCreateReq   = pay.PayDemoOrderCreateReq
	RefundCountResp         = pay.RefundCountResp
	RefundCreateReq         = pay.RefundCreateReq
	RefundDemoOrderReq      = pay.RefundDemoOrderReq
	RefundInfo              = pay.RefundInfo
	RefundListReq           = pay.RefundListReq
	RefundListResp          = pay.RefundListResp
	RefundPageReq           = pay.RefundPageReq
	RefundPageResp          = pay.RefundPageResp
	StringList              = pay.StringList
	UUIDReq                 = pay.UUIDReq
	UUIDsReq                = pay.UUIDsReq
	UpdateDemoOrderPaidReq  = pay.UpdateDemoOrderPaidReq
	UpdateDemoRefundPaidReq = pay.UpdateDemoRefundPaidReq

	Pay interface {
		InitDatabase(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*BaseResp, error)
		// Demo management
		CreateDemoOrder(ctx context.Context, in *PayDemoOrderCreateReq, opts ...grpc.CallOption) (*BaseIDResp, error)
		GetDemoOrder(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*DemoOrderInfo, error)
		GetListDemoOrder(ctx context.Context, in *DemoOrderPageReq, opts ...grpc.CallOption) (*DemoOrderListResp, error)
		UpdateDemoOrderPaid(ctx context.Context, in *UpdateDemoOrderPaidReq, opts ...grpc.CallOption) (*BaseResp, error)
		RefundDemoOrder(ctx context.Context, in *RefundDemoOrderReq, opts ...grpc.CallOption) (*BaseResp, error)
		UpdateDemoRefundPaid(ctx context.Context, in *UpdateDemoRefundPaidReq, opts ...grpc.CallOption) (*BaseResp, error)
		// Order management
		CreateOrder(ctx context.Context, in *OrderCreateReq, opts ...grpc.CallOption) (*BaseIDResp, error)
		GetOrder(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*OrderInfo, error)
		GetOrderPage(ctx context.Context, in *OrderPageReq, opts ...grpc.CallOption) (*OrderListResp, error)
		CreateOrderExtension(ctx context.Context, in *OrderCreateExtensionReq, opts ...grpc.CallOption) (*BaseIDResp, error)
		GetOrderExtension(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*OrderExtensionInfo, error)
		NotifyOrder(ctx context.Context, in *NotifyOrderReq, opts ...grpc.CallOption) (*BaseResp, error)
		SubmitPayOrder(ctx context.Context, in *OrderSubmitReq, opts ...grpc.CallOption) (*OrderSubmitResp, error)
		// refund management
		CreateRefund(ctx context.Context, in *RefundCreateReq, opts ...grpc.CallOption) (*BaseIDResp, error)
		GetRefundPage(ctx context.Context, in *RefundPageReq, opts ...grpc.CallOption) (*RefundPageResp, error)
		GetRefundById(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*RefundInfo, error)
		NotifyRefund(ctx context.Context, in *NotifyRefundReq, opts ...grpc.CallOption) (*BaseResp, error)
	}

	defaultPay struct {
		cli zrpc.Client
	}
)

func NewPay(cli zrpc.Client) Pay {
	return &defaultPay{
		cli: cli,
	}
}

func (m *defaultPay) InitDatabase(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*BaseResp, error) {
	client := pay.NewPayClient(m.cli.Conn())
	return client.InitDatabase(ctx, in, opts...)
}

// Demo management
func (m *defaultPay) CreateDemoOrder(ctx context.Context, in *PayDemoOrderCreateReq, opts ...grpc.CallOption) (*BaseIDResp, error) {
	client := pay.NewPayClient(m.cli.Conn())
	return client.CreateDemoOrder(ctx, in, opts...)
}

func (m *defaultPay) GetDemoOrder(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*DemoOrderInfo, error) {
	client := pay.NewPayClient(m.cli.Conn())
	return client.GetDemoOrder(ctx, in, opts...)
}

func (m *defaultPay) GetListDemoOrder(ctx context.Context, in *DemoOrderPageReq, opts ...grpc.CallOption) (*DemoOrderListResp, error) {
	client := pay.NewPayClient(m.cli.Conn())
	return client.GetListDemoOrder(ctx, in, opts...)
}

func (m *defaultPay) UpdateDemoOrderPaid(ctx context.Context, in *UpdateDemoOrderPaidReq, opts ...grpc.CallOption) (*BaseResp, error) {
	client := pay.NewPayClient(m.cli.Conn())
	return client.UpdateDemoOrderPaid(ctx, in, opts...)
}

func (m *defaultPay) RefundDemoOrder(ctx context.Context, in *RefundDemoOrderReq, opts ...grpc.CallOption) (*BaseResp, error) {
	client := pay.NewPayClient(m.cli.Conn())
	return client.RefundDemoOrder(ctx, in, opts...)
}

func (m *defaultPay) UpdateDemoRefundPaid(ctx context.Context, in *UpdateDemoRefundPaidReq, opts ...grpc.CallOption) (*BaseResp, error) {
	client := pay.NewPayClient(m.cli.Conn())
	return client.UpdateDemoRefundPaid(ctx, in, opts...)
}

// Order management
func (m *defaultPay) CreateOrder(ctx context.Context, in *OrderCreateReq, opts ...grpc.CallOption) (*BaseIDResp, error) {
	client := pay.NewPayClient(m.cli.Conn())
	return client.CreateOrder(ctx, in, opts...)
}

func (m *defaultPay) GetOrder(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*OrderInfo, error) {
	client := pay.NewPayClient(m.cli.Conn())
	return client.GetOrder(ctx, in, opts...)
}

func (m *defaultPay) GetOrderPage(ctx context.Context, in *OrderPageReq, opts ...grpc.CallOption) (*OrderListResp, error) {
	client := pay.NewPayClient(m.cli.Conn())
	return client.GetOrderPage(ctx, in, opts...)
}

func (m *defaultPay) CreateOrderExtension(ctx context.Context, in *OrderCreateExtensionReq, opts ...grpc.CallOption) (*BaseIDResp, error) {
	client := pay.NewPayClient(m.cli.Conn())
	return client.CreateOrderExtension(ctx, in, opts...)
}

func (m *defaultPay) GetOrderExtension(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*OrderExtensionInfo, error) {
	client := pay.NewPayClient(m.cli.Conn())
	return client.GetOrderExtension(ctx, in, opts...)
}

func (m *defaultPay) NotifyOrder(ctx context.Context, in *NotifyOrderReq, opts ...grpc.CallOption) (*BaseResp, error) {
	client := pay.NewPayClient(m.cli.Conn())
	return client.NotifyOrder(ctx, in, opts...)
}

func (m *defaultPay) SubmitPayOrder(ctx context.Context, in *OrderSubmitReq, opts ...grpc.CallOption) (*OrderSubmitResp, error) {
	client := pay.NewPayClient(m.cli.Conn())
	return client.SubmitPayOrder(ctx, in, opts...)
}

// refund management
func (m *defaultPay) CreateRefund(ctx context.Context, in *RefundCreateReq, opts ...grpc.CallOption) (*BaseIDResp, error) {
	client := pay.NewPayClient(m.cli.Conn())
	return client.CreateRefund(ctx, in, opts...)
}

func (m *defaultPay) GetRefundPage(ctx context.Context, in *RefundPageReq, opts ...grpc.CallOption) (*RefundPageResp, error) {
	client := pay.NewPayClient(m.cli.Conn())
	return client.GetRefundPage(ctx, in, opts...)
}

func (m *defaultPay) GetRefundById(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*RefundInfo, error) {
	client := pay.NewPayClient(m.cli.Conn())
	return client.GetRefundById(ctx, in, opts...)
}

func (m *defaultPay) NotifyRefund(ctx context.Context, in *NotifyRefundReq, opts ...grpc.CallOption) (*BaseResp, error) {
	client := pay.NewPayClient(m.cli.Conn())
	return client.NotifyRefund(ctx, in, opts...)
}

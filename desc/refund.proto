syntax = "proto3";

// refund message
message RefundInfo {
  optional uint64 id = 1;
  optional int64 created_at = 2;
  optional int64 updated_at = 3;
  optional uint32 status = 4;
  optional string no = 5;
  optional string channel_code = 6;
  optional uint64 order_id = 7;
  optional string order_no = 8;
  optional string merchant_order_id = 9;
  optional string merchant_refund_id = 10;
  optional int32 pay_price = 11;
  optional int32 refund_price = 12;
  optional string reason = 13;
  optional string user_ip = 14;
  optional string channel_order_no = 15;
  optional string channel_refund_no = 16;
  optional int64  success_time = 17;
  optional string channel_error_code = 18;
  optional string channel_error_msg = 19;
  optional string channel_notify_data = 20;
}

message RefundCreateReq {
  string user_ip = 2;
  string merchant_order_id = 3;
  string merchant_refund_id = 4;
  string reason = 5;
  int32 price = 6;
}

message RefundPageResp {
  uint64 total = 1;
  repeated RefundInfo data = 2;
}

message RefundPageReq {
  uint64 page = 1;
  uint64 page_size = 2;
  optional string channelCode = 4;
  optional string merchantOrderId = 5;
  optional string merchantRefundId = 6;
  optional string channelOrderNo = 7;
  optional string channelRefundNo = 8;
  optional uint32 status = 9;
  repeated int64 createTime = 10;
}

message RefundCountResp {
  uint64 count = 1;
}

message NotifyRefundReq {
  string channelCode = 1;
  bytes r = 2;
}

service Pay {

  // refund management
  // group: refund
  rpc createRefund (RefundCreateReq) returns (BaseIDResp);
  // group: refund
  rpc getRefundPage (RefundPageReq) returns (RefundPageResp);
  // group: refund
  rpc getRefundById (IDReq) returns (RefundInfo);
  // group: refund
  rpc notifyRefund (NotifyRefundReq) returns (BaseResp);
}
syntax = "proto3";

// Channel message

message ChannelInfo {
  optional uint64 id = 1;
  optional int64 created_at = 2;
  optional int64 updated_at = 3;
  optional uint32 status = 4;
  optional string code = 5;
  optional string remark = 6;
  optional double fee_rate = 7;
  optional uint64 app_id = 8;
  optional string config = 9;
}

message ChannelCreateReq {
  string code = 1;
  string config =2;
  uint32 status = 3;
  optional string remark =4;
  double feeRate = 5;
  uint64 appId = 6;
}

message ChannelUpdateReq {
  string code = 1;
  string config =2;
  uint32 status = 3;
  optional string remark =4;
  double feeRate = 5;
  uint64 appId = 6;
  uint64 id = 7;
}

message ChannelListResp {
  uint64 total = 1;
  repeated ChannelInfo data = 2;
}

message ChannelListReq {
  uint64 page = 1;
  uint64 page_size = 2;
  optional string code = 3;
  optional string remark = 4;
  optional string config = 5;
}

message ByAppIdAndCodeReq{
  uint64 appId = 1;
  string code =2;
}

message ValidateChannelReq{
  uint64 appId = 1;
  string code =2;
}


service Pay {

  // Channel management
  // group: channel
  rpc createChannel (ChannelCreateReq) returns (BaseIDResp);
  // group: channel
  rpc updateChannel (ChannelUpdateReq) returns (BaseResp);
  // group: channel
  rpc deleteChannel (IDReq) returns (BaseResp);
  // group: channel
  rpc getChannelById (IDReq) returns (ChannelInfo);
  // group: channel
  rpc getChannelListByAppIds (IDsReq) returns (ChannelListResp);
  // group: channel
  rpc getChannelListByAppIdAndCode (ByAppIdAndCodeReq) returns (ChannelInfo);
  // group: channel
  rpc getEnableChannelList (IDReq) returns (ChannelListResp);
  // group: channel
  rpc validateChannelCanSubmit(ValidateChannelReq) returns(ChannelInfo);
}
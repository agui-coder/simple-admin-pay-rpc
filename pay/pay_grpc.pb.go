// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: pay.proto

package pay

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Pay_InitDatabase_FullMethodName         = "/pay.Pay/initDatabase"
	Pay_CreateDemoOrder_FullMethodName      = "/pay.Pay/createDemoOrder"
	Pay_GetDemoOrder_FullMethodName         = "/pay.Pay/getDemoOrder"
	Pay_GetListDemoOrder_FullMethodName     = "/pay.Pay/getListDemoOrder"
	Pay_UpdateDemoOrderPaid_FullMethodName  = "/pay.Pay/updateDemoOrderPaid"
	Pay_RefundDemoOrder_FullMethodName      = "/pay.Pay/refundDemoOrder"
	Pay_UpdateDemoRefundPaid_FullMethodName = "/pay.Pay/updateDemoRefundPaid"
	Pay_CreateOrder_FullMethodName          = "/pay.Pay/createOrder"
	Pay_GetOrder_FullMethodName             = "/pay.Pay/getOrder"
	Pay_GetOrderPage_FullMethodName         = "/pay.Pay/getOrderPage"
	Pay_CreateOrderExtension_FullMethodName = "/pay.Pay/createOrderExtension"
	Pay_GetOrderExtension_FullMethodName    = "/pay.Pay/getOrderExtension"
	Pay_NotifyOrder_FullMethodName          = "/pay.Pay/notifyOrder"
	Pay_SubmitPayOrder_FullMethodName       = "/pay.Pay/submitPayOrder"
	Pay_CreateRefund_FullMethodName         = "/pay.Pay/createRefund"
	Pay_GetRefundPage_FullMethodName        = "/pay.Pay/getRefundPage"
	Pay_GetRefundById_FullMethodName        = "/pay.Pay/getRefundById"
	Pay_NotifyRefund_FullMethodName         = "/pay.Pay/notifyRefund"
)

// PayClient is the client API for Pay service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PayClient interface {
	// group: base
	InitDatabase(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*BaseResp, error)
	// Demo management
	// group: demo
	CreateDemoOrder(ctx context.Context, in *PayDemoOrderCreateReq, opts ...grpc.CallOption) (*BaseIDResp, error)
	// group: demo
	GetDemoOrder(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*DemoOrderInfo, error)
	// group: demo
	GetListDemoOrder(ctx context.Context, in *DemoOrderPageReq, opts ...grpc.CallOption) (*DemoOrderListResp, error)
	// group: demo
	UpdateDemoOrderPaid(ctx context.Context, in *UpdateDemoOrderPaidReq, opts ...grpc.CallOption) (*BaseResp, error)
	// group: demo
	RefundDemoOrder(ctx context.Context, in *RefundDemoOrderReq, opts ...grpc.CallOption) (*BaseResp, error)
	// group: demo
	UpdateDemoRefundPaid(ctx context.Context, in *UpdateDemoRefundPaidReq, opts ...grpc.CallOption) (*BaseResp, error)
	// Order management
	// group: order
	CreateOrder(ctx context.Context, in *OrderCreateReq, opts ...grpc.CallOption) (*BaseIDResp, error)
	// group: order
	GetOrder(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*OrderInfo, error)
	// group: order
	GetOrderPage(ctx context.Context, in *OrderPageReq, opts ...grpc.CallOption) (*OrderListResp, error)
	// group: order
	CreateOrderExtension(ctx context.Context, in *OrderCreateExtensionReq, opts ...grpc.CallOption) (*BaseIDResp, error)
	// group: order
	GetOrderExtension(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*OrderExtensionInfo, error)
	// group: order
	NotifyOrder(ctx context.Context, in *NotifyOrderReq, opts ...grpc.CallOption) (*BaseResp, error)
	// group: order
	SubmitPayOrder(ctx context.Context, in *OrderSubmitReq, opts ...grpc.CallOption) (*OrderSubmitResp, error)
	// refund management
	// group: refund
	CreateRefund(ctx context.Context, in *RefundCreateReq, opts ...grpc.CallOption) (*BaseIDResp, error)
	// group: refund
	GetRefundPage(ctx context.Context, in *RefundPageReq, opts ...grpc.CallOption) (*RefundPageResp, error)
	// group: refund
	GetRefundById(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*RefundInfo, error)
	// group: refund
	NotifyRefund(ctx context.Context, in *NotifyRefundReq, opts ...grpc.CallOption) (*BaseResp, error)
}

type payClient struct {
	cc grpc.ClientConnInterface
}

func NewPayClient(cc grpc.ClientConnInterface) PayClient {
	return &payClient{cc}
}

func (c *payClient) InitDatabase(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*BaseResp, error) {
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, Pay_InitDatabase_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payClient) CreateDemoOrder(ctx context.Context, in *PayDemoOrderCreateReq, opts ...grpc.CallOption) (*BaseIDResp, error) {
	out := new(BaseIDResp)
	err := c.cc.Invoke(ctx, Pay_CreateDemoOrder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payClient) GetDemoOrder(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*DemoOrderInfo, error) {
	out := new(DemoOrderInfo)
	err := c.cc.Invoke(ctx, Pay_GetDemoOrder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payClient) GetListDemoOrder(ctx context.Context, in *DemoOrderPageReq, opts ...grpc.CallOption) (*DemoOrderListResp, error) {
	out := new(DemoOrderListResp)
	err := c.cc.Invoke(ctx, Pay_GetListDemoOrder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payClient) UpdateDemoOrderPaid(ctx context.Context, in *UpdateDemoOrderPaidReq, opts ...grpc.CallOption) (*BaseResp, error) {
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, Pay_UpdateDemoOrderPaid_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payClient) RefundDemoOrder(ctx context.Context, in *RefundDemoOrderReq, opts ...grpc.CallOption) (*BaseResp, error) {
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, Pay_RefundDemoOrder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payClient) UpdateDemoRefundPaid(ctx context.Context, in *UpdateDemoRefundPaidReq, opts ...grpc.CallOption) (*BaseResp, error) {
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, Pay_UpdateDemoRefundPaid_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payClient) CreateOrder(ctx context.Context, in *OrderCreateReq, opts ...grpc.CallOption) (*BaseIDResp, error) {
	out := new(BaseIDResp)
	err := c.cc.Invoke(ctx, Pay_CreateOrder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payClient) GetOrder(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*OrderInfo, error) {
	out := new(OrderInfo)
	err := c.cc.Invoke(ctx, Pay_GetOrder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payClient) GetOrderPage(ctx context.Context, in *OrderPageReq, opts ...grpc.CallOption) (*OrderListResp, error) {
	out := new(OrderListResp)
	err := c.cc.Invoke(ctx, Pay_GetOrderPage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payClient) CreateOrderExtension(ctx context.Context, in *OrderCreateExtensionReq, opts ...grpc.CallOption) (*BaseIDResp, error) {
	out := new(BaseIDResp)
	err := c.cc.Invoke(ctx, Pay_CreateOrderExtension_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payClient) GetOrderExtension(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*OrderExtensionInfo, error) {
	out := new(OrderExtensionInfo)
	err := c.cc.Invoke(ctx, Pay_GetOrderExtension_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payClient) NotifyOrder(ctx context.Context, in *NotifyOrderReq, opts ...grpc.CallOption) (*BaseResp, error) {
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, Pay_NotifyOrder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payClient) SubmitPayOrder(ctx context.Context, in *OrderSubmitReq, opts ...grpc.CallOption) (*OrderSubmitResp, error) {
	out := new(OrderSubmitResp)
	err := c.cc.Invoke(ctx, Pay_SubmitPayOrder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payClient) CreateRefund(ctx context.Context, in *RefundCreateReq, opts ...grpc.CallOption) (*BaseIDResp, error) {
	out := new(BaseIDResp)
	err := c.cc.Invoke(ctx, Pay_CreateRefund_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payClient) GetRefundPage(ctx context.Context, in *RefundPageReq, opts ...grpc.CallOption) (*RefundPageResp, error) {
	out := new(RefundPageResp)
	err := c.cc.Invoke(ctx, Pay_GetRefundPage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payClient) GetRefundById(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*RefundInfo, error) {
	out := new(RefundInfo)
	err := c.cc.Invoke(ctx, Pay_GetRefundById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payClient) NotifyRefund(ctx context.Context, in *NotifyRefundReq, opts ...grpc.CallOption) (*BaseResp, error) {
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, Pay_NotifyRefund_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PayServer is the server API for Pay service.
// All implementations must embed UnimplementedPayServer
// for forward compatibility
type PayServer interface {
	// group: base
	InitDatabase(context.Context, *Empty) (*BaseResp, error)
	// Demo management
	// group: demo
	CreateDemoOrder(context.Context, *PayDemoOrderCreateReq) (*BaseIDResp, error)
	// group: demo
	GetDemoOrder(context.Context, *IDReq) (*DemoOrderInfo, error)
	// group: demo
	GetListDemoOrder(context.Context, *DemoOrderPageReq) (*DemoOrderListResp, error)
	// group: demo
	UpdateDemoOrderPaid(context.Context, *UpdateDemoOrderPaidReq) (*BaseResp, error)
	// group: demo
	RefundDemoOrder(context.Context, *RefundDemoOrderReq) (*BaseResp, error)
	// group: demo
	UpdateDemoRefundPaid(context.Context, *UpdateDemoRefundPaidReq) (*BaseResp, error)
	// Order management
	// group: order
	CreateOrder(context.Context, *OrderCreateReq) (*BaseIDResp, error)
	// group: order
	GetOrder(context.Context, *IDReq) (*OrderInfo, error)
	// group: order
	GetOrderPage(context.Context, *OrderPageReq) (*OrderListResp, error)
	// group: order
	CreateOrderExtension(context.Context, *OrderCreateExtensionReq) (*BaseIDResp, error)
	// group: order
	GetOrderExtension(context.Context, *IDReq) (*OrderExtensionInfo, error)
	// group: order
	NotifyOrder(context.Context, *NotifyOrderReq) (*BaseResp, error)
	// group: order
	SubmitPayOrder(context.Context, *OrderSubmitReq) (*OrderSubmitResp, error)
	// refund management
	// group: refund
	CreateRefund(context.Context, *RefundCreateReq) (*BaseIDResp, error)
	// group: refund
	GetRefundPage(context.Context, *RefundPageReq) (*RefundPageResp, error)
	// group: refund
	GetRefundById(context.Context, *IDReq) (*RefundInfo, error)
	// group: refund
	NotifyRefund(context.Context, *NotifyRefundReq) (*BaseResp, error)
	mustEmbedUnimplementedPayServer()
}

// UnimplementedPayServer must be embedded to have forward compatible implementations.
type UnimplementedPayServer struct {
}

func (UnimplementedPayServer) InitDatabase(context.Context, *Empty) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitDatabase not implemented")
}
func (UnimplementedPayServer) CreateDemoOrder(context.Context, *PayDemoOrderCreateReq) (*BaseIDResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDemoOrder not implemented")
}
func (UnimplementedPayServer) GetDemoOrder(context.Context, *IDReq) (*DemoOrderInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDemoOrder not implemented")
}
func (UnimplementedPayServer) GetListDemoOrder(context.Context, *DemoOrderPageReq) (*DemoOrderListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListDemoOrder not implemented")
}
func (UnimplementedPayServer) UpdateDemoOrderPaid(context.Context, *UpdateDemoOrderPaidReq) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDemoOrderPaid not implemented")
}
func (UnimplementedPayServer) RefundDemoOrder(context.Context, *RefundDemoOrderReq) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefundDemoOrder not implemented")
}
func (UnimplementedPayServer) UpdateDemoRefundPaid(context.Context, *UpdateDemoRefundPaidReq) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDemoRefundPaid not implemented")
}
func (UnimplementedPayServer) CreateOrder(context.Context, *OrderCreateReq) (*BaseIDResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrder not implemented")
}
func (UnimplementedPayServer) GetOrder(context.Context, *IDReq) (*OrderInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrder not implemented")
}
func (UnimplementedPayServer) GetOrderPage(context.Context, *OrderPageReq) (*OrderListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrderPage not implemented")
}
func (UnimplementedPayServer) CreateOrderExtension(context.Context, *OrderCreateExtensionReq) (*BaseIDResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrderExtension not implemented")
}
func (UnimplementedPayServer) GetOrderExtension(context.Context, *IDReq) (*OrderExtensionInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrderExtension not implemented")
}
func (UnimplementedPayServer) NotifyOrder(context.Context, *NotifyOrderReq) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyOrder not implemented")
}
func (UnimplementedPayServer) SubmitPayOrder(context.Context, *OrderSubmitReq) (*OrderSubmitResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitPayOrder not implemented")
}
func (UnimplementedPayServer) CreateRefund(context.Context, *RefundCreateReq) (*BaseIDResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRefund not implemented")
}
func (UnimplementedPayServer) GetRefundPage(context.Context, *RefundPageReq) (*RefundPageResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRefundPage not implemented")
}
func (UnimplementedPayServer) GetRefundById(context.Context, *IDReq) (*RefundInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRefundById not implemented")
}
func (UnimplementedPayServer) NotifyRefund(context.Context, *NotifyRefundReq) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyRefund not implemented")
}
func (UnimplementedPayServer) mustEmbedUnimplementedPayServer() {}

// UnsafePayServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PayServer will
// result in compilation errors.
type UnsafePayServer interface {
	mustEmbedUnimplementedPayServer()
}

func RegisterPayServer(s grpc.ServiceRegistrar, srv PayServer) {
	s.RegisterService(&Pay_ServiceDesc, srv)
}

func _Pay_InitDatabase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayServer).InitDatabase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pay_InitDatabase_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayServer).InitDatabase(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pay_CreateDemoOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PayDemoOrderCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayServer).CreateDemoOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pay_CreateDemoOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayServer).CreateDemoOrder(ctx, req.(*PayDemoOrderCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pay_GetDemoOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayServer).GetDemoOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pay_GetDemoOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayServer).GetDemoOrder(ctx, req.(*IDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pay_GetListDemoOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DemoOrderPageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayServer).GetListDemoOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pay_GetListDemoOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayServer).GetListDemoOrder(ctx, req.(*DemoOrderPageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pay_UpdateDemoOrderPaid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDemoOrderPaidReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayServer).UpdateDemoOrderPaid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pay_UpdateDemoOrderPaid_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayServer).UpdateDemoOrderPaid(ctx, req.(*UpdateDemoOrderPaidReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pay_RefundDemoOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefundDemoOrderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayServer).RefundDemoOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pay_RefundDemoOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayServer).RefundDemoOrder(ctx, req.(*RefundDemoOrderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pay_UpdateDemoRefundPaid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDemoRefundPaidReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayServer).UpdateDemoRefundPaid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pay_UpdateDemoRefundPaid_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayServer).UpdateDemoRefundPaid(ctx, req.(*UpdateDemoRefundPaidReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pay_CreateOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayServer).CreateOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pay_CreateOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayServer).CreateOrder(ctx, req.(*OrderCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pay_GetOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayServer).GetOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pay_GetOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayServer).GetOrder(ctx, req.(*IDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pay_GetOrderPage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderPageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayServer).GetOrderPage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pay_GetOrderPage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayServer).GetOrderPage(ctx, req.(*OrderPageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pay_CreateOrderExtension_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderCreateExtensionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayServer).CreateOrderExtension(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pay_CreateOrderExtension_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayServer).CreateOrderExtension(ctx, req.(*OrderCreateExtensionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pay_GetOrderExtension_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayServer).GetOrderExtension(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pay_GetOrderExtension_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayServer).GetOrderExtension(ctx, req.(*IDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pay_NotifyOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotifyOrderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayServer).NotifyOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pay_NotifyOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayServer).NotifyOrder(ctx, req.(*NotifyOrderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pay_SubmitPayOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderSubmitReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayServer).SubmitPayOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pay_SubmitPayOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayServer).SubmitPayOrder(ctx, req.(*OrderSubmitReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pay_CreateRefund_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefundCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayServer).CreateRefund(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pay_CreateRefund_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayServer).CreateRefund(ctx, req.(*RefundCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pay_GetRefundPage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefundPageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayServer).GetRefundPage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pay_GetRefundPage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayServer).GetRefundPage(ctx, req.(*RefundPageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pay_GetRefundById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayServer).GetRefundById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pay_GetRefundById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayServer).GetRefundById(ctx, req.(*IDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pay_NotifyRefund_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotifyRefundReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayServer).NotifyRefund(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pay_NotifyRefund_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayServer).NotifyRefund(ctx, req.(*NotifyRefundReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Pay_ServiceDesc is the grpc.ServiceDesc for Pay service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Pay_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pay.Pay",
	HandlerType: (*PayServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "initDatabase",
			Handler:    _Pay_InitDatabase_Handler,
		},
		{
			MethodName: "createDemoOrder",
			Handler:    _Pay_CreateDemoOrder_Handler,
		},
		{
			MethodName: "getDemoOrder",
			Handler:    _Pay_GetDemoOrder_Handler,
		},
		{
			MethodName: "getListDemoOrder",
			Handler:    _Pay_GetListDemoOrder_Handler,
		},
		{
			MethodName: "updateDemoOrderPaid",
			Handler:    _Pay_UpdateDemoOrderPaid_Handler,
		},
		{
			MethodName: "refundDemoOrder",
			Handler:    _Pay_RefundDemoOrder_Handler,
		},
		{
			MethodName: "updateDemoRefundPaid",
			Handler:    _Pay_UpdateDemoRefundPaid_Handler,
		},
		{
			MethodName: "createOrder",
			Handler:    _Pay_CreateOrder_Handler,
		},
		{
			MethodName: "getOrder",
			Handler:    _Pay_GetOrder_Handler,
		},
		{
			MethodName: "getOrderPage",
			Handler:    _Pay_GetOrderPage_Handler,
		},
		{
			MethodName: "createOrderExtension",
			Handler:    _Pay_CreateOrderExtension_Handler,
		},
		{
			MethodName: "getOrderExtension",
			Handler:    _Pay_GetOrderExtension_Handler,
		},
		{
			MethodName: "notifyOrder",
			Handler:    _Pay_NotifyOrder_Handler,
		},
		{
			MethodName: "submitPayOrder",
			Handler:    _Pay_SubmitPayOrder_Handler,
		},
		{
			MethodName: "createRefund",
			Handler:    _Pay_CreateRefund_Handler,
		},
		{
			MethodName: "getRefundPage",
			Handler:    _Pay_GetRefundPage_Handler,
		},
		{
			MethodName: "getRefundById",
			Handler:    _Pay_GetRefundById_Handler,
		},
		{
			MethodName: "notifyRefund",
			Handler:    _Pay_NotifyRefund_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pay.proto",
}

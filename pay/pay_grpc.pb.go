// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: pay.proto

package pay

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Pay_CreateApp_FullMethodName                    = "/pay.Pay/createApp"
	Pay_UpdateApp_FullMethodName                    = "/pay.Pay/updateApp"
	Pay_UpdateAppStatus_FullMethodName              = "/pay.Pay/updateAppStatus"
	Pay_DeleteApp_FullMethodName                    = "/pay.Pay/deleteApp"
	Pay_GetApp_FullMethodName                       = "/pay.Pay/getApp"
	Pay_GetAppList_FullMethodName                   = "/pay.Pay/getAppList"
	Pay_GetAppPage_FullMethodName                   = "/pay.Pay/getAppPage"
	Pay_InitDatabase_FullMethodName                 = "/pay.Pay/initDatabase"
	Pay_CreateChannel_FullMethodName                = "/pay.Pay/createChannel"
	Pay_UpdateChannel_FullMethodName                = "/pay.Pay/updateChannel"
	Pay_DeleteChannel_FullMethodName                = "/pay.Pay/deleteChannel"
	Pay_GetChannelById_FullMethodName               = "/pay.Pay/getChannelById"
	Pay_GetChannelListByAppIds_FullMethodName       = "/pay.Pay/getChannelListByAppIds"
	Pay_GetChannelListByAppIdAndCode_FullMethodName = "/pay.Pay/getChannelListByAppIdAndCode"
	Pay_GetEnableChannelList_FullMethodName         = "/pay.Pay/getEnableChannelList"
	Pay_ValidateChannelCanSubmit_FullMethodName     = "/pay.Pay/validateChannelCanSubmit"
	Pay_CreateDemoOrder_FullMethodName              = "/pay.Pay/createDemoOrder"
	Pay_GetDemoOrder_FullMethodName                 = "/pay.Pay/getDemoOrder"
	Pay_GetListDemoOrder_FullMethodName             = "/pay.Pay/getListDemoOrder"
	Pay_UpdateDemoOrderPaid_FullMethodName          = "/pay.Pay/updateDemoOrderPaid"
	Pay_RefundDemoOrder_FullMethodName              = "/pay.Pay/refundDemoOrder"
	Pay_UpdateDemoRefundPaid_FullMethodName         = "/pay.Pay/updateDemoRefundPaid"
	Pay_CreateOrder_FullMethodName                  = "/pay.Pay/createOrder"
	Pay_GetOrder_FullMethodName                     = "/pay.Pay/getOrder"
	Pay_GetOrderPage_FullMethodName                 = "/pay.Pay/getOrderPage"
	Pay_CreateOrderExtension_FullMethodName         = "/pay.Pay/createOrderExtension"
	Pay_GetOrderExtension_FullMethodName            = "/pay.Pay/getOrderExtension"
	Pay_NotifyOrder_FullMethodName                  = "/pay.Pay/notifyOrder"
	Pay_ValidateOrderCanSubmit_FullMethodName       = "/pay.Pay/validateOrderCanSubmit"
	Pay_CreateRefund_FullMethodName                 = "/pay.Pay/createRefund"
	Pay_GetRefundPage_FullMethodName                = "/pay.Pay/getRefundPage"
	Pay_GetRefundById_FullMethodName                = "/pay.Pay/getRefundById"
	Pay_NotifyRefund_FullMethodName                 = "/pay.Pay/notifyRefund"
)

// PayClient is the client API for Pay service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PayClient interface {
	// App management
	// group: app
	CreateApp(ctx context.Context, in *AppCreateReq, opts ...grpc.CallOption) (*BaseIDResp, error)
	// group: app
	UpdateApp(ctx context.Context, in *AppUpdateReq, opts ...grpc.CallOption) (*BaseResp, error)
	// group: app
	UpdateAppStatus(ctx context.Context, in *AppUpdateStatusReq, opts ...grpc.CallOption) (*BaseResp, error)
	// group: app
	DeleteApp(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*BaseResp, error)
	// group: app
	GetApp(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*AppInfo, error)
	// group: app
	GetAppList(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*AppListResp, error)
	// group: app
	GetAppPage(ctx context.Context, in *AppPageReq, opts ...grpc.CallOption) (*AppListResp, error)
	// group: base
	InitDatabase(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*BaseResp, error)
	// Channel management
	// group: channel
	CreateChannel(ctx context.Context, in *ChannelCreateReq, opts ...grpc.CallOption) (*BaseIDResp, error)
	// group: channel
	UpdateChannel(ctx context.Context, in *ChannelUpdateReq, opts ...grpc.CallOption) (*BaseResp, error)
	// group: channel
	DeleteChannel(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*BaseResp, error)
	// group: channel
	GetChannelById(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*ChannelInfo, error)
	// group: channel
	GetChannelListByAppIds(ctx context.Context, in *IDsReq, opts ...grpc.CallOption) (*ChannelListResp, error)
	// group: channel
	GetChannelListByAppIdAndCode(ctx context.Context, in *ByAppIdAndCodeReq, opts ...grpc.CallOption) (*ChannelInfo, error)
	// group: channel
	GetEnableChannelList(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*ChannelListResp, error)
	// group: channel
	ValidateChannelCanSubmit(ctx context.Context, in *ValidateChannelReq, opts ...grpc.CallOption) (*ChannelInfo, error)
	// Demo management
	// group: demo
	CreateDemoOrder(ctx context.Context, in *PayDemoOrderCreateReq, opts ...grpc.CallOption) (*BaseIDResp, error)
	// group: demo
	GetDemoOrder(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*DemoOrderInfo, error)
	// group: demo
	GetListDemoOrder(ctx context.Context, in *DemoOrderPageReq, opts ...grpc.CallOption) (*DemoOrderListResp, error)
	// group: demo
	UpdateDemoOrderPaid(ctx context.Context, in *UpdateDemoOrderPaidReq, opts ...grpc.CallOption) (*BaseResp, error)
	// group: demo
	RefundDemoOrder(ctx context.Context, in *RefundDemoOrderReq, opts ...grpc.CallOption) (*BaseResp, error)
	// group: demo
	UpdateDemoRefundPaid(ctx context.Context, in *UpdateDemoRefundPaidReq, opts ...grpc.CallOption) (*BaseResp, error)
	// Order management
	// group: order
	CreateOrder(ctx context.Context, in *OrderCreateReq, opts ...grpc.CallOption) (*BaseIDResp, error)
	// group: order
	GetOrder(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*OrderInfo, error)
	// group: order
	GetOrderPage(ctx context.Context, in *OrderPageReq, opts ...grpc.CallOption) (*OrderListResp, error)
	// group: order
	CreateOrderExtension(ctx context.Context, in *OrderCreateExtensionReq, opts ...grpc.CallOption) (*BaseIDResp, error)
	// group: order
	GetOrderExtension(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*OrderExtensionInfo, error)
	// group: order
	NotifyOrder(ctx context.Context, in *NotifyOrderReq, opts ...grpc.CallOption) (*BaseResp, error)
	// group: order
	ValidateOrderCanSubmit(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*OrderInfo, error)
	// refund management
	// group: refund
	CreateRefund(ctx context.Context, in *RefundCreateReq, opts ...grpc.CallOption) (*BaseIDResp, error)
	// group: refund
	GetRefundPage(ctx context.Context, in *RefundPageReq, opts ...grpc.CallOption) (*RefundPageResp, error)
	// group: refund
	GetRefundById(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*RefundInfo, error)
	// group: refund
	NotifyRefund(ctx context.Context, in *NotifyRefundReq, opts ...grpc.CallOption) (*BaseResp, error)
}

type payClient struct {
	cc grpc.ClientConnInterface
}

func NewPayClient(cc grpc.ClientConnInterface) PayClient {
	return &payClient{cc}
}

func (c *payClient) CreateApp(ctx context.Context, in *AppCreateReq, opts ...grpc.CallOption) (*BaseIDResp, error) {
	out := new(BaseIDResp)
	err := c.cc.Invoke(ctx, Pay_CreateApp_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payClient) UpdateApp(ctx context.Context, in *AppUpdateReq, opts ...grpc.CallOption) (*BaseResp, error) {
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, Pay_UpdateApp_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payClient) UpdateAppStatus(ctx context.Context, in *AppUpdateStatusReq, opts ...grpc.CallOption) (*BaseResp, error) {
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, Pay_UpdateAppStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payClient) DeleteApp(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*BaseResp, error) {
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, Pay_DeleteApp_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payClient) GetApp(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*AppInfo, error) {
	out := new(AppInfo)
	err := c.cc.Invoke(ctx, Pay_GetApp_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payClient) GetAppList(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*AppListResp, error) {
	out := new(AppListResp)
	err := c.cc.Invoke(ctx, Pay_GetAppList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payClient) GetAppPage(ctx context.Context, in *AppPageReq, opts ...grpc.CallOption) (*AppListResp, error) {
	out := new(AppListResp)
	err := c.cc.Invoke(ctx, Pay_GetAppPage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payClient) InitDatabase(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*BaseResp, error) {
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, Pay_InitDatabase_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payClient) CreateChannel(ctx context.Context, in *ChannelCreateReq, opts ...grpc.CallOption) (*BaseIDResp, error) {
	out := new(BaseIDResp)
	err := c.cc.Invoke(ctx, Pay_CreateChannel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payClient) UpdateChannel(ctx context.Context, in *ChannelUpdateReq, opts ...grpc.CallOption) (*BaseResp, error) {
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, Pay_UpdateChannel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payClient) DeleteChannel(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*BaseResp, error) {
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, Pay_DeleteChannel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payClient) GetChannelById(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*ChannelInfo, error) {
	out := new(ChannelInfo)
	err := c.cc.Invoke(ctx, Pay_GetChannelById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payClient) GetChannelListByAppIds(ctx context.Context, in *IDsReq, opts ...grpc.CallOption) (*ChannelListResp, error) {
	out := new(ChannelListResp)
	err := c.cc.Invoke(ctx, Pay_GetChannelListByAppIds_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payClient) GetChannelListByAppIdAndCode(ctx context.Context, in *ByAppIdAndCodeReq, opts ...grpc.CallOption) (*ChannelInfo, error) {
	out := new(ChannelInfo)
	err := c.cc.Invoke(ctx, Pay_GetChannelListByAppIdAndCode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payClient) GetEnableChannelList(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*ChannelListResp, error) {
	out := new(ChannelListResp)
	err := c.cc.Invoke(ctx, Pay_GetEnableChannelList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payClient) ValidateChannelCanSubmit(ctx context.Context, in *ValidateChannelReq, opts ...grpc.CallOption) (*ChannelInfo, error) {
	out := new(ChannelInfo)
	err := c.cc.Invoke(ctx, Pay_ValidateChannelCanSubmit_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payClient) CreateDemoOrder(ctx context.Context, in *PayDemoOrderCreateReq, opts ...grpc.CallOption) (*BaseIDResp, error) {
	out := new(BaseIDResp)
	err := c.cc.Invoke(ctx, Pay_CreateDemoOrder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payClient) GetDemoOrder(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*DemoOrderInfo, error) {
	out := new(DemoOrderInfo)
	err := c.cc.Invoke(ctx, Pay_GetDemoOrder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payClient) GetListDemoOrder(ctx context.Context, in *DemoOrderPageReq, opts ...grpc.CallOption) (*DemoOrderListResp, error) {
	out := new(DemoOrderListResp)
	err := c.cc.Invoke(ctx, Pay_GetListDemoOrder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payClient) UpdateDemoOrderPaid(ctx context.Context, in *UpdateDemoOrderPaidReq, opts ...grpc.CallOption) (*BaseResp, error) {
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, Pay_UpdateDemoOrderPaid_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payClient) RefundDemoOrder(ctx context.Context, in *RefundDemoOrderReq, opts ...grpc.CallOption) (*BaseResp, error) {
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, Pay_RefundDemoOrder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payClient) UpdateDemoRefundPaid(ctx context.Context, in *UpdateDemoRefundPaidReq, opts ...grpc.CallOption) (*BaseResp, error) {
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, Pay_UpdateDemoRefundPaid_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payClient) CreateOrder(ctx context.Context, in *OrderCreateReq, opts ...grpc.CallOption) (*BaseIDResp, error) {
	out := new(BaseIDResp)
	err := c.cc.Invoke(ctx, Pay_CreateOrder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payClient) GetOrder(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*OrderInfo, error) {
	out := new(OrderInfo)
	err := c.cc.Invoke(ctx, Pay_GetOrder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payClient) GetOrderPage(ctx context.Context, in *OrderPageReq, opts ...grpc.CallOption) (*OrderListResp, error) {
	out := new(OrderListResp)
	err := c.cc.Invoke(ctx, Pay_GetOrderPage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payClient) CreateOrderExtension(ctx context.Context, in *OrderCreateExtensionReq, opts ...grpc.CallOption) (*BaseIDResp, error) {
	out := new(BaseIDResp)
	err := c.cc.Invoke(ctx, Pay_CreateOrderExtension_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payClient) GetOrderExtension(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*OrderExtensionInfo, error) {
	out := new(OrderExtensionInfo)
	err := c.cc.Invoke(ctx, Pay_GetOrderExtension_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payClient) NotifyOrder(ctx context.Context, in *NotifyOrderReq, opts ...grpc.CallOption) (*BaseResp, error) {
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, Pay_NotifyOrder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payClient) ValidateOrderCanSubmit(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*OrderInfo, error) {
	out := new(OrderInfo)
	err := c.cc.Invoke(ctx, Pay_ValidateOrderCanSubmit_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payClient) CreateRefund(ctx context.Context, in *RefundCreateReq, opts ...grpc.CallOption) (*BaseIDResp, error) {
	out := new(BaseIDResp)
	err := c.cc.Invoke(ctx, Pay_CreateRefund_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payClient) GetRefundPage(ctx context.Context, in *RefundPageReq, opts ...grpc.CallOption) (*RefundPageResp, error) {
	out := new(RefundPageResp)
	err := c.cc.Invoke(ctx, Pay_GetRefundPage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payClient) GetRefundById(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*RefundInfo, error) {
	out := new(RefundInfo)
	err := c.cc.Invoke(ctx, Pay_GetRefundById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payClient) NotifyRefund(ctx context.Context, in *NotifyRefundReq, opts ...grpc.CallOption) (*BaseResp, error) {
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, Pay_NotifyRefund_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PayServer is the server API for Pay service.
// All implementations must embed UnimplementedPayServer
// for forward compatibility
type PayServer interface {
	// App management
	// group: app
	CreateApp(context.Context, *AppCreateReq) (*BaseIDResp, error)
	// group: app
	UpdateApp(context.Context, *AppUpdateReq) (*BaseResp, error)
	// group: app
	UpdateAppStatus(context.Context, *AppUpdateStatusReq) (*BaseResp, error)
	// group: app
	DeleteApp(context.Context, *IDReq) (*BaseResp, error)
	// group: app
	GetApp(context.Context, *IDReq) (*AppInfo, error)
	// group: app
	GetAppList(context.Context, *Empty) (*AppListResp, error)
	// group: app
	GetAppPage(context.Context, *AppPageReq) (*AppListResp, error)
	// group: base
	InitDatabase(context.Context, *Empty) (*BaseResp, error)
	// Channel management
	// group: channel
	CreateChannel(context.Context, *ChannelCreateReq) (*BaseIDResp, error)
	// group: channel
	UpdateChannel(context.Context, *ChannelUpdateReq) (*BaseResp, error)
	// group: channel
	DeleteChannel(context.Context, *IDReq) (*BaseResp, error)
	// group: channel
	GetChannelById(context.Context, *IDReq) (*ChannelInfo, error)
	// group: channel
	GetChannelListByAppIds(context.Context, *IDsReq) (*ChannelListResp, error)
	// group: channel
	GetChannelListByAppIdAndCode(context.Context, *ByAppIdAndCodeReq) (*ChannelInfo, error)
	// group: channel
	GetEnableChannelList(context.Context, *IDReq) (*ChannelListResp, error)
	// group: channel
	ValidateChannelCanSubmit(context.Context, *ValidateChannelReq) (*ChannelInfo, error)
	// Demo management
	// group: demo
	CreateDemoOrder(context.Context, *PayDemoOrderCreateReq) (*BaseIDResp, error)
	// group: demo
	GetDemoOrder(context.Context, *IDReq) (*DemoOrderInfo, error)
	// group: demo
	GetListDemoOrder(context.Context, *DemoOrderPageReq) (*DemoOrderListResp, error)
	// group: demo
	UpdateDemoOrderPaid(context.Context, *UpdateDemoOrderPaidReq) (*BaseResp, error)
	// group: demo
	RefundDemoOrder(context.Context, *RefundDemoOrderReq) (*BaseResp, error)
	// group: demo
	UpdateDemoRefundPaid(context.Context, *UpdateDemoRefundPaidReq) (*BaseResp, error)
	// Order management
	// group: order
	CreateOrder(context.Context, *OrderCreateReq) (*BaseIDResp, error)
	// group: order
	GetOrder(context.Context, *IDReq) (*OrderInfo, error)
	// group: order
	GetOrderPage(context.Context, *OrderPageReq) (*OrderListResp, error)
	// group: order
	CreateOrderExtension(context.Context, *OrderCreateExtensionReq) (*BaseIDResp, error)
	// group: order
	GetOrderExtension(context.Context, *IDReq) (*OrderExtensionInfo, error)
	// group: order
	NotifyOrder(context.Context, *NotifyOrderReq) (*BaseResp, error)
	// group: order
	ValidateOrderCanSubmit(context.Context, *IDReq) (*OrderInfo, error)
	// refund management
	// group: refund
	CreateRefund(context.Context, *RefundCreateReq) (*BaseIDResp, error)
	// group: refund
	GetRefundPage(context.Context, *RefundPageReq) (*RefundPageResp, error)
	// group: refund
	GetRefundById(context.Context, *IDReq) (*RefundInfo, error)
	// group: refund
	NotifyRefund(context.Context, *NotifyRefundReq) (*BaseResp, error)
	mustEmbedUnimplementedPayServer()
}

// UnimplementedPayServer must be embedded to have forward compatible implementations.
type UnimplementedPayServer struct {
}

func (UnimplementedPayServer) CreateApp(context.Context, *AppCreateReq) (*BaseIDResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateApp not implemented")
}
func (UnimplementedPayServer) UpdateApp(context.Context, *AppUpdateReq) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateApp not implemented")
}
func (UnimplementedPayServer) UpdateAppStatus(context.Context, *AppUpdateStatusReq) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAppStatus not implemented")
}
func (UnimplementedPayServer) DeleteApp(context.Context, *IDReq) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteApp not implemented")
}
func (UnimplementedPayServer) GetApp(context.Context, *IDReq) (*AppInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetApp not implemented")
}
func (UnimplementedPayServer) GetAppList(context.Context, *Empty) (*AppListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppList not implemented")
}
func (UnimplementedPayServer) GetAppPage(context.Context, *AppPageReq) (*AppListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppPage not implemented")
}
func (UnimplementedPayServer) InitDatabase(context.Context, *Empty) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitDatabase not implemented")
}
func (UnimplementedPayServer) CreateChannel(context.Context, *ChannelCreateReq) (*BaseIDResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateChannel not implemented")
}
func (UnimplementedPayServer) UpdateChannel(context.Context, *ChannelUpdateReq) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateChannel not implemented")
}
func (UnimplementedPayServer) DeleteChannel(context.Context, *IDReq) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteChannel not implemented")
}
func (UnimplementedPayServer) GetChannelById(context.Context, *IDReq) (*ChannelInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChannelById not implemented")
}
func (UnimplementedPayServer) GetChannelListByAppIds(context.Context, *IDsReq) (*ChannelListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChannelListByAppIds not implemented")
}
func (UnimplementedPayServer) GetChannelListByAppIdAndCode(context.Context, *ByAppIdAndCodeReq) (*ChannelInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChannelListByAppIdAndCode not implemented")
}
func (UnimplementedPayServer) GetEnableChannelList(context.Context, *IDReq) (*ChannelListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEnableChannelList not implemented")
}
func (UnimplementedPayServer) ValidateChannelCanSubmit(context.Context, *ValidateChannelReq) (*ChannelInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateChannelCanSubmit not implemented")
}
func (UnimplementedPayServer) CreateDemoOrder(context.Context, *PayDemoOrderCreateReq) (*BaseIDResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDemoOrder not implemented")
}
func (UnimplementedPayServer) GetDemoOrder(context.Context, *IDReq) (*DemoOrderInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDemoOrder not implemented")
}
func (UnimplementedPayServer) GetListDemoOrder(context.Context, *DemoOrderPageReq) (*DemoOrderListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListDemoOrder not implemented")
}
func (UnimplementedPayServer) UpdateDemoOrderPaid(context.Context, *UpdateDemoOrderPaidReq) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDemoOrderPaid not implemented")
}
func (UnimplementedPayServer) RefundDemoOrder(context.Context, *RefundDemoOrderReq) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefundDemoOrder not implemented")
}
func (UnimplementedPayServer) UpdateDemoRefundPaid(context.Context, *UpdateDemoRefundPaidReq) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDemoRefundPaid not implemented")
}
func (UnimplementedPayServer) CreateOrder(context.Context, *OrderCreateReq) (*BaseIDResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrder not implemented")
}
func (UnimplementedPayServer) GetOrder(context.Context, *IDReq) (*OrderInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrder not implemented")
}
func (UnimplementedPayServer) GetOrderPage(context.Context, *OrderPageReq) (*OrderListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrderPage not implemented")
}
func (UnimplementedPayServer) CreateOrderExtension(context.Context, *OrderCreateExtensionReq) (*BaseIDResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrderExtension not implemented")
}
func (UnimplementedPayServer) GetOrderExtension(context.Context, *IDReq) (*OrderExtensionInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrderExtension not implemented")
}
func (UnimplementedPayServer) NotifyOrder(context.Context, *NotifyOrderReq) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyOrder not implemented")
}
func (UnimplementedPayServer) ValidateOrderCanSubmit(context.Context, *IDReq) (*OrderInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateOrderCanSubmit not implemented")
}
func (UnimplementedPayServer) CreateRefund(context.Context, *RefundCreateReq) (*BaseIDResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRefund not implemented")
}
func (UnimplementedPayServer) GetRefundPage(context.Context, *RefundPageReq) (*RefundPageResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRefundPage not implemented")
}
func (UnimplementedPayServer) GetRefundById(context.Context, *IDReq) (*RefundInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRefundById not implemented")
}
func (UnimplementedPayServer) NotifyRefund(context.Context, *NotifyRefundReq) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyRefund not implemented")
}
func (UnimplementedPayServer) mustEmbedUnimplementedPayServer() {}

// UnsafePayServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PayServer will
// result in compilation errors.
type UnsafePayServer interface {
	mustEmbedUnimplementedPayServer()
}

func RegisterPayServer(s grpc.ServiceRegistrar, srv PayServer) {
	s.RegisterService(&Pay_ServiceDesc, srv)
}

func _Pay_CreateApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayServer).CreateApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pay_CreateApp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayServer).CreateApp(ctx, req.(*AppCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pay_UpdateApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayServer).UpdateApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pay_UpdateApp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayServer).UpdateApp(ctx, req.(*AppUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pay_UpdateAppStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppUpdateStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayServer).UpdateAppStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pay_UpdateAppStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayServer).UpdateAppStatus(ctx, req.(*AppUpdateStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pay_DeleteApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayServer).DeleteApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pay_DeleteApp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayServer).DeleteApp(ctx, req.(*IDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pay_GetApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayServer).GetApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pay_GetApp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayServer).GetApp(ctx, req.(*IDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pay_GetAppList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayServer).GetAppList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pay_GetAppList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayServer).GetAppList(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pay_GetAppPage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppPageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayServer).GetAppPage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pay_GetAppPage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayServer).GetAppPage(ctx, req.(*AppPageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pay_InitDatabase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayServer).InitDatabase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pay_InitDatabase_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayServer).InitDatabase(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pay_CreateChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChannelCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayServer).CreateChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pay_CreateChannel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayServer).CreateChannel(ctx, req.(*ChannelCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pay_UpdateChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChannelUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayServer).UpdateChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pay_UpdateChannel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayServer).UpdateChannel(ctx, req.(*ChannelUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pay_DeleteChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayServer).DeleteChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pay_DeleteChannel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayServer).DeleteChannel(ctx, req.(*IDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pay_GetChannelById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayServer).GetChannelById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pay_GetChannelById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayServer).GetChannelById(ctx, req.(*IDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pay_GetChannelListByAppIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayServer).GetChannelListByAppIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pay_GetChannelListByAppIds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayServer).GetChannelListByAppIds(ctx, req.(*IDsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pay_GetChannelListByAppIdAndCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ByAppIdAndCodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayServer).GetChannelListByAppIdAndCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pay_GetChannelListByAppIdAndCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayServer).GetChannelListByAppIdAndCode(ctx, req.(*ByAppIdAndCodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pay_GetEnableChannelList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayServer).GetEnableChannelList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pay_GetEnableChannelList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayServer).GetEnableChannelList(ctx, req.(*IDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pay_ValidateChannelCanSubmit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateChannelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayServer).ValidateChannelCanSubmit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pay_ValidateChannelCanSubmit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayServer).ValidateChannelCanSubmit(ctx, req.(*ValidateChannelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pay_CreateDemoOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PayDemoOrderCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayServer).CreateDemoOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pay_CreateDemoOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayServer).CreateDemoOrder(ctx, req.(*PayDemoOrderCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pay_GetDemoOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayServer).GetDemoOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pay_GetDemoOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayServer).GetDemoOrder(ctx, req.(*IDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pay_GetListDemoOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DemoOrderPageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayServer).GetListDemoOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pay_GetListDemoOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayServer).GetListDemoOrder(ctx, req.(*DemoOrderPageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pay_UpdateDemoOrderPaid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDemoOrderPaidReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayServer).UpdateDemoOrderPaid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pay_UpdateDemoOrderPaid_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayServer).UpdateDemoOrderPaid(ctx, req.(*UpdateDemoOrderPaidReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pay_RefundDemoOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefundDemoOrderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayServer).RefundDemoOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pay_RefundDemoOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayServer).RefundDemoOrder(ctx, req.(*RefundDemoOrderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pay_UpdateDemoRefundPaid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDemoRefundPaidReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayServer).UpdateDemoRefundPaid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pay_UpdateDemoRefundPaid_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayServer).UpdateDemoRefundPaid(ctx, req.(*UpdateDemoRefundPaidReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pay_CreateOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayServer).CreateOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pay_CreateOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayServer).CreateOrder(ctx, req.(*OrderCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pay_GetOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayServer).GetOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pay_GetOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayServer).GetOrder(ctx, req.(*IDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pay_GetOrderPage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderPageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayServer).GetOrderPage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pay_GetOrderPage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayServer).GetOrderPage(ctx, req.(*OrderPageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pay_CreateOrderExtension_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderCreateExtensionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayServer).CreateOrderExtension(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pay_CreateOrderExtension_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayServer).CreateOrderExtension(ctx, req.(*OrderCreateExtensionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pay_GetOrderExtension_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayServer).GetOrderExtension(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pay_GetOrderExtension_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayServer).GetOrderExtension(ctx, req.(*IDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pay_NotifyOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotifyOrderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayServer).NotifyOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pay_NotifyOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayServer).NotifyOrder(ctx, req.(*NotifyOrderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pay_ValidateOrderCanSubmit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayServer).ValidateOrderCanSubmit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pay_ValidateOrderCanSubmit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayServer).ValidateOrderCanSubmit(ctx, req.(*IDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pay_CreateRefund_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefundCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayServer).CreateRefund(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pay_CreateRefund_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayServer).CreateRefund(ctx, req.(*RefundCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pay_GetRefundPage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefundPageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayServer).GetRefundPage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pay_GetRefundPage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayServer).GetRefundPage(ctx, req.(*RefundPageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pay_GetRefundById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayServer).GetRefundById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pay_GetRefundById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayServer).GetRefundById(ctx, req.(*IDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pay_NotifyRefund_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotifyRefundReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayServer).NotifyRefund(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pay_NotifyRefund_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayServer).NotifyRefund(ctx, req.(*NotifyRefundReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Pay_ServiceDesc is the grpc.ServiceDesc for Pay service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Pay_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pay.Pay",
	HandlerType: (*PayServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "createApp",
			Handler:    _Pay_CreateApp_Handler,
		},
		{
			MethodName: "updateApp",
			Handler:    _Pay_UpdateApp_Handler,
		},
		{
			MethodName: "updateAppStatus",
			Handler:    _Pay_UpdateAppStatus_Handler,
		},
		{
			MethodName: "deleteApp",
			Handler:    _Pay_DeleteApp_Handler,
		},
		{
			MethodName: "getApp",
			Handler:    _Pay_GetApp_Handler,
		},
		{
			MethodName: "getAppList",
			Handler:    _Pay_GetAppList_Handler,
		},
		{
			MethodName: "getAppPage",
			Handler:    _Pay_GetAppPage_Handler,
		},
		{
			MethodName: "initDatabase",
			Handler:    _Pay_InitDatabase_Handler,
		},
		{
			MethodName: "createChannel",
			Handler:    _Pay_CreateChannel_Handler,
		},
		{
			MethodName: "updateChannel",
			Handler:    _Pay_UpdateChannel_Handler,
		},
		{
			MethodName: "deleteChannel",
			Handler:    _Pay_DeleteChannel_Handler,
		},
		{
			MethodName: "getChannelById",
			Handler:    _Pay_GetChannelById_Handler,
		},
		{
			MethodName: "getChannelListByAppIds",
			Handler:    _Pay_GetChannelListByAppIds_Handler,
		},
		{
			MethodName: "getChannelListByAppIdAndCode",
			Handler:    _Pay_GetChannelListByAppIdAndCode_Handler,
		},
		{
			MethodName: "getEnableChannelList",
			Handler:    _Pay_GetEnableChannelList_Handler,
		},
		{
			MethodName: "validateChannelCanSubmit",
			Handler:    _Pay_ValidateChannelCanSubmit_Handler,
		},
		{
			MethodName: "createDemoOrder",
			Handler:    _Pay_CreateDemoOrder_Handler,
		},
		{
			MethodName: "getDemoOrder",
			Handler:    _Pay_GetDemoOrder_Handler,
		},
		{
			MethodName: "getListDemoOrder",
			Handler:    _Pay_GetListDemoOrder_Handler,
		},
		{
			MethodName: "updateDemoOrderPaid",
			Handler:    _Pay_UpdateDemoOrderPaid_Handler,
		},
		{
			MethodName: "refundDemoOrder",
			Handler:    _Pay_RefundDemoOrder_Handler,
		},
		{
			MethodName: "updateDemoRefundPaid",
			Handler:    _Pay_UpdateDemoRefundPaid_Handler,
		},
		{
			MethodName: "createOrder",
			Handler:    _Pay_CreateOrder_Handler,
		},
		{
			MethodName: "getOrder",
			Handler:    _Pay_GetOrder_Handler,
		},
		{
			MethodName: "getOrderPage",
			Handler:    _Pay_GetOrderPage_Handler,
		},
		{
			MethodName: "createOrderExtension",
			Handler:    _Pay_CreateOrderExtension_Handler,
		},
		{
			MethodName: "getOrderExtension",
			Handler:    _Pay_GetOrderExtension_Handler,
		},
		{
			MethodName: "notifyOrder",
			Handler:    _Pay_NotifyOrder_Handler,
		},
		{
			MethodName: "validateOrderCanSubmit",
			Handler:    _Pay_ValidateOrderCanSubmit_Handler,
		},
		{
			MethodName: "createRefund",
			Handler:    _Pay_CreateRefund_Handler,
		},
		{
			MethodName: "getRefundPage",
			Handler:    _Pay_GetRefundPage_Handler,
		},
		{
			MethodName: "getRefundById",
			Handler:    _Pay_GetRefundById_Handler,
		},
		{
			MethodName: "notifyRefund",
			Handler:    _Pay_NotifyRefund_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pay.proto",
}
